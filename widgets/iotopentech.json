{
  "widgetsBundle": {
    "alias": "iotopentech",
    "title": "IoTopenTech",
    "image": null
  },
  "widgetTypes": [
    {
      "alias": "simple_card",
      "name": "PuertaABIERTA_CERRADA",
      "descriptor": {
        "type": "latest",
        "sizeX": 5,
        "sizeY": 3,
        "resources": [],
        "templateHtml": "",
        "templateCss": "#container {\n    overflow: auto;\n}\n\n.tbDatasource-container {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n}\n\n.tbDatasource-table {\n    width: 100%;\n    height: 100%;\n    border-collapse: collapse;\n    white-space: nowrap;\n    font-weight: 100;\n    text-align: right;\n}\n\n.tbDatasource-table td {\n    padding: 12px;\n    position: relative;\n    box-sizing: border-box;\n}\n\n.tbDatasource-data-key {\n    opacity: 0.7;\n    font-weight: 400;\n    font-size: 3.500rem;\n}\n\n.tbDatasource-value {\n    font-size: 5.000rem;\n}",
        "controllerScript": "self.onInit = function() {\n\n    self.ctx.labelPosition = self.ctx.settings\n        .labelPosition || 'left';\n\n    if (self.ctx.datasources.length > 0) {\n        var tbDatasource = self.ctx.datasources[0];\n        var datasourceId = 'tbDatasource' + 0;\n        self.ctx.$container.append(\n            \"<div id='\" + datasourceId +\n            \"' class='tbDatasource-container'></div>\"\n        );\n\n        self.ctx.datasourceContainer = $('#' +\n            datasourceId,\n            self.ctx.$container);\n\n        var tableId = 'table' + 0;\n        self.ctx.datasourceContainer.append(\n            \"<table id='\" + tableId +\n            \"' class='tbDatasource-table'><col width='30%'><col width='70%'></table>\"\n        );\n        var table = $('#' + tableId, self.ctx\n            .$container);\n        if (self.ctx.labelPosition === 'top') {\n            table.css('text-align', 'left');\n        }\n\n        if (tbDatasource.dataKeys.length > 0) {\n            var dataKey = tbDatasource.dataKeys[0];\n            var labelCellId = 'labelCell' + 0;\n            var cellId = 'cell' + 0;\n            if (self.ctx.labelPosition === 'left') {\n                table.append(\n                    \"<tr><td class='tbDatasource-data-key' id='\" +\n                    labelCellId + \"'>\" +\n                    dataKey.label +\n                    \"</td><td class='tbDatasource-value' id='\" +\n                    cellId +\n                    \"'></td></tr>\");\n            } else {\n                table.append(\n                    \"<tr style='vertical-align: bottom;'><td class='tbDatasource-data-key' id='\" +\n                    labelCellId + \"'>\" +\n                    dataKey.label +\n                    \"</td></tr><tr><td class='tbDatasource-value' id='\" +\n                    cellId +\n                    \"'></td></tr>\");\n            }\n            self.ctx.labelCell = $('#' + labelCellId,\n                table);\n            self.ctx.valueCell = $('#' + cellId, table);\n            self.ctx.valueCell.html(0 + ' ' + self.ctx\n                .units);\n        }\n    }\n\n    $.fn.textWidth = function() {\n        var html_org = $(this).html();\n        var html_calc = '<span>' + html_org +\n            '</span>';\n        $(this).html(html_calc);\n        var width = $(this).find('span:first')\n            .width();\n        $(this).html(html_org);\n        return width;\n    };\n\n    self.onResize();\n};\n\nself.onDataUpdated = function() {\n\n    function isNumber(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n\n    if (self.ctx.valueCell && self.ctx.data.length >\n        0) {\n        var cellData = self.ctx.data[0];\n        if (cellData.data.length > 0) {\n            var tvPair = cellData.data[cellData.data\n                .length -\n                1];\n            var value = tvPair[1];\n            var txtValue;\n            if (isNumber(value)) {\n                var decimals = self.ctx.decimals;\n                var units = self.ctx.units;\n                if (self.ctx.datasources.length > 0 &&\n                    self.ctx.datasources[0].dataKeys\n                    .length > 0) {\n                    dataKey = self.ctx.datasources[0]\n                        .dataKeys[0];\n                    if (dataKey.decimals || dataKey\n                        .decimals === 0) {\n                        decimals = dataKey.decimals;\n                    }\n                    if (dataKey.units) {\n                        units = dataKey.units;\n                    }\n                }\n                txtValue = self.ctx.utils.formatValue(\n                    value, decimals, units, true);\n            } else {\n                txtValue = value;\n            }\n            self.ctx.valueCell.html(txtValue);\n            \n            //Añadido por Juanfe\n            if (txtValue === 'ABIERTA') {\n\n                self.ctx.$containerParent[0]\n                    .parentElement.parentElement.style\n                    .backgroundColor = 'red';\n            } else {\n\n                self.ctx.$containerParent[0]\n                    .parentElement.parentElement.style\n                    .backgroundColor = 'green';\n            }\n\n\n            //Fin añadido\n\n            var targetWidth;\n            var minDelta;\n            if (self.ctx.labelPosition === 'left') {\n                targetWidth = self.ctx\n                    .datasourceContainer.width() - self\n                    .ctx.labelCell.width();\n                minDelta = self.ctx.width / 16 + self\n                    .ctx.padding;\n            } else {\n                targetWidth = self.ctx\n                    .datasourceContainer.width();\n                minDelta = self.ctx.padding;\n            }\n            var delta = targetWidth - self.ctx.valueCell\n                .textWidth();\n            var fontSize = self.ctx.valueFontSize;\n            if (targetWidth > minDelta) {\n                while (delta < minDelta && fontSize >\n                    6) {\n                    fontSize--;\n                    self.ctx.valueCell.css('font-size',\n                        fontSize + 'px');\n                    delta = targetWidth - self.ctx\n                        .valueCell.textWidth();\n                }\n            }\n        }\n    }\n\n};\n\nself.onResize = function() {\n    var labelFontSize;\n    if (self.ctx.labelPosition === 'top') {\n        self.ctx.padding = self.ctx.height / 20;\n        labelFontSize = self.ctx.height / 4;\n        self.ctx.valueFontSize = self.ctx.height / 2;\n    } else {\n        self.ctx.padding = self.ctx.width / 50;\n        labelFontSize = self.ctx.height / 2.5;\n        self.ctx.valueFontSize = self.ctx.height / 2;\n        if (self.ctx.width / self.ctx.height <= 2.7) {\n            labelFontSize = self.ctx.width / 7;\n            self.ctx.valueFontSize = self.ctx.width / 6;\n        }\n    }\n    self.ctx.padding = Math.min(12, self.ctx.padding);\n\n    if (self.ctx.labelCell) {\n        self.ctx.labelCell.css('font-size',\n            labelFontSize + 'px');\n        self.ctx.labelCell.css('padding', self.ctx\n            .padding + 'px');\n    }\n    if (self.ctx.valueCell) {\n        self.ctx.valueCell.css('font-size', self.ctx\n            .valueFontSize + 'px');\n        self.ctx.valueCell.css('padding', self.ctx\n            .padding + 'px');\n    }\n};\n\nself.typeParameters = function() {\n    return {\n        maxDatasources: 1,\n        maxDataKeys: 1\n    };\n};\n\n\nself.onDestroy = function() {};",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"labelPosition\": {\n                \"title\": \"Label position\",\n                \"type\": \"string\",\n                \"default\": \"left\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        {\n           \"key\": \"labelPosition\",\n           \"type\": \"rc-select\",\n           \"multiple\": false,\n           \"items\": [\n               {\n                   \"value\": \"left\",\n                   \"label\": \"Left\"\n               },\n               {\n                   \"value\": \"top\",\n                   \"label\": \"Top\"\n               }\n            ]\n        }\n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Temp\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.2392660816082064,\"funcBody\":\"var value = prevValue + Math.random() * 40 - 20;\\nif (value < -60) {\\n\\tvalue = -60;\\n} else if (value > 60) {\\n\\tvalue = 60;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#ff5722\",\"color\":\"rgba(255, 255, 255, 0.87)\",\"padding\":\"16px\",\"settings\":{\"labelPosition\":\"top\"},\"title\":\"PuertaABIERTA_CERRADA\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"units\":\"°C\",\"decimals\":0,\"useDashboardTimewindow\":true,\"showLegend\":false,\"widgetStyle\":{},\"actions\":{}}"
      }
    },
    {
      "alias": "volver",
      "name": "Volver",
      "descriptor": {
        "type": "static",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [],
        "templateHtml": "  <div flex layout=\"column\" style=\"height: 100%;\" layout-align=\"space-around stretch\">\n      <md-button class=\"md-primary md-raised\" ng-click=\"showAlert()\">VOLVER</md-button>\n  </div>\n",
        "templateCss": "",
        "controllerScript": "self.onInit = function() {\n    var $injector = ctx.$scope.$injector;\n\n    var userService = $injector.get('userService');\n    var vm = this;\n    vm.currentUser = userService.getCurrentUser();\n\n    //var params = angular.copy(ctx.stateController.getStateParams());\n    \n    self.ctx.$scope.showAlert = function() {\n        var alertContent = self.ctx.settings\n            .alertContent;\n        if (!alertContent) {\n            alertContent =\n                \"Content derived from alertContent property of widget settings.\";\n        }\n        window.alert(alertContent);\n    };\n\n}",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"alertContent\": {\n                \"title\": \"Alert content\",\n                \"type\": \"string\",\n                \"default\": \"Content derived from alertContent property of widget settings.\"\n            }\n        }\n    },\n    \"form\": [\n        \"alertContent\"\n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"cardHtml\":\"<div class='card'>HTML code here</div>\",\"cardCss\":\".card {\\n    font-weight: bold;\\n    font-size: 32px;\\n    color: #999;\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\"},\"title\":\"Volver\",\"dropShadow\":true}"
      }
    },
    {
      "alias": "perfil2",
      "name": "perfil2",
      "descriptor": {
        "type": "static",
        "sizeX": 9.5,
        "sizeY": 7.5,
        "resources": [],
        "templateHtml": "<div style=\"padding-bottom: 1px; color: rgba(0,0,0,0.57);\">\n    Notificación por email\n</div>\n\n<div class=\"md-whiteframe-1dp\"\n    style=\"margin: 5px 10px 20px 10px;\">\n    <form name=\"guardarEmail\"\n        ng-submit=\"gestionarEmail(accionFormulario)\">\n\n        <md-input-container\n            style=\"margin: 0px;margin-top: 10px;\">\n            <label>email</label>\n            <input size=\"50\" ng-model=\"email\" type=\"email\">\n\n        </md-input-container>\n        <div>\n            <md-button aria-label=\"GUARDAR\" type=\"button\"\n                ng-click=\"gestionarEmail('guardar')\"\n                name=\"botonGuardar\">\n                <md-icon>check</md-icon>\n                <md-tooltip md-direction=\"top\">\n                    Guardar email para notificaciones\n                </md-tooltip>\n            </md-button>\n            <md-button aria-label=\"BORRAR\" type=\"button\"\n                ng-click=\"gestionarEmail('borrar')\"\n                name=\"botonBorrar\">\n\n                <md-icon>close</md-icon>\n                <md-tooltip md-direction=\"top\">\n                    Borrar email para notificaciones\n                </md-tooltip>\n            </md-button>\n        </div>\n\n\n    </form>\n</div>\n\n<div style=\"padding-bottom: 1px; color: rgba(0,0,0,0.57);\">\n    Notificación por IFTTT\n</div>\n\n<div class=\"md-whiteframe-1dp\"\n    style=\"padding: 5px;margin: 5px 10px 20px 10px;\">\n    <form name=\"guardarIFTTT\"\n        ng-submit=\"gestionarIFTTT(accionFormulario)\">\n\n        <md-input-container\n            style=\"margin: 0px;margin-top: 10px;\">\n            <label>Token webhook IFTTT</label>\n            <input size=\"50\" ng-model=\"token_webhook_ifttt\"\n                type=\"password\">\n\n        </md-input-container>\n        <div>\n            <md-button aria-label=\"GUARDAR\" type=\"button\"\n                ng-click=\"gestionarIFTTT('guardar')\"\n                name=\"botonGuardar\">\n                <md-icon>check</md-icon>\n                <md-tooltip md-direction=\"top\">\n                    Guardar token webhook de IFTTT para\n                    notificaciones\n                </md-tooltip>\n            </md-button>\n            <md-button aria-label=\"BORRAR\" type=\"button\"\n                ng-click=\"gestionarIFTTT('borrar')\"\n                name=\"botonBorrar\">\n\n                <md-icon>close</md-icon>\n                <md-tooltip md-direction=\"top\">\n                    Borrar token webhook de IFTTT para\n                    notificaciones\n                </md-tooltip>\n            </md-button>\n        </div>\n\n\n    </form>\n</div>\n\n<div style=\"padding-bottom: 1px; color: rgba(0,0,0,0.57);\">\n    Notificación por Telegram\n</div>\n<div class=\"md-whiteframe-1dp\"\n    style=\"margin: 5px 10px 20px 10px;\">\n    <form name=\"guardarTelegram\"\n        ng-submit=\"gestionarTelegram(accionFormulario)\">\n\n        <md-input-container\n            style=\"padding: 5px;margin: 0px;margin-top: 10px;\">\n            <label>Token Telegram</label>\n            <input size=\"30\"\n                ng-required=\"chatid_telegram!==''\"\n                ng-model=\"token_telegram\" type=\"password\">\n        </md-input-container>\n        <md-input-container\n            style=\"margin: 0px;margin-top: 5px;\">\n            <label>Chat ID Telegram</label>\n            <input size=\"20\"\n                ng-required=\"token_telegram!==''\"\n                ng-model=\"chatid_telegram\" type=\"text\">\n        </md-input-container>\n        <div>\n            <md-button aria-label=\"GUARDAR\" type=\"submit\"\n                name=\"botonGuardar\">\n                <md-icon>check</md-icon>\n                <md-tooltip md-direction=\"top\">\n                    Guardar información de Telegram para\n                    notificaciones\n                </md-tooltip>\n            </md-button>\n            <md-button aria-label=\"BORRAR\" type=\"button\"\n                ng-click=\"gestionarTelegram('borrar')\"\n                name=\"botonBorrar\">\n\n                <md-icon>close</md-icon>\n                <md-tooltip md-direction=\"top\">\n                    Borrar información de Telegram para\n                    notificaciones\n                </md-tooltip>\n            </md-button>\n        </div>\n\n\n    </form>\n</div>",
        "templateCss": "",
        "controllerScript": "let $scope;\nself.onInit = function() {\n    $scope = self.ctx.$scope;\n    userService = $scope.$injector.get('userService');\n    deviceService = $scope.$injector.get('deviceService');\n    servicioHTTP = $scope.$injector.get('$http');\n     $location = $scope.$injector.get('$location');\n    attributeService = $scope.$injector.get(\n        'attributeService');\n    if (userService.getCurrentUser().authority ==\n        \"CUSTOMER_USER\") {\n        attributeService.getEntityAttributesValues(\n            'CUSTOMER', userService.getCurrentUser()\n            .customerId,\n            'SERVER_SCOPE').then(\n            function(data) {\n                if (data.length) {\n                    getAtributos(\n                        data);\n                }\n\n            });\n        //Obtengo el token del dispositivo SYSTEM\n        deviceService.getCustomerDevices(userService\n            .getCurrentUser().customerId, {\n                \"limit\": 100\n            }, false, {}, 'SYSTEM').then(\n            function(data) {\n                if (data.data.length == 1) {\n                    deviceService\n                        .getDeviceCredentials(\n                            data.data[0].id.id,\n                            true, {}\n                        ).then(\n                            function(response) {\n                                $scope\n                                    .tokenControl =\n                                    response\n                                    .credentialsId;\n                                \n                            });\n                }\n            });\n\n    }\n    $scope.gestionarEmail = function(accion) {\n        if(accion==\"borrar\"){\n            $scope.email=\"\";\n        }\n        servicioHTTP({\n            method: 'POST',\n            url: $location.protocol() + '://' +\n                $location.host() +\n                '/api/v1/' + $scope.tokenControl +\n                '/telemetry',\n            data: \"{'accion':'editarPerfil','email':'\" + $scope.email + \"'}\"\n        }).\n        success(function(data, status, headers,\n            config) {\n            console.log('worked');\n            \n            // ...\n        }).\n        error(function(data, status, headers,\n            config) {\n            console.log('notworked');\n            // ...\n        });\n    };\n    \n$scope.gestionarIFTTT = function(accion) {\n        if(accion==\"borrar\"){\n            $scope.token_webhook_ifttt=\"\";\n        }\n        servicioHTTP({\n            method: 'POST',\n            url: $location.protocol() + '://' +\n                $location.host() +\n                '/api/v1/' + $scope.tokenControl +\n                '/telemetry',\n            data: \"{'accion':'editarPerfil','token_webhook_ifttt':'\" + $scope.token_webhook_ifttt + \"'}\"\n        }).\n        success(function(data, status, headers,\n            config) {\n            console.log('worked');\n            \n            // ...\n        }).\n        error(function(data, status, headers,\n            config) {\n            console.log('notworked');\n            // ...\n        });\n    };\n\n\n\n$scope.gestionarTelegram = function(accion) {\n        if(accion==\"borrar\"){\n            $scope.token_telegram=\"\";\n            $scope.chatid_telegram=\"\";\n        }\n        servicioHTTP({\n            method: 'POST',\n            url: $location.protocol() + '://' +\n                $location.host() +\n                '/api/v1/' + $scope.tokenControl +\n                '/telemetry',\n            data: \"{'accion':'editarPerfil','token_telegram':'\" + $scope.token_telegram + \"','chatid_telegram':'\"+ $scope.chatid_telegram+ \"'}\"\n        }).        success(function(data, status, headers,\n            config) {\n            console.log('worked');\n            \n            // ...\n        }).        error(function(data, status, headers,\n            config) {\n            console.log('notworked');\n            // ...\n        });\n    };\n}\nfunction getAtributos(attributes) {\n    for (var i = 0; i < attributes.length; i++) {\n        if (attributes[i].key ==\n            \"email\") {\n            $scope.email = attributes[i].value;\n\n        } else if (attributes[i].key ==\n            \"token_telegram\") {\n            $scope.token_telegram = attributes[i].value;\n\n        } else if (attributes[i].key ==\n            \"chatid_telegram\") {\n            $scope.chatid_telegram = attributes[i].value;\n\n        } else if (attributes[i].key ==\n            \"token_webhook_ifttt\") {\n            $scope.token_webhook_ifttt = attributes[i].value;\n\n        }\n\n    }\n}\n\n\n\nself.onResize = function() {}\nself.onDestroy = function() {}",
        "settingsSchema": "{\n    \"schema\": {\n    },\n    \"form\": []\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"showResultMessage\":true},\"title\":\"perfil2\",\"dropShadow\":true,\"showTitleIcon\":false,\"titleIcon\":\"more_horiz\",\"iconColor\":\"rgba(0, 0, 0, 0.87)\",\"iconSize\":\"24px\",\"titleTooltip\":\"\",\"enableFullscreen\":true,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      }
    },
    {
      "alias": "device_claiming_widget",
      "name": "Device claiming IoTopenTech",
      "descriptor": {
        "type": "static",
        "sizeX": 7.5,
        "sizeY": 4.5,
        "resources": [],
        "templateHtml": "<form name=\"claimDeviceForm\" class=\"claim-form\" ng-submit=\"claim()\">\n    <fieldset ng-disabled=\"$root.loading || loading\">\n        <md-input-container ng-class=\"{'show-label': showLabel}\" class=\"md-block\">\n            <label>{{deviceLabel}}</label>\n            <input ng-model=\"deviceObj.deviceName\" \n                   name=\"deviceName\" \n                   required\n            >\n            <div ng-messages=\"claimDeviceForm.deviceName.$error\">\n                <div ng-message=\"required\">{{requiredErrorDevice}}</div>\n            </div>\n        </md-input-container>\n        <md-input-container ng-if=\"secretKeyField\" class=\"md-block\" ng-class=\"{'show-label': showLabel}\">\n            <label>{{secretKeyLabel}}</label>\n            <input name=\"deviceSecret\" ng-model=\"deviceObj.deviceSecret\" required>\n            <div ng-messages=\"claimDeviceForm.deviceSecret.$error\">\n                <div ng-message=\"required\">{{requiredErrorSecretKey}}</div>\n            </div>\n        </md-input-container>\n    </fieldset>\n    <div class=\"md-block\" layout=\"row\" layout-align=\"end center\">\n        <md-button type=\"submit\" ng-disabled=\"loading || claimDeviceForm.$invalid || !claimDeviceForm.$dirty\" class=\"md-raised md-primary\">{{labelClaimButon}}</md-button>\n    </div>\n</form>",
        "templateCss": ".claim-form {\n    overflow: hidden;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.show-label label {\n    display: block;\n}\n\nlabel {\n    display: none;\n}",
        "controllerScript": "let $scope;\n\nself.onInit = function() {\n    $scope = self.ctx.$scope;\n    let $injector = $scope.$injector;\n    let $q = $injector.get('$q');\n    let $http = $injector.get('$http');\n    let $location = $injector.get('$location');\n    let $deviceService = $injector.get('deviceService');\n    let $userService = $injector.get('userService');\n    let toast = $scope.$injector.get('toast');\n    let utils = $scope.$injector.get('utils');\n    let $translate = $scope.$injector.get('$translate');\n    let $rootScope = $scope.$injector.get('$rootScope');\n    let settings = self.ctx.settings || {};\n    $scope.secretKeyField = settings.deviceSecret;\n    $scope.showLabel = settings.showLabel;\n    $scope.deviceObj = {};\n\n    const config = {\n        ignoreErrors: true\n    };\n\n    let titleTemplate = \"\";\n    let successfulClaim = utils.customTranslation(\n            settings.successfulClaimDevice, settings\n            .successfulClaimDevice) || $translate\n        .instant(\n            'widgets.input-widgets.claim-successful');\n    let failedClaimDevice = utils.customTranslation(\n        settings.failedClaimDevice, settings\n        .failedClaimDevice) || $translate.instant(\n        'widgets.input-widgets.claim-failed');\n    let deviceNotFound = utils.customTranslation(\n        settings.deviceNotFound, settings\n        .deviceNotFound) || $translate.instant(\n        'widgets.input-widgets.claim-not-found');\n\n    if (settings.widgetTitle && settings.widgetTitle\n        .length) {\n        titleTemplate = utils.customTranslation(settings\n            .widgetTitle, settings.widgetTitle);\n    } else {\n        titleTemplate = self.ctx.widgetConfig.title;\n    }\n    self.ctx.widgetTitle = titleTemplate;\n\n    $scope.deviceLabel = utils.customTranslation(\n        settings.deviceLabel, settings.deviceLabel\n    ) || $translate.instant(\n        'widgets.input-widgets.device-name');\n    $scope.requiredErrorDevice = utils\n        .customTranslation(settings.requiredErrorDevice,\n            settings.requiredErrorDevice) || $translate\n        .instant(\n            'widgets.input-widgets.device-name-required'\n        );\n\n    $scope.secretKeyLabel = utils.customTranslation(\n        settings.secretKeyLabel, settings\n        .secretKeyLabel) || $translate.instant(\n        'widgets.input-widgets.secret-key');\n    $scope.requiredErrorSecretKey = utils\n        .customTranslation(settings\n            .requiredErrorSecretKey, settings\n            .requiredErrorSecretKey) || $translate\n        .instant(\n            'widgets.input-widgets.secret-key-required'\n        );\n\n    $scope.labelClaimButon = utils.customTranslation(\n        settings.labelClaimButon, settings\n        .labelClaimButon) || $translate.instant(\n        'widgets.input-widgets.claim-device');\n\n    $scope.claim = () => {\n        $scope.loading = true;\n        //Antepongo la P al nombre del dispositivo\n        claimDevice(\"P\" + $scope.deviceObj\n            .deviceName, $scope.deviceObj\n            .deviceSecret, config).then(\n            (data) => {\n                //console.log(data);\n                //Después de reclamarlo tenemos que guardar el nombre original en el atributo originalName\n                //cambiarle: nombre y padre\n                //Y crear las relaciones con el Customer\n                //Obtengo el token del dispositivo SYSTEM\n                $deviceService\n                    .getCustomerDevices(\n                        $userService\n                        .getCurrentUser()\n                        .customerId, {\n                            \"limit\": 100\n                        }, false, {}, 'SYSTEM')\n                    .then(\n                        function(dataSystem) {\n                            if (dataSystem.data\n                                .length == 1) {\n                                $deviceService\n                                    .getDeviceCredentials(\n                                        dataSystem\n                                        .data[0]\n                                        .id.id,\n                                        true, {}\n                                    ).then(\n                                        function(\n                                            response\n                                        ) {\n                                            reasignar\n                                                (response\n                                                    .credentialsId,\n                                                    data\n                                                    .device\n                                                    .id\n                                                    .id,\n                                                    \"P\" +\n                                                    $scope\n                                                    .deviceObj\n                                                    .deviceName,\n                                                    data\n                                                    .device\n                                                    .type\n                                                );\n\n\n                                        });\n                            }\n                        });\n\n\n\n            },\n            (error) => {\n                $scope.loading = false;\n                if (error.status == 404) {\n                    toast.showError(\n                        deviceNotFound,\n                        angular.element(\n                            '.claim-form'),\n                        'bottom left');\n                } else if (error.status ==\n                    400) {\n                    toast.showError(\n                        failedClaimDevice,\n                        angular.element(\n                            '.claim-form'),\n                        'bottom left');\n                }\n            }\n        );\n    }\n\n    function reasignar(tokenControl, claimedDeviceId,\n        claimedDeviceName, claimedDeviceSubtype) {\n        //console.log(vm.attributes);\n        servicioHTTP({\n            method: 'POST',\n            url: $location.protocol() + '://' +\n                $location.host() +\n                '/api/v1/' +\n                tokenControl +\n                '/telemetry',\n            data: \"{'accion':'reclamarDispositivo','idEntidad':'\" +\n                claimedDeviceId +\n                \"','nombreEntidad':'\" +\n                claimedDeviceName +\n                \"','subtipoEntidad':'\" +\n                claimedDeviceSubtype + \"'}\"\n        }).\n        success(function(data, status, headers,\n            config) {\n            successClaim();\n            console.log('worked');\n            updateAliasData();\n            $scope.form.editEntityForm\n                .$setPristine();\n            $mdDialog.hide();\n            // ...\n        }).\n        error(function(data, status, headers,\n            config) {\n            console.log('notworked');\n            // ...\n        });\n\n\n        //saveAttributes();\n        //saveRelations();\n        //$scope.editEntityForm.$setPristine();\n    };\n\n    function claimDevice(deviceName, deviceSecret,\n        config) {\n        let deferred = $q.defer();\n        let url = \"/api/customer/device/\" + deviceName +\n            \"/claim\";\n        let obj = deviceSecret ? {\n            secretKey: deviceSecret\n        } : {};\n        $http.post(url, obj, config).then(\n            (payload) => {\n                deferred.resolve(payload.data);\n            },\n            (error) => {\n                deferred.reject(error);\n            }\n        );\n        return deferred.promise;\n    }\n\n    function updateAliasData() {\n        var aliasIds = [];\n        for (var id in self.ctx.aliasController\n                .resolvedAliases) {\n            aliasIds.push(id);\n        }\n        var tasks = [];\n        aliasIds.forEach(function(aliasId) {\n            self.ctx.aliasController\n                .setAliasUnresolved(aliasId);\n            tasks.push(self.ctx.aliasController\n                .getAliasInfo(aliasId));\n        });\n        $q.all(tasks).then(function() {\n            $rootScope.$broadcast(\n                'widgetForceReInit');\n        });\n    }\n\n    function successClaim() {\n        resetForm();\n        $scope.claimDeviceForm.$setPristine();\n        $scope.claimDeviceForm.$setUntouched();\n        $scope.loading = false;\n        toast.showSuccess(successfulClaim, 2000);\n        updateAliasData();\n    }\n\n    function resetForm() {\n        $scope.deviceObj = {};\n    }\n}",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"widgetTitle\": {\n                \"title\": \"Widget title\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"deviceSecret\": {\n                \"title\": \"Show 'Secret key' input field\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"showLabel\": {\n                \"title\": \"Show label\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"deviceLabel\": {\n                \"title\": \"Label for device name\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"requiredErrorDevice\": {\n                \"title\": \"'Device name required' error message\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"secretKeyLabel\": {\n                \"title\": \"Label for secret key\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"requiredErrorSecretKey\": {\n                \"title\": \"'Secret key required' error message\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"labelClaimButon\": {\n                \"title\": \"Label for claiming button\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"successfulClaimDevice\": {\n                \"title\": \"Text message of successful device claiming\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"deviceNotFound\": {\n                \"title\": \"Text message when device not found\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"failedClaimDevice\": {\n                \"title\": \"Text message of failed device claiming\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        [\n            \"widgetTitle\",\n            \"labelClaimButon\",\n            \"deviceSecret\",\n            \"showLabel\",\n            \"deviceLabel\",\n            \"secretKeyLabel\"\n        ],\n        [\n            \"deviceNotFound\",\n            \"failedClaimDevice\",\n            \"successfulClaimDevice\",\n            \"requiredErrorDevice\",\n            \"requiredErrorSecretKey\"\n        ]\n    ],\n    \"groupInfoes\": [{\n        \"formIndex\": 0,\n        \"GroupTitle\": \"General settings\"\n    }, {\n        \"formIndex\": 1,\n        \"GroupTitle\": \"Message settings\"\n    }]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"deviceSecret\":true,\"showLabel\":true},\"title\":\"Device claiming IoTopenTech\",\"dropShadow\":true,\"showTitleIcon\":false,\"titleIcon\":\"more_horiz\",\"iconColor\":\"rgba(0, 0, 0, 0.87)\",\"iconSize\":\"24px\",\"titleTooltip\":\"\",\"enableFullscreen\":false,\"enableDataExport\":true,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      }
    },
    {
      "alias": "downlink_digital",
      "name": "downlink_digital",
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 6,
        "resources": [],
        "templateHtml": "<div style=\"padding-bottom: 1px; color: rgba(0,0,0,0.57);\">\n    El botón <b>Estado actual</b> indica el último estado recibido del pin asociado al puerto del downlink.<br/>\n    Use el deslizador para solicitar un downlink de encendido o apagado.<br/>\n    Tenga en cuenta que el estado del pin cambiará cuando efecivamente el dispositivo reciba el downlink.\n</div>\n    \n<md-radio-group ng-model=\"estadoActual\"><md-radio-button disabled  value=\"true\"> Estado actual: <b><span id=\"estadoActual\">Desconocido</span></b> </md-radio-button></md-radio-group>\n\n<md-switch ng-model=\"isActive\" ng-change=\"enviarDownlink()\">\n  Off/On\n</md-switch>\n",
        "templateCss": "#container {\n    overflow: auto;\n}\n\n.tbDatasource-container {\n    margin: 5px;\n    padding: 8px;\n}\n\n.tbDatasource-title {\n    font-size: 1.200rem;\n    font-weight: 500;\n    padding-bottom: 10px;\n}\n\n.tbDatasource-table {\n    width: 100%;\n    box-shadow: 0 0 10px #ccc;\n    border-collapse: collapse;\n    white-space: nowrap;\n    font-size: 1.000rem;\n    color: #757575;\n}\n\n.tbDatasource-table td {\n    position: relative;\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 0px 18px;\n    box-sizing: border-box;\n}",
        "controllerScript": "self.onInit = function() {\n    var scope = self.ctx.$scope;\n\n    userService = scope.$injector.get('userService');\n    deviceService = scope.$injector.get(\n        'deviceService');\n    servicioHTTP = scope.$injector.get('$http');\n    $location = scope.$injector.get('$location');\n    scope.datasources = self.ctx.defaultSubscription\n        .datasources;\n    scope.data = self.ctx.defaultSubscription.data;\n    scope.primeraActualizacion=true;\n    if (userService.getCurrentUser().authority ==\n        \"CUSTOMER_USER\") {\n        //Obtengo el token del dispositivo SYSTEM\n        deviceService.getCustomerDevices(userService\n            .getCurrentUser().customerId, {\n                \"limit\": 100\n            }, false, {}, 'SYSTEM').then(\n            function(data) {\n                if (data.data.length == 1) {\n                    deviceService\n                        .getDeviceCredentials(\n                            data.data[0].id.id,\n                            true, {}\n                        ).then(\n                            function(response) {\n                                scope\n                                    .tokenControl =\n                                    response\n                                    .credentialsId;\n\n                            });\n                }\n            });\n    }\n    \n    \n    \n    \n    scope.enviarDownlink = function() {\n        /*\n        {\n  \"dev_id\": \"my-dev-id\",    // The device ID\n  \"port\": 1,                // LoRaWAN FPort\n  \"confirmed\": false,       // Whether the downlink should be confirmed by the device\n  \"payload_raw\": \"AQIDBA==\" // Base64 encoded payload: [0x01, 0x02, 0x03, 0x04]\n}\n\n*/\n        var payload = {};\n        payload.port =\n        99; //Cayenne mydevices manda los downlink por el port 99\n        payload.confirmed = true;\n        payload.payload_raw = String.fromCharCode(\n            parseInt(self.ctx\n                .settings.outputChannel));\n        payload.payload_raw += String.fromCharCode(\n            0);\n\n        if (scope.isActive === true) {\n            payload.payload_raw += String\n                .fromCharCode(100);\n        } else {\n            payload.payload_raw += String\n                .fromCharCode(0);\n        }\n        payload.payload_raw += String.fromCharCode(\n            255);\n        payload.payload_raw = btoa(payload\n            .payload_raw);\n        servicioHTTP({\n            method: 'POST',\n            url: $location.protocol() +\n                '://' +\n                $location.host() +\n                '/api/v1/' + scope\n                .tokenControl +\n                '/telemetry',\n            data: \"{'accion':'enviarDownlink','uuid':'\" +\n                self.ctx.$scope.data[0]\n                .datasource.entity.id.id +\n                \"','payload':'\" +\n                JSON.stringify(payload) +\n                \"'}\"\n        }).\n        success(function(data, status, headers,\n            config) {\n            console.log('worked');\n\n            // ...\n        }).\n        error(function(data, status, headers,\n            config) {\n            console.log('notworked');\n            // ...\n        });\n    }\n}\nself.onDataUpdated = function() {\n    var scope = self.ctx.$scope;\n    if(scope.primeraActualizacion===true){\n        //Sólo cambio el estado del deslizador en la primera actualización\n        \n        scope.isActive=scope.data[0].data[0][1]==1?true:false;\n        scope.primeraActualizacion=false;\n    }\n    \n    //console.log(scope.data[0].data[0][1]);\n    if (scope.data[0].data[0][1] == 1) {\n        scope.estadoActual = \"true\";\n        document.getElementById(\"estadoActual\")\n            .innerHTML = \"Activado\";\n        //scope.isActive = true;\n    } else {\n        scope.estadoActual = \"false\";\n        document.getElementById(\"estadoActual\")\n            .innerHTML = \"Desactivado\";\n        //scope.isActive = false;\n    }\n    scope.$digest();\n}",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"outputChannel\": {\n                \"title\": \"LPP digital output channel\",\n                \"type\": \"number\",\n                \"default\": \"1\"\n            },\n            \"required\": []\n        }\n    },\n    \"form\": [\n        \"outputChannel\"\n    ]\n\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"downlink_digital\",\"showTitleIcon\":false,\"titleIcon\":\"more_horiz\",\"iconColor\":\"rgba(0, 0, 0, 0.87)\",\"iconSize\":\"24px\",\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":true,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      }
    }
  ]
}