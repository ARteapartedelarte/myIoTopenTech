{
  "ruleChain": {
    "additionalInfo": null,
    "name": "TTNMAD_DOOR",
    "firstRuleNodeId": null,
    "root": false,
    "debugMode": true,
    "configuration": null
  },
  "metadata": {
    "firstNodeIndex": 49,
    "nodes": [
      {
        "additionalInfo": {
          "layoutX": 1847,
          "layoutY": 1501
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha generado una alarma de tipo \"+metadata.tipoAlarma+\". La temperatura es \"+metadata.Temperatura+\" ºC y el umbral es de \"+metadata.umbralMaximo+\" ºC.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value2\":\"'+metadata.Temperatura+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1293,
          "layoutY": 1495
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "C[r/l]ear",
        "debugMode": false,
        "configuration": {
          "jsScript": "if (metadata.Temperatura> msg.alarma.umbralMaximo) {\n    return ['crear'];\n} else if( metadata.Temperatura < msg.alarma.umbralMaximo - msg.alarma.histeresisMaximo){\n    return ['clear'];\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1583,
          "layoutY": 1546
        },
        "type": "org.thingsboard.rule.engine.action.TbClearAlarmNode",
        "name": "Clear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1588,
          "layoutY": 1598
        },
        "type": "org.thingsboard.rule.engine.action.TbCreateAlarmNode",
        "name": "Crear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;",
          "severity": "CRITICAL",
          "propagate": true,
          "useMessageAlarmData": false,
          "relationTypes": [
            "Contains"
          ]
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1852,
          "layoutY": 1614
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha generado una alarma de tipo \"+metadata.tipoAlarma+\". La temperatura es \"+metadata.Temperatura+\" ºC y el umbral es de \"+metadata.umbralMinimo+\" ºC.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value2\":\"'+metadata.Temperatura+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1847,
          "layoutY": 1553
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha anulado una alarma de tipo \"+metadata.tipoAlarma+\"La temperatura es \"+metadata.Temperatura+\" ºC y el umbral es de \"+metadata.umbralMaximo+\" ºC.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value2\":\"'+metadata.Temperatura+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma anulada\"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};\n\n\n"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1025,
          "layoutY": 1497
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "tipo temperatura maxima superada",
        "debugMode": false,
        "configuration": {
          "jsScript": "var obj = JSON.parse(metadata['ss___alarma_' + metadata\n    .deviceType]);\n\n//Cargamos la alarma en el mensaje para que el nodo siguiente\n//pueda ejecutar la \"lógica de negocio\"\nmsg.alarma = obj.Temperatura;\n\n//Cargamos los datos de interés en los metadatos para construir los mensajes \n//de alarma tras el nodo que genera/borrar la alarma\nmetadata.Temperatura = msg.Temperatura;\n//alarmaActual se usa en la cadena de reglas de Notificaciones\n//Para extraer información. No puede ir por msg porque se\n//pierde en el nodo de generación de alarma\nmetadata.alarmaActual = JSON.stringify(obj.Temperatura);\nmetadata.tipoAlarma =\n\"Temperatura superior al umbral máximo\";\nmetadata.umbralMinimo = msg.alarma.umbralMinimo;\nmetadata.umbralMaximo = msg.alarma.umbralMaximo;\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1583,
          "layoutY": 1485
        },
        "type": "org.thingsboard.rule.engine.action.TbCreateAlarmNode",
        "name": "Crear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;",
          "severity": "CRITICAL",
          "propagate": true,
          "useMessageAlarmData": false,
          "relationTypes": [
            "Contains"
          ]
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1852,
          "layoutY": 1666
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha anulado una alarma de tipo \"+metadata.tipoAlarma+\"La temperatura es \"+metadata.Temperatura+\" ºC y el umbral es de \"+metadata.umbralMinimo+\" ºC.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value2\":\"'+metadata.Temperatura+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma anulada\"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};\n\n\n"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1030,
          "layoutY": 1610
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "tipo temperatura maxima superada",
        "debugMode": false,
        "configuration": {
          "jsScript": "var obj = JSON.parse(metadata['ss___alarma_' + metadata\n    .deviceType]);\n\n//Cargamos la alarma en el mensaje para que el nodo siguiente\n//pueda ejecutar la \"lógica de negocio\"\nmsg.alarma = obj.Temperatura;\n\n//Cargamos los datos de interés en los metadatos para construir los mensajes \n//de alarma tras el nodo que genera/borrar la alarma\nmetadata.Temperatura = msg.Temperatura;\n//alarmaActual se usa en la cadena de reglas de Notificaciones\n//Para extraer información. No puede ir por msg porque se\n//pierde en el nodo de generación de alarma\nmetadata.alarmaActual = JSON.stringify(obj.Temperatura);\nmetadata.tipoAlarma =\n\"Temperatura exterior inferior al umbral mínimo\";\nmetadata.umbralMinimo = msg.alarma.umbralMinimo;\nmetadata.umbralMaximo = msg.alarma.umbralMaximo;\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1298,
          "layoutY": 1608
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "C[r/l]ear",
        "debugMode": false,
        "configuration": {
          "jsScript": "if (metadata.Temperatura< msg.alarma.umbralMinimo) {\n    return ['crear'];\n} else if( metadata.Temperatura > msg.alarma.umbralMinimo + msg.alarma.histeresisMinimo){\n    return ['clear'];\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1588,
          "layoutY": 1659
        },
        "type": "org.thingsboard.rule.engine.action.TbClearAlarmNode",
        "name": "Clear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 417,
          "layoutY": 357
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "es telemetria?",
        "debugMode": true,
        "configuration": {
          "jsScript": "if (msgType == 'POST_TELEMETRY_REQUEST') {\n    if (msg.hasOwnProperty('___ultimoDownlink') && !metadata.hasOwnProperty('delegadosArray') ) {\n        //Realmente sólo puede enviar el downlink el delegador (que no tiene el atributo delegadosArray)... cuando llega una petición de downlink de un delegado, en esta regla se cambia el originador al delegado\n        return ['downlink'];\n     }else if (msg.hasOwnProperty('___ultimoDownlink')) {\n        return ['guardarAtributos'];\n    } else {\n        return ['telemetria'];\n    }\n} else if (msgType == 'INACTIVITY_EVENT' || msgType ==\n    'ACTIVITY_EVENT') {\n    return ['alarma'];\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1900,
          "layoutY": 993
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgTimeseriesNode",
        "name": "save timeseries",
        "debugMode": false,
        "configuration": {
          "defaultTTL": 0
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1027,
          "layoutY": 780
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "esDelegado?",
        "debugMode": false,
        "configuration": {
          "jsScript": "if(metadata.hasOwnProperty('ss_esDelegado')&& metadata.ss_esDelegado==\"true\" ){\n    return ['si'];\n}else{\n    return ['no'];\n}\n"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1839,
          "layoutY": 1241
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": true,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha generado una alarma de tipo \"+metadata.tipoAlarma+\".\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value2\":\"'+metadata.Hall+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1852,
          "layoutY": 1923
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha anulado una alarma de tipo inactividad.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma anulada \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1852,
          "layoutY": 1871
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha generado una alarma de inactividad.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1909,
          "layoutY": 1057
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "tooltip + downlink",
        "debugMode": false,
        "configuration": {
          "jsScript": "// unix timestamp\nvar ts = metadata.ts;\n\n// convert unix timestamp to milliseconds\nvar ts_ms = ts * 1;\n\n// initialize new Date object\nvar date_ob = new Date(ts_ms);\n\n// year as 4 digits (YYYY)\nvar year = date_ob.getFullYear();\n\n// month as 2 digits (MM)\nvar month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);\n\n// date as 2 digits (DD)\nvar date = (\"0\" + date_ob.getDate()).slice(-2);\n\n// hours as 2 digits (hh)\nvar hours = (\"0\" + date_ob.getHours()).slice(-2);\n\n// minutes as 2 digits (mm)\nvar minutes = (\"0\" + date_ob.getMinutes()).slice(-2);\n\n// seconds as 2 digits (ss)\nvar seconds = (\"0\" + date_ob.getSeconds()).slice(-2);\n\n//Inicio de construcción del tooltip\nvar newMsg = {};\nnewMsg.tooltip = \"<b>\" + year + \"-\" + month + \"-\" + date +\n    \" \" + hours + \":\" + minutes + \":\" + seconds +\n    \"</b><br/>\" + \"<b>Hall: </b>\" + (msg\n        .Hall == undefined ? 'No delegado' : (msg\n            .Hall ==\n            1 ? \"Abierta\" : \"Cerrada\")) +\n    \"<br/><b>Temperatura: </b>\" + (msg\n        .Temperatura == undefined ? 'No delegado' : (msg.Temperatura) +\n        \" ºC\") +        \n    \"<br/><b>Batería: </b>\" + (msg\n        .Bateria == undefined ? 'No delegado' : (msg.Bateria) +\n        \" V\") ;\n//Final de construcción del tooltip\nnewMsg.ultimoUplink = msg.ultimoUplink;\nnewMsg.infoDownlink = msg.infoDownlink;\n\nmsgType = \"POST_ATTRIBUTES_REQUEST\";\nreturn {\n    msg: newMsg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1022,
          "layoutY": 1269
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "tipoAlarma",
        "debugMode": true,
        "configuration": {
          "jsScript": "var obj = JSON.parse(metadata['ss___alarma_' + metadata\n    .deviceType]);\n\nmsg.alarma = obj.Hall;\n//Cargo los datos de interés en los metadatos para construir los mensaje de alarma\nmetadata.Hall = msg.Hall;\nmetadata.alarmaActual = JSON.stringify(obj.Hall);\nif (msg.alarma.trigger == 'Abrir' ) {\n    metadata.tipoAlarma = \"Puerta abierta\";\n\n} else if (msg.alarma.trigger == 'Cerrar') {\n    metadata.tipoAlarma = \"Puerta cerrada\";\n}\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1574,
          "layoutY": 1241
        },
        "type": "org.thingsboard.rule.engine.action.TbCreateAlarmNode",
        "name": "Crear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;",
          "severity": "CRITICAL",
          "propagate": true,
          "useMessageAlarmData": false,
          "relationTypes": [
            "Contains"
          ]
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1842,
          "layoutY": 1381
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": true,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha generado una alarma de tipo \"+metadata.tipoAlarma+\". La tensión actual de la batería es \"+metadata.Bat+\" V, y el umbral de alarma es \"+metadata.umbralMinimo+\" V.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value3\":\"'+metadata.Bat+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1577,
          "layoutY": 783
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "msg",
        "debugMode": false,
        "configuration": {
          "jsScript": "var downlinkQueue = JSON.parse(metadata.ss_downlinkQueue);\nif (downlinkQueue.length > 0) {\n    var downlink = downlinkQueue.shift();\n    //La meto en metadata para luego guardarla en los atributos del servidor\n    metadata.ss_downlinkQueue=JSON.stringify(downlinkQueue);\n    var newMsg = {\n        \"meta\": msg.meta,\n        \"params\": {\n            \"counter_down\": msg.params.counter_down,\n            \"payload\": downlink.payload,\n            \"port\": downlink.port,\n            \"queue_if_late\": true\n        },\n        \"type\": \"downlink_response\"\n    };\n    return {\n        msg: newMsg,\n        metadata: metadata,\n        msgType: \"POST_ATTRIBUTES_REQUEST\"\n    };\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 961,
          "layoutY": 1214,
          "description": "He tenido que poner esto porque parece que TB no actualiza el nombre del dispositivo cuando lo cambiamos desde el panel Configuración"
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetOriginatorFieldsNode",
        "name": "name?",
        "debugMode": false,
        "configuration": {
          "fieldsMapping": {
            "name": "deviceName"
          }
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1578,
          "layoutY": 1426
        },
        "type": "org.thingsboard.rule.engine.action.TbClearAlarmNode",
        "name": "Clear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1588,
          "layoutY": 1916
        },
        "type": "org.thingsboard.rule.engine.action.TbClearAlarmNode",
        "name": "Clear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1857,
          "layoutY": 776
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgAttributesNode",
        "name": "guardar",
        "debugMode": false,
        "configuration": {
          "scope": "SHARED_SCOPE"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1543,
          "layoutY": 1055
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "filtrar telemetrias delegado",
        "debugMode": false,
        "configuration": {
          "jsScript": "var newMsg = {};\nif (metadata.hasOwnProperty('delegadoActual') && metadata\n    .delegadoActual.length > 0) {\n    //Es un delegadoActual\n    var delegadoActual = JSON.parse(metadata\n        .delegadoActual).delegaciones;\n    for (var telemetria in msg) {\n        if (delegadoActual.hasOwnProperty(telemetria) &&\n            delegadoActual[telemetria] === true) {\n            newMsg[telemetria] = msg[telemetria];\n        } else {\n            //Si no tiene la delegación o es false\n            if (!metadata.hasOwnProperty(telemetria) ||\n                metadata[telemetria] != \"No delegado\") {\n                newMsg[telemetria] = \"No delegado\";\n            }\n        }\n    }\n\n} else {\n    newMsg = msg;\n}\nreturn {\n    msg: newMsg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 706,
          "layoutY": 972
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "Cargar alarmas",
        "debugMode": false,
        "configuration": {
          "clientAttributeNames": [],
          "sharedAttributeNames": [],
          "serverAttributeNames": [
            "__alarma_${deviceType}"
          ],
          "latestTsKeyNames": [],
          "tellFailureIfAbsent": true,
          "getLatestValueWithTs": false
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1380,
          "layoutY": 490
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "eliminar ___ultimoDownlink",
        "debugMode": false,
        "configuration": {
          "jsScript": "var ultimoDownlink = msg.___ultimoDownlink;\nif (metadata.hasOwnProperty(\"ss____atributosCompartidos\")) {\n    var atributosCompartidos = JSON.parse(metadata\n        .ss____atributosCompartidos);\n    //Si el atributo compartido tuviese como valor un JSON, habría que tratarlo\n    //Los números, llegan como cadenas\n    if(isNaN(metadata\n        .valorAtributoCompartido)){\n    atributosCompartidos[ultimoDownlink] = metadata\n        .valorAtributoCompartido;\n        }else{\n            atributosCompartidos[ultimoDownlink] = parseFloat(metadata\n        .valorAtributoCompartido);\n        }\n} else {\n    var atributosCompartidos = {};\n    atributosCompartidos[ultimoDownlink] = metadata\n        .valorAtributoCompartido;\n}\n\nreturn {\n    msg: {\n        '___atributosCompartidos': atributosCompartidos\n    },\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1681,
          "layoutY": 488
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgAttributesNode",
        "name": "guardarAtributo",
        "debugMode": false,
        "configuration": {
          "scope": "SERVER_SCOPE"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1101,
          "layoutY": 490,
          "description": "En realidad aquí sólo llegarían los atributos compartidos de tipo ___. Los de tipo __ se almacenan el la regla configurarEntidad."
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "POST_ATTRIBUTES_REQUEST",
        "debugMode": false,
        "configuration": {
          "jsScript": "return {msg: msg, metadata: metadata, msgType: \"POST_ATTRIBUTES_REQUEST\"};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 756,
          "layoutY": 488
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "___atributosCompartidos",
        "debugMode": false,
        "configuration": {
          "clientAttributeNames": [],
          "sharedAttributeNames": [],
          "serverAttributeNames": [
            "___atributosCompartidos"
          ],
          "latestTsKeyNames": [],
          "tellFailureIfAbsent": false,
          "getLatestValueWithTs": false
        }
      },
      {
        "additionalInfo": {
          "layoutX": 406,
          "layoutY": 1256
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "Alarmas",
        "debugMode": true,
        "configuration": {
          "jsScript": "var respuesta = [];\nif (metadata.hasOwnProperty('ss___alarma_'+metadata.deviceType)) {\n    var obj = JSON.parse(metadata['ss___alarma_'+metadata.deviceType]);\n    \n    if (obj.hasOwnProperty('Hall')&&msg.hasOwnProperty('Hall')&&obj.Hall.enable===true) {\n        respuesta.push('Hall');\n    }\n    if (obj.hasOwnProperty('Temperatura')&&msg.hasOwnProperty('Temperatura')&&obj.Temperatura.enable===true) {\n        respuesta.push('Temperatura');\n    }\n    if (obj.hasOwnProperty('Bateria')&&msg.hasOwnProperty('Bateria')&&obj.Bateria.enable===true) {\n        respuesta.push('Bateria');\n    }\n    \n    if (obj.hasOwnProperty('inactividad')&&(msgType=='INACTIVITY_EVENT'||msgType=='ACTIVITY_EVENT')&&obj.inactividad.enable===true) {\n        \n        respuesta.push('inactividad');\n    }\n}\n\nreturn respuesta;\n\n\n"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1842,
          "layoutY": 1433
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha anulado una alarma de tipo \"+metadata.tipoAlarma+\". La tensión actual de la batería es \"+metadata.Bat+\" V, y el umbral de alarma es \"+metadata.umbralMinimo+\" V.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value3\":\"'+metadata.Bat+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma anulada \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1300,
          "layoutY": 1835
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "C[r/l]ear",
        "debugMode": false,
        "configuration": {
          "jsScript": "if (msgType=='INACTIVITY_EVENT') {\n    return ['crear'];\n} else{\n    return ['clear'];\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1033,
          "layoutY": 1838
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "tipoAlarma",
        "debugMode": false,
        "configuration": {
          "jsScript": "var obj = JSON.parse(metadata['ss___alarma_' + metadata\n    .deviceType]);\n\n\nmetadata.alarmaActual = JSON.stringify(obj.inactividad);\nmetadata.tipoAlarma = \"Inactividad\";\n\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 2220,
          "layoutY": 1067
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgAttributesNode",
        "name": "guardar",
        "debugMode": false,
        "configuration": {
          "scope": "SERVER_SCOPE"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1143,
          "layoutY": 883
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "CS2TTN",
        "debugMode": false,
        "configuration": {
          "jsScript": "var newMsg = {};\nnewMsg.app_id = msg.applicationName;\nnewMsg.dev_id = msg.deviceName;\n\nnewMsg.hardware_serial = msg.devEUI;\nnewMsg.adr = msg.adr;\nnewMsg.counter = msg.fCnt;\nnewMsg.port = msg.fPort;\nnewMsg.payload_raw = msg.data;\nvar newPayloadFields = msg.object;\n//Desafortunadamente el Cayenne Codec de CS es muy diferente al de TTN\n//No obstante, lo utilizaré porque aquí se hace una vez, pero si hubiera que\n//hacerlo en CS implicaría actuar sobre cada aplicación\n//\"object\": \"{\\\"analogInput\\\":{\\\"1\\\":2.74},\\\"digitalInput\\\":{\\\"2\\\":1,\\\"3\\\":0}}\"\n//\"payload_fields\": \"{\\\"analog_in_1\\\":2.75,\\\"digital_in_2\\\":1,\\\"digital_in_3\\\":0}\"\n/*\nnewMsg.payload_fields = {};\nfor (var key in newPayloadFields) {\n    var prefijo = \"\";\n    switch (key) {\n        case 'analogInput':\n            prefijo = 'analog_in_';\n            break;\n        case 'digitalInput':\n            prefijo = 'digital_in_';\n            break;\n        case 'temperatureSensor':\n            prefijo = 'temperature_';\n            break;\n        case 'humiditySensor':\n            prefijo = 'relative_humidity_';\n            break;\n        case 'accelerometer':\n            prefijo = 'accelerometer_';\n            break;\n        case 'barometer':\n            prefijo = 'barometric_pressure_';\n            break;\n        case 'gyrometer':\n            prefijo = 'gyrometer_';\n            break;\n        case 'gpsLocation':\n            prefijo = 'gps_';\n            break;\n        case 'digitalOutput':\n            prefijo = 'digital_out_';\n            break;\n        case 'analogOutput':\n            prefijo = 'analog_out_';\n            break;\n        case 'illuminanceSensor':\n            prefijo = 'luminosity_';\n            break;\n        case 'presenceSensor':\n            prefijo = 'presence_';\n            break;\n\n    }\n    for (var key2 in newPayloadFields[key]) {\n        newMsg.payload_fields[prefijo + key2] =\n            newPayloadFields[key][key2];\n    }\n}\n*/\nnewMsg.metadata = {\n    'rxInfo': msg.rxInfo,\n    'txInfo': msg.txInfo\n};\n//Con el marshaller JSON nuevo de CS parece que envía la propiedad objectJSON\n//incluso aunque no se haya elegido un Codec\n//Por eso la utilizo para intentar saber si se está usando el nuevo JSON o el legacy\nif(msg.hasOwnProperty('objectJSON')){\nnewMsg.ultimoUplink = \"CS_new\";\n}else{\n    newMsg.ultimoUplink = \"CS\";\n}\nnewMsg.infoDownlink = {\"hardware_serial\":newMsg.hardware_serial};\nreturn {\n    msg: newMsg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1840,
          "layoutY": 1304
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": true,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha anulado la alarma de tipo \"+metadata.tipoAlarma+\".\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value2\":\"'+metadata.Hall+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma anulada \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1578,
          "layoutY": 1365
        },
        "type": "org.thingsboard.rule.engine.action.TbCreateAlarmNode",
        "name": "Crear alarma",
        "debugMode": true,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;",
          "severity": "CRITICAL",
          "propagate": true,
          "useMessageAlarmData": false,
          "relationTypes": [
            "Contains"
          ]
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1574,
          "layoutY": 1302
        },
        "type": "org.thingsboard.rule.engine.action.TbClearAlarmNode",
        "name": "Clear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1281,
          "layoutY": 1268
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "C[r/l]ear",
        "debugMode": true,
        "configuration": {
          "jsScript": "if(msg.alarma.trigger=='Abrir'||msg.alarma.trigger=='Ambos'){\n    if(msg.Hall==1){\n        return ['crear'];\n    }else{\n        return ['clear'];\n    }\n}else if(msg.alarma.trigger=='Cerrar'||msg.alarma.trigger=='Ambos'){\n    if(msg.Hall===0){\n        return ['crear'];\n    }else{\n        return ['clear'];\n    }\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1308,
          "layoutY": 782
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "downlinkQueue",
        "debugMode": false,
        "configuration": {
          "clientAttributeNames": [],
          "sharedAttributeNames": [],
          "serverAttributeNames": [
            "downlinkQueue"
          ],
          "latestTsKeyNames": [],
          "tellFailureIfAbsent": true,
          "getLatestValueWithTs": false
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1588,
          "layoutY": 1855
        },
        "type": "org.thingsboard.rule.engine.action.TbCreateAlarmNode",
        "name": "Crear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;",
          "severity": "CRITICAL",
          "propagate": true,
          "useMessageAlarmData": false,
          "relationTypes": [
            "Contains"
          ]
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1026,
          "layoutY": 1393
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "tipoAlarma",
        "debugMode": true,
        "configuration": {
          "jsScript": "var obj = JSON.parse(metadata['ss___alarma_' + metadata\n    .deviceType]);\n\n\nmsg.alarma = obj.Bateria;\n//Cargo los datos de interés en los metadatos para construir los mensaje de alarma\nmetadata.Bat = msg.Bat;\nmetadata.alarmaActual = JSON.stringify(obj.Bateria);\nmetadata.tipoAlarma = \"Nivel bajo de batería\";\nmetadata.umbralMinimo = msg.alarma.umbralMinimo;\nmetadata.histeresisMinimo = msg.alarma.histeresisMinimo;\n\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 944,
          "layoutY": 910
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Everynet2TTN",
        "debugMode": false,
        "configuration": {
          "jsScript": "var b64array =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\nfunction decode64(input) {\n\n    var output = \"\";\n    var hex = \"\";\n    var chr1, chr2, chr3 = \"\";\n    var enc1, enc2, enc3, enc4 = \"\";\n    var i = 0;\n\n    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n    do {\n        enc1 = b64array.indexOf(input.charAt(i++));\n        enc2 = b64array.indexOf(input.charAt(i++));\n        enc3 = b64array.indexOf(input.charAt(i++));\n        enc4 = b64array.indexOf(input.charAt(i++));\n\n        chr1 = (enc1 << 2) | (enc2 >> 4);\n        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n        chr3 = ((enc3 & 3) << 6) | enc4;\n\n        output = output + String.fromCharCode(chr1);\n\n        if (enc3 != 64) {\n            output = output + String.fromCharCode(chr2);\n        }\n        if (enc4 != 64) {\n            output = output + String.fromCharCode(chr3);\n        }\n\n        chr1 = chr2 = chr3 = \"\";\n        enc1 = enc2 = enc3 = enc4 = \"\";\n\n    } while (i < input.length);\n\n    return unescape(output);\n\n}\n\nfunction encodeHex(input) {\n    var hex = \"\";\n\n    for (i = 0; i < input.length; i++)\n        hex += ('00' + input.charCodeAt(i).toString(16))\n        .slice(-2);\n\n    return hex;\n}\n\n//Sólo gestiono los uplinks no duplicados\nif (msg.params.duplicate === false) {\n\n    /*FORMATO EVERYNET ABP\n    {\n    \"type\": \"uplink\",\n    \"meta\": {\n        \"network\": \"f2108cf9ef0647b291e07e708b8f1812\",\n        \"packet_hash\": \"7a0a3591f78ca5170d189fc13df2be39\",\n        \"application\": \"70b3d57ed0024fa9\",\n        \"device_addr\": \"2601128e\",\n        \"time\": 1592045398.914028883,\n        \"device\": \"00098698e0267d50\",\n        \"packet_id\": \"a5bc7e3592c5eb4b581915cbe8e62545\",\n        \"gateway\": \"b0fd0b70063c0000\"\n    },\n    \"params\": {\n        \"rx_time\": 1592045398.8111801147,\n        \"port\": 1,\n        \"duplicate\": false,\n        \"counter_up\": 0,\n        \"payload\": \"AQIA8QIAAANnAPYEcyTIBWh1BgEA\",\n        \"encrypted_payload\": \"rxcVFaaTAWU4bM4ys885QgCRQXec\"\n    }\n}\n*/\n    /*FORMATO TTN\n    {\n    \"app_id\": \"iotopentech\",\n    \"dev_id\": \"iotopentech03\",\n    \"hardware_serial\": \"005640FFD76F9212\",\n    \"port\": 1,\n    \"counter\": 31092,\n    \"payload_raw\": \"AWYAAgEAA2hWBAIBVAVnAOsGcyTwBwIAAA\\u003d\\u003d\",\n    \"payload_fields\": {\n        \"analog_in_4\": 3.4,\n        \"analog_in_7\": 0,\n        \"barometric_pressure_6\": 945.6,\n        \"digital_out_2\": 0,\n        \"presence_1\": 0,\n        \"relative_humidity_3\": 43,\n        \"temperature_5\": 23.5\n    },\n    \"metadata\": {\n        \"time\": \"2020-06-13T11:25:49.770303106Z\",\n        \"frequency\": 868.5,\n        \"modulation\": \"LORA\",\n        \"data_rate\": \"SF7BW125\",\n        \"coding_rate\": \"4/5\",\n        \"gateways\": [{\n            \"gtw_id\": \"eui-3234333629005e00\",\n            \"timestamp\": 3734173416,\n            \"time\": \"\",\n            \"channel\": 2,\n            \"rssi\": -87,\n            \"snr\": 4,\n            \"rf_chain\": 0\n        }]\n    },\n    \"downlink_url\": \"https://integrations.thethingsnetwork.org/ttn-eu/api/v2/down/iotopentech/myiotopentech_integration?key\\u003dttn-account-v2.hLI6TVUdL4uPkXgUECKvvnDlLm2nvlSSj24ciHOth_Q\"\n}\n*/\n\n\n    var newMsg = {};\n    newMsg.app_id = msg.meta.application;\n    newMsg.dev_id = msg.meta.device_addr;\n    newMsg.hardware_serial = msg.meta.device;\n    newMsg.counter = msg.params.counter_up;\n    newMsg.port = msg.params.port;\n    //newMsg.payload_raw = encodeHex(decode64(msg.params.payload));\n    newMsg.payload_raw = msg.params\n        .payload;\n    /*\n    var comodin_payload_raw = newMsg.payload_raw;\n    //Creo el decodificador LPP\n    newMsg.payload_fields = {};\n\n    while (comodin_payload_raw.length > 4) {\n        switch (comodin_payload_raw.substring(2, 4)) {\n            case \"00\":\n                newMsg.payload_fields['digital_in_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 6),\n                        16);\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(6);\n                break;\n            case \"01\":\n                newMsg.payload_fields['digital_out_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 6),\n                        16);\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(6);\n                break;\n            case \"02\":\n                newMsg.payload_fields['analog_in_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 8),\n                        16) / 100.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(8);\n                break;\n            case \"03\":\n                newMsg.payload_fields['analog_out_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 8),\n                        16) / 100.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(8);\n                break;\n            case \"65\":\n                newMsg.payload_fields['luminosity_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 8),\n                        16);\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(8);\n                break;\n            case \"65\":\n                newMsg.payload_fields['presence_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 6),\n                        16);\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(6);\n                break;\n            case \"67\":\n                newMsg.payload_fields['temperature_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 8),\n                        16) / 10.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(8);\n                break;\n            case \"68\":\n                newMsg.payload_fields['relative_humidity_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 6),\n                        16) / 2.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(6);\n                break;\n            case \"73\":\n                newMsg.payload_fields[\n                        'barometric_pressure_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 8),\n                        16) / 10.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(8);\n                break;\n            case \"71\":\n                newMsg.payload_fields['accelerometer_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)].x =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 8),\n                        16) / 1000.0;\n                newMsg.payload_fields['accelerometer_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)].y =\n                    parseInt(\n                        comodin_payload_raw.substring(8,\n                            12),\n                        16) / 1000.0;\n                newMsg.payload_fields['accelerometer_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)].z =\n                    parseInt(\n                        comodin_payload_raw.substring(12,\n                            16),\n                        16) / 1000.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(16);\n                break;\n            case \"86\":\n                newMsg.payload_fields['gyrometer_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)].x =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 8),\n                        16) / 100.0;\n                newMsg.payload_fields['gyrometer_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)].y =\n                    parseInt(\n                        comodin_payload_raw.substring(8,\n                            12),\n                        16) / 100.0;\n                newMsg.payload_fields['gyrometer_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)].z =\n                    parseInt(\n                        comodin_payload_raw.substring(12,\n                            16),\n                        16) / 100.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(16);\n                break;\n            case \"88\":\n                newMsg.payload_fields['gps_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)]\n                    .latitude =\n                    parseInt(\n                        comodin_payload_raw.substring(4,\n                        10),\n                        16) / 10000.0;\n                newMsg.payload_fields['gps_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)]\n                    .longitude =\n                    parseInt(\n                        comodin_payload_raw.substring(10,\n                            16),\n                        16) / 10000.0;\n                newMsg.payload_fields['gps_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)]\n                    .altitude =\n                    parseInt(\n                        comodin_payload_raw.substring(16,\n                            22),\n                        16) / 100.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(22);\n                break;\n        }\n    }\n*/\n\n    newMsg.metadata = {\n        'gateway': msg.meta.gateway,\n        'network': msg.meta.network\n    };\n\n    newMsg.ultimoUplink = \"Everynet\";\n    newMsg.infoDownlink = {};\n    return {\n        msg: newMsg,\n        metadata: metadata,\n        msgType: msgType\n    };\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 965,
          "layoutY": 1065
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "RAW2JSON",
        "debugMode": true,
        "configuration": {
          "jsScript": "var b64array =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\nfunction decode64(input) {\n\n    var output = \"\";\n    var hex = \"\";\n    var chr1, chr2, chr3 = \"\";\n    var enc1, enc2, enc3, enc4 = \"\";\n    var i = 0;\n\n    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n    do {\n        enc1 = b64array.indexOf(input.charAt(i++));\n        enc2 = b64array.indexOf(input.charAt(i++));\n        enc3 = b64array.indexOf(input.charAt(i++));\n        enc4 = b64array.indexOf(input.charAt(i++));\n\n        chr1 = (enc1 << 2) | (enc2 >> 4);\n        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n        chr3 = ((enc3 & 3) << 6) | enc4;\n\n        output = output + String.fromCharCode(chr1);\n\n        if (enc3 != 64) {\n            output = output + String.fromCharCode(chr2);\n        }\n        if (enc4 != 64) {\n            output = output + String.fromCharCode(chr3);\n        }\n\n        chr1 = chr2 = chr3 = \"\";\n        enc1 = enc2 = enc3 = enc4 = \"\";\n\n    } while (i < input.length);\n\n    return unescape(output);\n\n}\n\nfunction encodeHex(input) {\n    var hex = \"\";\n\n    for (i = 0; i < input.length; i++)\n        hex += ('00' + input.charCodeAt(i).toString(16))\n        .slice(-2);\n\n    return hex;\n}\nvar newMsg = {};\nnewMsg.app_id = msg.app_id;\nnewMsg.dev_id = msg.dev_id;\n\nif (msg.hasOwnProperty('ultimoUplink') && msg\n    .ultimoUplink == 'CS_new') {\n    newMsg.hardware_serial = encodeHex(decode64(msg\n        .hardware_serial));\n    msg.infoDownlink.hardware_serial = encodeHex(decode64(\n        msg.infoDownlink.hardware_serial));\n    msg.ultimoUplink = \"CS\";\n} else {\n    newMsg.hardware_serial = msg.hardware_serial;\n}\n\nnewMsg.counter = msg.counter;\nnewMsg.port = msg.port;\nnewMsg.metadata = msg.metadata;\nnewMsg.payload_raw = encodeHex(decode64(msg.payload_raw));\n\n//Inicio de la conversión de la carga de pago RAW en telemetrías\n//El RAK7204 usa LPP\n//Ejemplo\n//0802016c07686906732657026700d804020591\nvar comodin_payload_raw = newMsg.payload_raw;\n//Creo el decodificador LPP\nvar payload_fields = {};\nwhile (comodin_payload_raw.length > 4) {\n    switch (comodin_payload_raw.substring(2, 4)) {\n        case \"00\":\n            payload_fields['digital_in_' +\n                    parseInt(comodin_payload_raw\n                        .substring(0, 2), 16)] =\n                parseInt(\n                    comodin_payload_raw.substring(4, 6),\n                    16);\n            comodin_payload_raw = comodin_payload_raw\n                .substring(6);\n            break;\n        case \"01\":\n            payload_fields['digital_out_' +\n                    parseInt(comodin_payload_raw\n                        .substring(0, 2), 16)] =\n                parseInt(\n                    comodin_payload_raw.substring(4, 6),\n                    16);\n            comodin_payload_raw = comodin_payload_raw\n                .substring(6);\n            break;\n        case \"02\":\n\n\n            valor = parseInt(\n                comodin_payload_raw.substring(4,\n                    8),\n                16);\n\n            if ((valor & 0x8000) > 0) {\n                payload_fields['analog_in_' + parseInt(\n                    comodin_payload_raw.substring(0,\n                        2), 16)] = ((valor & 0x7FFF) -\n                    0x8000) / 100.0;\n            } else {\n                payload_fields['analog_in_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] = valor /\n                    100.0;\n\n            }\n\n\n\n            comodin_payload_raw = comodin_payload_raw\n                .substring(8);\n            break;\n        case \"03\":\n            payload_fields['analog_out_' +\n                    parseInt(comodin_payload_raw\n                        .substring(0, 2), 16)] =\n                parseInt(\n                    comodin_payload_raw.substring(4, 8),\n                    16) / 100.0;\n            comodin_payload_raw = comodin_payload_raw\n                .substring(8);\n            break;\n        case \"65\":\n            payload_fields['luminosity_' +\n                    parseInt(comodin_payload_raw\n                        .substring(0, 2), 16)] =\n                parseInt(\n                    comodin_payload_raw.substring(4, 8),\n                    16);\n            comodin_payload_raw = comodin_payload_raw\n                .substring(8);\n            break;\n        case \"66\":\n            payload_fields['presence_' +\n                    parseInt(comodin_payload_raw\n                        .substring(0, 2), 16)] =\n                parseInt(\n                    comodin_payload_raw.substring(4, 6),\n                    16);\n            comodin_payload_raw = comodin_payload_raw\n                .substring(6);\n            break;\n        case \"67\":\n            \n            valor = parseInt(\n                comodin_payload_raw.substring(4,\n                    8),\n                16);\n\n            if ((valor & 0x8000) > 0) {\n                payload_fields['temperature_' + parseInt(\n                    comodin_payload_raw.substring(0,\n                        2), 16)] = ((valor & 0x7FFF) -\n                    0x8000) / 10.0;\n            } else {\n                payload_fields['temperature_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] = valor /\n                    10.0;\n\n            }\n            \n            \n            comodin_payload_raw = comodin_payload_raw\n                .substring(8);\n            break;\n        case \"68\":\n            payload_fields['relative_humidity_' +\n                    parseInt(comodin_payload_raw\n                        .substring(0, 2), 16)] =\n                parseInt(\n                    comodin_payload_raw.substring(4, 6),\n                    16) / 2.0;\n            comodin_payload_raw = comodin_payload_raw\n                .substring(6);\n            break;\n        case \"73\":\n            payload_fields[\n                    'barometric_pressure_' +\n                    parseInt(comodin_payload_raw\n                        .substring(0, 2), 16)] =\n                parseInt(\n                    comodin_payload_raw.substring(4, 8),\n                    16) / 10.0;\n            comodin_payload_raw = comodin_payload_raw\n                .substring(8);\n            break;\n        case \"71\":\n            var valor;\n            var campo = 'accelerometer_' +\n                parseInt(comodin_payload_raw\n                    .substring(0, 2), 16);\n\n            payload_fields[campo] = {};\n\n            valor = parseInt(\n                comodin_payload_raw.substring(4,\n                    8),\n                16);\n\n            if ((valor & 0x8000) > 0) {\n                payload_fields[campo]\n                    .x =\n                    ((valor & 0x7FFF) - 0x8000) / 1000.0;\n            } else {\n                payload_fields[campo]\n                    .x =\n                    valor / 1000.0;\n\n            }\n\n\n\n\n            valor = parseInt(\n                comodin_payload_raw.substring(8,\n                    12),\n                16);\n\n\n            if ((valor & 0x8000) > 0) {\n                payload_fields[campo]\n                    .y =\n                    ((valor & 0x7FFF) - 0x8000) / 1000.0;\n            } else {\n                payload_fields[campo]\n                    .y =\n                    valor / 1000.0;\n\n            }\n\n\n\n            valor = parseInt(\n                comodin_payload_raw.substring(12,\n                    16),\n                16);\n\n\n            if ((valor & 0x8000) > 0) {\n                payload_fields[campo]\n                    .z =\n                    ((valor & 0x7FFF) - 0x8000) / 1000.0;\n            } else {\n                payload_fields[campo]\n                    .z =\n                    valor / 1000.0;\n\n            }\n\n\n            comodin_payload_raw = comodin_payload_raw\n                .substring(16);\n            break;\n        case \"86\":\n            var valor;\n            var campo = 'gyrometer_' +\n                parseInt(comodin_payload_raw\n                    .substring(0, 2), 16);\n\n            payload_fields[campo] = {};\n            valor = parseInt(\n                comodin_payload_raw.substring(4,\n                    8),\n                16);\n\n\n            if ((valor & 0x8000) > 0) {\n                payload_fields[campo]\n                    .x =\n                    ((valor & 0x7FFF) - 0x8000) / 100.0;\n\n            } else {\n                payload_fields[campo]\n                    .x =\n                    valor / 100.0;\n            }\n\n\n            valor = parseInt(\n                comodin_payload_raw.substring(8,\n                    12),\n                16);\n\n\n            if ((valor & 0x8000) > 0) {\n                payload_fields[campo]\n                    .y =\n                    ((valor & 0x7FFF) - 0x8000) / 100.0;\n            } else {\n                payload_fields[campo]\n                    .y =\n                    valor / 100.0;\n\n            }\n\n\n\n            valor = parseInt(\n                comodin_payload_raw.substring(12,\n                    16),\n                16);\n\n\n            if ((valor & 0x8000) > 0) {\n                payload_fields[campo]\n                    .z =\n                    ((valor & 0x7FFF) - 0x8000) / 100.0;\n            } else {\n                payload_fields[campo]\n                    .z =\n                    valor / 100.0;\n\n            }\n\n\n\n\n            comodin_payload_raw = comodin_payload_raw\n                .substring(16);\n            break;\n        case \"88\":\n            var valor;\n            var campo = 'gps_' +\n                parseInt(comodin_payload_raw\n                    .substring(0, 2), 16);\n\n            payload_fields[campo] = {};\n            valor = parseInt(\n                comodin_payload_raw.substring(4,\n                    10),\n                16);\n\n            if ((valor & 0x800000) > 0) {\n                payload_fields[campo]\n                    .latitude = (\n                        valor - 0x1000000) / 10000.0;\n\n            } else {\n                payload_fields[campo]\n                    .latitude =\n                    valor / 10000.0;\n            }\n\n            valor = parseInt(\n                comodin_payload_raw.substring(10,\n                    16),\n                16);\n            if ((valor & 0x800000) > 0) {\n                payload_fields[campo]\n                    .longitude = (\n                        valor - 0x1000000) / 10000.0;\n            } else {\n                payload_fields[campo]\n                    .longitude =\n                    valor / 10000.0;\n\n            }\n\n            valor = parseInt(\n                comodin_payload_raw.substring(16,\n                    22),\n                16);\n            if ((valor & 0x800000) > 0) {\n                payload_fields[campo]\n                    .longitude = (\n                        valor - 0x1000000) / 100.0;\n            } else {\n                payload_fields[campo]\n                    .altitude =\n                    valor / 100.0;\n\n\n            }\n            comodin_payload_raw = comodin_payload_raw\n                .substring(22);\n            break;\n    }\n}\n\n\nif (payload_fields.hasOwnProperty(\n    'analog_in_1')) {\n    newMsg.Bateria = payload_fields\n        .analog_in_1;\n\n}\nif (payload_fields.hasOwnProperty('digital_in_2')) {\n    newMsg.Hall = payload_fields\n        .digital_in_2;\n\n}\nif (payload_fields.hasOwnProperty('temperature_3')) {\n    newMsg.Temperatura = payload_fields.temperature_3;\n\n}\n\n\n//Final de la conversión de la carga de pago RAW en telemetrías\n\n\nif (!msg.hasOwnProperty('ultimoUplink')) {\n    newMsg.ultimoUplink = \"TTN\";\n    newMsg.infoDownlink = {\n        \"downlink_url\": msg.downlink_url,\n        \"ttn_dev_id\": msg.dev_id\n    };\n} else {\n    newMsg.ultimoUplink = msg.ultimoUplink;\n    newMsg.infoDownlink = msg.infoDownlink;\n}\n\nreturn {\n    msg: newMsg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 2450,
          "layoutY": 780
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgAttributesNode",
        "name": "guardar",
        "debugMode": false,
        "configuration": {
          "scope": "SERVER_SCOPE"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 382,
          "layoutY": 259
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "esDelegado/delegacion",
        "debugMode": false,
        "configuration": {
          "clientAttributeNames": [],
          "sharedAttributeNames": [],
          "serverAttributeNames": [
            "esDelegado",
            "delegacion"
          ],
          "latestTsKeyNames": [],
          "tellFailureIfAbsent": false,
          "getLatestValueWithTs": false
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1285,
          "layoutY": 1392
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "C[r/l]ear",
        "debugMode": true,
        "configuration": {
          "jsScript": "if (msg.alarma.umbralMinimo > msg.Bat) {\n    return ['crear'];\n} else{\n    return ['clear'];\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 2139,
          "layoutY": 778
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "msg",
        "debugMode": false,
        "configuration": {
          "jsScript": "\n    return {\n        msg: {\"downlinkQueue\":JSON.parse(metadata.ss_downlinkQueue)},\n        metadata: metadata,\n        msgType: \"POST_ATTRIBUTES_REQUEST\"\n    };\n"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 728,
          "layoutY": 833
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "TTN/CS/Everynet?",
        "debugMode": false,
        "configuration": {
          "jsScript": "if (msg.hasOwnProperty('type') && msg.type == \"uplink\") {\r\n    return ['everynetUplink'];\r\n} else if (msg.hasOwnProperty('type') && msg.type ==\r\n    \"downlink_request\") {\r\n    return ['everynetDownlink'];\r\n} else if (msg.hasOwnProperty('payload_raw') &&\r\n    msg.hasOwnProperty('metadata') &&\r\n    msg.hasOwnProperty('dev_id')) {\r\n    return ['TTN'];\r\n} else if (msg.hasOwnProperty('data') &&\r\n    msg.hasOwnProperty('rxInfo') &&\r\n    msg.hasOwnProperty('txInfo') &&\r\n    msg.hasOwnProperty('deviceName')) {\r\n    return ['CS'];\r\n} else if (msg.hasOwnProperty('___ultimoDownlink') &&\r\n    msg.___ultimoDownlink !== '') {\r\n    return ['downlink'];\r\n}\r\n\r\n/*El formato de CS con el nuevo JSON marshaller\r\n{\r\n    \"applicationID\": 6,\r\n    \"applicationName\": \"LDS02\",\r\n    \"deviceName\": \"LDS01\",\r\n    \"devEUI\": \"qEBBAAGB+X8=\",\r\n    \"rxInfo\": [{\r\n        \"gatewayID\": \"uCfr//6my+4=\",\r\n        \"rssi\": -73,\r\n        \"loRaSNR\": 7,\r\n        \"channel\": 2,\r\n        \"rfChain\": 1,\r\n        \"board\": 0,\r\n        \"antenna\": 0,\r\n        \"location\": {\r\n            \"latitude\": 0,\r\n            \"longitude\": 0,\r\n            \"altitude\": 0,\r\n            \"source\": \"UNKNOWN\",\r\n            \"accuracy\": 0\r\n        },\r\n        \"fineTimestampType\": \"NONE\",\r\n        \"context\": \"WAixqw==\",\r\n        \"uplinkID\": \"yNrsc7btS8CljKLG9TiySw==\",\r\n        \"crcStatus\": \"CRC_OK\"\r\n    }],\r\n    \"txInfo\": {\r\n        \"frequency\": 868500000,\r\n        \"modulation\": \"LORA\",\r\n        \"loRaModulationInfo\": {\r\n            \"bandwidth\": 125,\r\n            \"spreadingFactor\": 7,\r\n            \"codeRate\": \"4/5\",\r\n            \"polarizationInversion\": false\r\n        }\r\n    },\r\n    \"adr\": true,\r\n    \"dr\": 5,\r\n    \"fCnt\": 11,\r\n    \"fPort\": 10,\r\n    \"data\": \"CyIBAAAFAAAB\",\r\n    \"objectJSON\": \"{\\\"BAT_V\\\":2.85,\\\"DOOR_OPEN_STATUS\\\":0,\\\"DOOR_OPEN_TIMES\\\":5,\\\"LAST_DOOR_OPEN_DURATION\\\":1,\\\"MOD\\\":\\\"Door sensor\\\"}\",\r\n    \"tags\": {},\r\n    \"confirmedUplink\": false,\r\n    \"devAddr\": \"ASVKiQ==\"\r\n}\r\n*/\r\n\r\n/*El formato legacy json de CS\r\n{\r\n    \"applicationID\": 6,\r\n    \"applicationName\": \"LDS02\",\r\n    \"deviceName\": \"LDS01\",\r\n    \"devEUI\": \"a84041000181f97f\",\r\n    \"rxInfo\": [{\r\n        \"gatewayID\": \"b827ebfffea6cbee\",\r\n        \"uplinkID\": \"37f815f5-e49f-42fe-b379-ff8c38c0d2e9\",\r\n        \"name\": \"jfmateos_rak831\",\r\n        \"rssi\": -75,\r\n        \"loRaSNR\": 7.25,\r\n        \"location\": {\r\n            \"latitude\": 0,\r\n            \"longitude\": 0,\r\n            \"altitude\": 0\r\n        }\r\n    }],\r\n    \"txInfo\": {\r\n        \"frequency\": 868500000,\r\n        \"dr\": 5\r\n    },\r\n    \"adr\": true,\r\n    \"fCnt\": 14,\r\n    \"fPort\": 10,\r\n    \"data\": \"iygBAAAHAAAA\",\r\n    \"object\": {\r\n        \"BAT_V\": 2.856,\r\n        \"DOOR_OPEN_STATUS\": 1,\r\n        \"DOOR_OPEN_TIMES\": 7,\r\n        \"LAST_DOOR_OPEN_DURATION\": 0,\r\n        \"MOD\": \"Door sensor\"\r\n    }\r\n}*/"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1246,
          "layoutY": 1060,
          "description": "Si la telemetría anterior ya era -1 y el delegado no tiene autorizada esa telemetría, no vuelvo a actualizarla con -1"
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetTelemetryNode",
        "name": "anteriorTelemetria",
        "debugMode": false,
        "configuration": {
          "startInterval": 60,
          "endInterval": 1,
          "startIntervalPattern": "",
          "endIntervalPattern": "",
          "useMetadataIntervalPatterns": false,
          "startIntervalTimeUnit": "MINUTES",
          "endIntervalTimeUnit": "MINUTES",
          "fetchMode": "LAST",
          "orderBy": "ASC",
          "limit": 1000,
          "latestTsKeyNames": [
            "Hall",
            "Bateria",
            "Temperatura"
          ]
        }
      }
    ],
    "connections": [
      {
        "fromIndex": 1,
        "toIndex": 2,
        "type": "clear"
      },
      {
        "fromIndex": 1,
        "toIndex": 7,
        "type": "crear"
      },
      {
        "fromIndex": 2,
        "toIndex": 5,
        "type": "Cleared"
      },
      {
        "fromIndex": 3,
        "toIndex": 4,
        "type": "Created"
      },
      {
        "fromIndex": 6,
        "toIndex": 1,
        "type": "Success"
      },
      {
        "fromIndex": 7,
        "toIndex": 0,
        "type": "Created"
      },
      {
        "fromIndex": 9,
        "toIndex": 10,
        "type": "Success"
      },
      {
        "fromIndex": 10,
        "toIndex": 11,
        "type": "clear"
      },
      {
        "fromIndex": 10,
        "toIndex": 3,
        "type": "crear"
      },
      {
        "fromIndex": 11,
        "toIndex": 8,
        "type": "Cleared"
      },
      {
        "fromIndex": 12,
        "toIndex": 28,
        "type": "alarma"
      },
      {
        "fromIndex": 12,
        "toIndex": 52,
        "type": "telemetria"
      },
      {
        "fromIndex": 12,
        "toIndex": 32,
        "type": "guardarAtributos"
      },
      {
        "fromIndex": 14,
        "toIndex": 43,
        "type": "no"
      },
      {
        "fromIndex": 18,
        "toIndex": 37,
        "type": "Success"
      },
      {
        "fromIndex": 19,
        "toIndex": 42,
        "type": "Success"
      },
      {
        "fromIndex": 20,
        "toIndex": 15,
        "type": "Created"
      },
      {
        "fromIndex": 22,
        "toIndex": 26,
        "type": "Success"
      },
      {
        "fromIndex": 23,
        "toIndex": 28,
        "type": "Success"
      },
      {
        "fromIndex": 24,
        "toIndex": 34,
        "type": "Cleared"
      },
      {
        "fromIndex": 25,
        "toIndex": 16,
        "type": "Cleared"
      },
      {
        "fromIndex": 26,
        "toIndex": 51,
        "type": "Success"
      },
      {
        "fromIndex": 27,
        "toIndex": 23,
        "type": "Success"
      },
      {
        "fromIndex": 27,
        "toIndex": 13,
        "type": "Success"
      },
      {
        "fromIndex": 27,
        "toIndex": 18,
        "type": "Success"
      },
      {
        "fromIndex": 28,
        "toIndex": 33,
        "type": "Success"
      },
      {
        "fromIndex": 29,
        "toIndex": 30,
        "type": "Success"
      },
      {
        "fromIndex": 31,
        "toIndex": 29,
        "type": "Success"
      },
      {
        "fromIndex": 32,
        "toIndex": 31,
        "type": "Success"
      },
      {
        "fromIndex": 33,
        "toIndex": 36,
        "type": "inactividad"
      },
      {
        "fromIndex": 33,
        "toIndex": 19,
        "type": "Hall"
      },
      {
        "fromIndex": 33,
        "toIndex": 45,
        "type": "Bateria"
      },
      {
        "fromIndex": 33,
        "toIndex": 6,
        "type": "Temperatura"
      },
      {
        "fromIndex": 33,
        "toIndex": 9,
        "type": "Temperatura"
      },
      {
        "fromIndex": 35,
        "toIndex": 25,
        "type": "clear"
      },
      {
        "fromIndex": 35,
        "toIndex": 44,
        "type": "crear"
      },
      {
        "fromIndex": 36,
        "toIndex": 35,
        "type": "Success"
      },
      {
        "fromIndex": 38,
        "toIndex": 47,
        "type": "Success"
      },
      {
        "fromIndex": 40,
        "toIndex": 21,
        "type": "Created"
      },
      {
        "fromIndex": 41,
        "toIndex": 39,
        "type": "Cleared"
      },
      {
        "fromIndex": 42,
        "toIndex": 41,
        "type": "clear"
      },
      {
        "fromIndex": 42,
        "toIndex": 20,
        "type": "crear"
      },
      {
        "fromIndex": 43,
        "toIndex": 22,
        "type": "Success"
      },
      {
        "fromIndex": 44,
        "toIndex": 17,
        "type": "Created"
      },
      {
        "fromIndex": 45,
        "toIndex": 50,
        "type": "Success"
      },
      {
        "fromIndex": 46,
        "toIndex": 47,
        "type": "Success"
      },
      {
        "fromIndex": 47,
        "toIndex": 53,
        "type": "Success"
      },
      {
        "fromIndex": 49,
        "toIndex": 12,
        "type": "Success"
      },
      {
        "fromIndex": 50,
        "toIndex": 24,
        "type": "clear"
      },
      {
        "fromIndex": 50,
        "toIndex": 40,
        "type": "crear"
      },
      {
        "fromIndex": 51,
        "toIndex": 48,
        "type": "Success"
      },
      {
        "fromIndex": 52,
        "toIndex": 38,
        "type": "CS"
      },
      {
        "fromIndex": 52,
        "toIndex": 47,
        "type": "TTN"
      },
      {
        "fromIndex": 52,
        "toIndex": 46,
        "type": "everynetUplink"
      },
      {
        "fromIndex": 52,
        "toIndex": 14,
        "type": "everynetDownlink"
      },
      {
        "fromIndex": 53,
        "toIndex": 27,
        "type": "Success"
      }
    ],
    "ruleChainConnections": [
      {
        "fromIndex": 0,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2187,
          "layoutY": 1385,
          "ruleChainNodeId": "rule-chain-node-56"
        },
        "type": "Success"
      },
      {
        "fromIndex": 4,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2187,
          "layoutY": 1385,
          "ruleChainNodeId": "rule-chain-node-56"
        },
        "type": "Success"
      },
      {
        "fromIndex": 5,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2187,
          "layoutY": 1385,
          "ruleChainNodeId": "rule-chain-node-56"
        },
        "type": "Success"
      },
      {
        "fromIndex": 8,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2187,
          "layoutY": 1385,
          "ruleChainNodeId": "rule-chain-node-56"
        },
        "type": "Success"
      },
      {
        "fromIndex": 15,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2187,
          "layoutY": 1385,
          "ruleChainNodeId": "rule-chain-node-56"
        },
        "type": "Success"
      },
      {
        "fromIndex": 16,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2187,
          "layoutY": 1385,
          "ruleChainNodeId": "rule-chain-node-56"
        },
        "type": "Success"
      },
      {
        "fromIndex": 17,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2187,
          "layoutY": 1385,
          "ruleChainNodeId": "rule-chain-node-56"
        },
        "type": "Success"
      },
      {
        "fromIndex": 21,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2187,
          "layoutY": 1385,
          "ruleChainNodeId": "rule-chain-node-56"
        },
        "type": "Success"
      },
      {
        "fromIndex": 34,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2187,
          "layoutY": 1385,
          "ruleChainNodeId": "rule-chain-node-56"
        },
        "type": "Success"
      },
      {
        "fromIndex": 39,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2187,
          "layoutY": 1385,
          "ruleChainNodeId": "rule-chain-node-56"
        },
        "type": "Success"
      }
    ]
  }
}