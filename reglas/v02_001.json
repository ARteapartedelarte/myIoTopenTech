{
  "ruleChain": {
    "additionalInfo": null,
    "name": "V02_001",
    "firstRuleNodeId": null,
    "root": false,
    "debugMode": false,
    "configuration": null
  },
  "metadata": {
    "firstNodeIndex": 33,
    "nodes": [
      {
        "additionalInfo": {
          "layoutX": 871,
          "layoutY": 227
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgAttributesNode",
        "name": "guardar",
        "debugMode": true,
        "configuration": {
          "scope": "SERVER_SCOPE"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 365,
          "layoutY": 89
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Everynet2TTN",
        "debugMode": true,
        "configuration": {
          "jsScript": "var b64array =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\nfunction decode64(input) {\n\n    var output = \"\";\n    var hex = \"\";\n    var chr1, chr2, chr3 = \"\";\n    var enc1, enc2, enc3, enc4 = \"\";\n    var i = 0;\n\n    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n    do {\n        enc1 = b64array.indexOf(input.charAt(i++));\n        enc2 = b64array.indexOf(input.charAt(i++));\n        enc3 = b64array.indexOf(input.charAt(i++));\n        enc4 = b64array.indexOf(input.charAt(i++));\n\n        chr1 = (enc1 << 2) | (enc2 >> 4);\n        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n        chr3 = ((enc3 & 3) << 6) | enc4;\n\n        output = output + String.fromCharCode(chr1);\n\n        if (enc3 != 64) {\n            output = output + String.fromCharCode(chr2);\n        }\n        if (enc4 != 64) {\n            output = output + String.fromCharCode(chr3);\n        }\n\n        chr1 = chr2 = chr3 = \"\";\n        enc1 = enc2 = enc3 = enc4 = \"\";\n\n    } while (i < input.length);\n\n    return unescape(output);\n\n}\n\nfunction encodeHex(input) {\n    var hex = \"\";\n\n    for (i = 0; i < input.length; i++)\n        hex += ('00' + input.charCodeAt(i).toString(16))\n        .slice(-2);\n\n    return hex;\n}\n\n//SÃ³lo gestiono los uplinks no duplicados\nif (msg.params.duplicate === false) {\n\n    /*FORMATO EVERYNET ABP\n    {\n    \"type\": \"uplink\",\n    \"meta\": {\n        \"network\": \"f2108cf9ef0647b291e07e708b8f1812\",\n        \"packet_hash\": \"7a0a3591f78ca5170d189fc13df2be39\",\n        \"application\": \"70b3d57ed0024fa9\",\n        \"device_addr\": \"2601128e\",\n        \"time\": 1592045398.914028883,\n        \"device\": \"00098698e0267d50\",\n        \"packet_id\": \"a5bc7e3592c5eb4b581915cbe8e62545\",\n        \"gateway\": \"b0fd0b70063c0000\"\n    },\n    \"params\": {\n        \"rx_time\": 1592045398.8111801147,\n        \"port\": 1,\n        \"duplicate\": false,\n        \"counter_up\": 0,\n        \"payload\": \"AQIA8QIAAANnAPYEcyTIBWh1BgEA\",\n        \"encrypted_payload\": \"rxcVFaaTAWU4bM4ys885QgCRQXec\"\n    }\n}\n*/\n    /*FORMATO TTN\n    {\n    \"app_id\": \"iotopentech\",\n    \"dev_id\": \"iotopentech03\",\n    \"hardware_serial\": \"005640FFD76F9212\",\n    \"port\": 1,\n    \"counter\": 31092,\n    \"payload_raw\": \"AWYAAgEAA2hWBAIBVAVnAOsGcyTwBwIAAA\\u003d\\u003d\",\n    \"payload_fields\": {\n        \"analog_in_4\": 3.4,\n        \"analog_in_7\": 0,\n        \"barometric_pressure_6\": 945.6,\n        \"digital_out_2\": 0,\n        \"presence_1\": 0,\n        \"relative_humidity_3\": 43,\n        \"temperature_5\": 23.5\n    },\n    \"metadata\": {\n        \"time\": \"2020-06-13T11:25:49.770303106Z\",\n        \"frequency\": 868.5,\n        \"modulation\": \"LORA\",\n        \"data_rate\": \"SF7BW125\",\n        \"coding_rate\": \"4/5\",\n        \"gateways\": [{\n            \"gtw_id\": \"eui-3234333629005e00\",\n            \"timestamp\": 3734173416,\n            \"time\": \"\",\n            \"channel\": 2,\n            \"rssi\": -87,\n            \"snr\": 4,\n            \"rf_chain\": 0\n        }]\n    },\n    \"downlink_url\": \"https://integrations.thethingsnetwork.org/ttn-eu/api/v2/down/iotopentech/myiotopentech_integration?key\\u003dttn-account-v2.hLI6TVUdL4uPkXgUECKvvnDlLm2nvlSSj24ciHOth_Q\"\n}\n*/\n\n\n    var newMsg = {};\n    newMsg.app_id = msg.meta.application;\n    newMsg.dev_id = msg.meta.device_addr;\n    newMsg.hardware_serial = msg.meta.device;\n    newMsg.counter = msg.params.counter_up;\n    newMsg.port = msg.params.port;\n    newMsg.payload_raw = encodeHex(decode64(msg.params\n        .payload));\n    var comodin_payload_raw = newMsg.payload_raw;\n    //Creo el decodificador LPP\n    newMsg.payload_fields = {};\n\n    while (comodin_payload_raw.length > 4) {\n        switch (comodin_payload_raw.substring(2, 4)) {\n            case \"00\":\n                newMsg.payload_fields['digital_in_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 6),\n                        16);\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(6);\n                break;\n            case \"01\":\n                newMsg.payload_fields['digital_out_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 6),\n                        16);\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(6);\n                break;\n            case \"02\":\n                newMsg.payload_fields['analog_in_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 8),\n                        16) / 100.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(8);\n                break;\n            case \"03\":\n                newMsg.payload_fields['analog_out_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 8),\n                        16) / 100.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(8);\n                break;\n            case \"65\":\n                newMsg.payload_fields['luminosity_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 8),\n                        16);\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(8);\n                break;\n            case \"65\":\n                newMsg.payload_fields['presence_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 6),\n                        16);\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(6);\n                break;\n            case \"67\":\n                newMsg.payload_fields['temperature_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 8),\n                        16) / 10.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(8);\n                break;\n            case \"68\":\n                newMsg.payload_fields['relative_humidity_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 6),\n                        16) / 2.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(6);\n                break;\n            case \"73\":\n                newMsg.payload_fields[\n                        'barometric_pressure_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 8),\n                        16) / 10.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(8);\n                break;\n            case \"71\":\n                newMsg.payload_fields['accelerometer_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)].x =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 8),\n                        16) / 1000.0;\n                newMsg.payload_fields['accelerometer_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)].y =\n                    parseInt(\n                        comodin_payload_raw.substring(8,\n                            12),\n                        16) / 1000.0;\n                newMsg.payload_fields['accelerometer_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)].z =\n                    parseInt(\n                        comodin_payload_raw.substring(12,\n                            16),\n                        16) / 1000.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(16);\n                break;\n            case \"86\":\n                newMsg.payload_fields['gyrometer_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)].x =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 8),\n                        16) / 100.0;\n                newMsg.payload_fields['gyrometer_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)].y =\n                    parseInt(\n                        comodin_payload_raw.substring(8,\n                            12),\n                        16) / 100.0;\n                newMsg.payload_fields['gyrometer_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)].z =\n                    parseInt(\n                        comodin_payload_raw.substring(12,\n                            16),\n                        16) / 100.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(16);\n                break;\n            case \"88\":\n                newMsg.payload_fields['gps_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)]\n                    .latitude =\n                    parseInt(\n                        comodin_payload_raw.substring(4,\n                        10),\n                        16) / 10000.0;\n                newMsg.payload_fields['gps_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)]\n                    .longitude =\n                    parseInt(\n                        comodin_payload_raw.substring(10,\n                            16),\n                        16) / 10000.0;\n                newMsg.payload_fields['gps_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)]\n                    .altitude =\n                    parseInt(\n                        comodin_payload_raw.substring(16,\n                            22),\n                        16) / 100.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(22);\n                break;\n        }\n    }\n\n\n    newMsg.metadata = {\n        'gateway': msg.meta.gateway,\n        'network': msg.meta.network\n    };\n\n    newMsg.ultimoUplink = \"Everynet\";\n    newMsg.infoDownlink = {};\n    return {\n        msg: newMsg,\n        metadata: metadata,\n        msgType: msgType\n    };\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1464,
          "layoutY": 196
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgAttributesNode",
        "name": "guardar",
        "debugMode": true,
        "configuration": {
          "scope": "SERVER_SCOPE"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1200,
          "layoutY": 198
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "preparar atributos",
        "debugMode": true,
        "configuration": {
          "jsScript": "\nmsg={\"___tomarPosesionMetodoActivacion\":msg.___tomarPosesionMetodoActivacion,\n    \"___tomarPosesionParam1\":msg.___tomarPosesionParam1,\n    \"___tomarPosesionParam2\":msg.___tomarPosesionParam2,\n    \"___tomarPosesionParam3\":msg.___tomarPosesionParam3\n};\nmsgType = \"POST_ATTRIBUTES_REQUEST\";\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 882,
          "layoutY": 343
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "operaciones",
        "debugMode": true,
        "configuration": {
          "jsScript": "\n    return ['guardarAtributo','enviarDownlink'];\n"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1201,
          "layoutY": 256
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "prepararDownlink1",
        "debugMode": true,
        "configuration": {
          "jsScript": "var payload = {};\n   \n    payload.port = 99; //Cayenne mydevices manda los downlink por el port 99\n    payload.confirmed = true;\n    payload.schedule='last';\n    payload.payload_raw=\"FF01\"+ msg.___tomarPosesionParam1;\n    \n    \nmsg={\"payload\":JSON.stringify(payload),\"uuid\": msg.uuid};\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 322,
          "layoutY": 371
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "uuid",
        "debugMode": true,
        "configuration": {
          "jsScript": "msg.uuid=metadata.idEntidad;\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 616,
          "layoutY": 366
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "tipoDonwlink?",
        "debugMode": true,
        "configuration": {
          "jsScript": "if(msg.___ultimoDownlink=='heartbeat'){\n    return['heartbeat'];\n}else if(msg.___ultimoDownlink=='tomarPosesion'){\n    return['tomarPosesion'];\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1419,
          "layoutY": 753
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": true,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.split(\"_\")[1]+\" ha anulado una alarma de tipo inactividad.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.split(\"_\")[1]+'\",\"value2\":\"'+metadata.digital_in_2+'\",\"value3\":\"'+metadata.analog_in_1+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.split(\"_\")[1]+\": Alarma anulada \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1419,
          "layoutY": 701
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": true,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.split(\"_\")[1]+\" ha generado una alarma de inactividad.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.split(\"_\")[1]+'\",\"value2\":\"'+metadata.digital_in_2+'\",\"value3\":\"'+metadata.analog_in_1+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.split(\"_\")[1]+\": Alarma \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1155,
          "layoutY": 685
        },
        "type": "org.thingsboard.rule.engine.action.TbCreateAlarmNode",
        "name": "Crear alarma",
        "debugMode": true,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;",
          "severity": "CRITICAL",
          "propagate": true,
          "useMessageAlarmData": false,
          "relationTypes": [
            "Contains"
          ]
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1155,
          "layoutY": 746
        },
        "type": "org.thingsboard.rule.engine.action.TbClearAlarmNode",
        "name": "Clear alarma",
        "debugMode": true,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1420,
          "layoutY": 627
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": true,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.split(\"_\")[1]+\" ha anulado una alarma de tipo \"+metadata.tipoAlarma+\". La tensiÃ³n actual de la baterÃ­a es \"+metadata.analog_in_1+\" V, y el umbral de alarma es \"+metadata.umbralBateria+\" V.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.split(\"_\")[1]+'\",\"value2\":\"'+metadata.digital_in_2+'\",\"value3\":\"'+metadata.analog_in_1+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.split(\"_\")[1]+\": Alarma anulada \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1420,
          "layoutY": 575
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": true,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.split(\"_\")[1]+\" ha generado una alarma de tipo \"+metadata.tipoAlarma+\". La tensiÃ³n actual de la baterÃ­a es \"+metadata.analog_in_1+\" V, y el umbral de alarma es \"+metadata.umbralBateria+\" V.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.split(\"_\")[1]+'\",\"value2\":\"'+metadata.digital_in_2+'\",\"value3\":\"'+metadata.analog_in_1+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.split(\"_\")[1]+\": Alarma \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 604,
          "layoutY": 587
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "tipoAlarma",
        "debugMode": true,
        "configuration": {
          "jsScript": "metadata.tipoAlarma = \"Nivel bajo de baterÃ­a\";\nmetadata.umbralBateria=msg.alarma.umbralBateria;\n\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1156,
          "layoutY": 559
        },
        "type": "org.thingsboard.rule.engine.action.TbCreateAlarmNode",
        "name": "Crear alarma",
        "debugMode": true,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;",
          "severity": "CRITICAL",
          "propagate": true,
          "useMessageAlarmData": false,
          "relationTypes": [
            "Contains"
          ]
        }
      },
      {
        "additionalInfo": {
          "layoutX": 316,
          "layoutY": 586
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Activada?",
        "debugMode": true,
        "configuration": {
          "jsScript": "var obj = JSON.parse(metadata.ss___alarma_V02_001);\n\nif (obj.nivelDeBateria.enable===true){\n    msg.alarma=obj.nivelDeBateria;\n    //Cargo los datos de interÃ©s en los metadatos para construir los mensaje de alarma\n    metadata.analog_in_1=msg.analog_in_1;\n    metadata.alarmaActual=JSON.stringify(obj.nivelDeBateria);\n    \n   return {\n        msg: msg,\n        metadata: metadata,\n        msgType: msgType\n    };\n}\n"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1156,
          "layoutY": 620
        },
        "type": "org.thingsboard.rule.engine.action.TbClearAlarmNode",
        "name": "Clear alarma",
        "debugMode": true,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 863,
          "layoutY": 586
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "C[r/l]ear",
        "debugMode": true,
        "configuration": {
          "jsScript": "if (msg.alarma.umbralBateria > msg.analog_in_1) {\n    return ['crear'];\n} else{\n    return ['clear'];\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1418,
          "layoutY": 498
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": true,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.split(\"_\")[1]+\" ha anulado la alarma de tipo \"+metadata.tipoAlarma+\". La tensiÃ³n de la baterÃ­a es \"+metadata.analog_in_1+\" V.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.split(\"_\")[1]+'\",\"value2\":\"'+metadata.digital_in_2+'\",\"value3\":\"'+metadata.analog_in_1+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.split(\"_\")[1]+\": Alarma anulada \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1417,
          "layoutY": 435
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": true,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.split(\"_\")[1]+\" ha generado una alarma de tipo \"+metadata.tipoAlarma+\". La tensiÃ³n de la baterÃ­a es \"+metadata.analog_in_1+\" V.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.split(\"_\")[1]+'\",\"value2\":\"'+metadata.digital_in_2+'\",\"value3\":\"'+metadata.analog_in_1+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.split(\"_\")[1]+\": Alarma \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 600,
          "layoutY": 463
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "tipoAlarma",
        "debugMode": true,
        "configuration": {
          "jsScript": "if(msg.alarma.trigger=='abrir'){\n    metadata.tipoAlarma=\"Puerta abierta\";\n    \n}else if(msg.alarma.trigger=='cerrar'){\n    metadata.tipoAlarma=\"Puerta cerrada\";\n}\nreturn {msg:msg,metadata:metadata,msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1152,
          "layoutY": 435
        },
        "type": "org.thingsboard.rule.engine.action.TbCreateAlarmNode",
        "name": "Crear alarma",
        "debugMode": true,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;",
          "severity": "CRITICAL",
          "propagate": true,
          "useMessageAlarmData": false,
          "relationTypes": [
            "Contains"
          ]
        }
      },
      {
        "additionalInfo": {
          "layoutX": 312,
          "layoutY": 462
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Activada?",
        "debugMode": true,
        "configuration": {
          "jsScript": "var obj = JSON.parse(metadata.ss___alarma_V02_001);\n\nif (obj.cambioDeEstado.enable===true){\n    msg.alarma=obj.cambioDeEstado;\n    //Cargo los datos de interÃ©s en los metadatos para construir los mensaje de alarma\n    metadata.analog_in_1=msg.analog_in_1;\n    metadata.digital_in_2=msg.digital_in_2;\n    metadata.alarmaActual=JSON.stringify(obj.cambioDeEstado);\n    \n   return {\n        msg: msg,\n        metadata: metadata,\n        msgType: msgType\n    };\n}\n"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 48,
          "layoutY": 291
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "Cargar alarmas",
        "debugMode": true,
        "configuration": {
          "clientAttributeNames": [],
          "sharedAttributeNames": [],
          "serverAttributeNames": [
            "__alarma_V02_001"
          ],
          "latestTsKeyNames": [],
          "tellFailureIfAbsent": true,
          "getLatestValueWithTs": false
        }
      },
      {
        "additionalInfo": {
          "layoutX": 44,
          "layoutY": 375
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "Alarmas",
        "debugMode": true,
        "configuration": {
          "jsScript": "var respuesta = [];\nif (metadata.hasOwnProperty('ss___alarma_V02_001')) {\n    var obj = JSON.parse(metadata.ss___alarma_V02_001);\n    if (obj.hasOwnProperty('cambioDeEstado')&&msg.hasOwnProperty('digital_in_2')) {\n        respuesta.push('cambioDeEstado');\n    }\n    if (obj.hasOwnProperty('nivelDeBateria')&&msg.hasOwnProperty('analog_in_1')) {\n        respuesta.push('nivelDeBateria');\n    }\n    if (obj.hasOwnProperty('inactividad')&&(msgType=='INACTIVITY_EVENT'||msgType=='ACTIVITY_EVENT')) {\n        \n        respuesta.push('inactividad');\n    }\n}\n\nreturn respuesta;"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1152,
          "layoutY": 496
        },
        "type": "org.thingsboard.rule.engine.action.TbClearAlarmNode",
        "name": "Clear alarma",
        "debugMode": true,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 859,
          "layoutY": 462
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "C[r/l]ear",
        "debugMode": true,
        "configuration": {
          "jsScript": "if(msg.alarma.trigger=='abrir'){\n    \n    if(msg.digital_in_2==1){\n        return ['crear'];\n    }else{\n        return ['clear'];\n    }\n}else if(msg.alarma.trigger=='cerrar'){\n    \n    if(msg.digital_in_2===0){\n        return ['crear'];\n    }else{\n        return ['clear'];\n    }\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 867,
          "layoutY": 665
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "C[r/l]ear",
        "debugMode": true,
        "configuration": {
          "jsScript": "if (msgType=='INACTIVITY_EVENT') {\n    return ['crear'];\n} else{\n    return ['clear'];\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 600,
          "layoutY": 668
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "tipoAlarma",
        "debugMode": true,
        "configuration": {
          "jsScript": "metadata.tipoAlarma = \"Inactividad\";\n\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 320,
          "layoutY": 669
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Activada?",
        "debugMode": true,
        "configuration": {
          "jsScript": "var obj = JSON.parse(metadata.ss___alarma_V02_001);\n\nif (obj.inactividad.enable===true){\n    metadata.alarmaActual=JSON.stringify(obj.inactividad);\n    \n   return {\n        msg: msg,\n        metadata: metadata,\n        msgType: msgType\n    };\n}\n"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 903,
          "layoutY": 112
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgAttributesNode",
        "name": "guardar",
        "debugMode": true,
        "configuration": {
          "scope": "SERVER_SCOPE"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 627,
          "layoutY": 116
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "tooltip + downlink",
        "debugMode": true,
        "configuration": {
          "jsScript": "// unix timestamp\nvar ts = metadata.ts;\n\n// convert unix timestamp to milliseconds\nvar ts_ms = ts * 1;\n\n// initialize new Date object\nvar date_ob = new Date(ts_ms);\n\n// year as 4 digits (YYYY)\nvar year = date_ob.getFullYear();\n\n// month as 2 digits (MM)\nvar month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);\n\n// date as 2 digits (DD)\nvar date = (\"0\" + date_ob.getDate()).slice(-2);\n\n// hours as 2 digits (hh)\nvar hours = (\"0\" + date_ob.getHours()).slice(-2);\n\n// minutes as 2 digits (mm)\nvar minutes = (\"0\" + date_ob.getMinutes()).slice(-2);\n\n// seconds as 2 digits (ss)\nvar seconds = (\"0\" + date_ob.getSeconds()).slice(-2);\n\nvar newMsg = {};\nnewMsg.tooltip = \"<b>\" + year + \"-\" + month + \"-\" + date +\n    \" \" + hours + \":\" + minutes + \":\" + seconds +\n    \"</b><br/>\" + \"<b>Puerta: </b>\" + (msg\n        .digital_in_2 ==\n        1 ? \"Abierta\" : \"Cerrada\") +\n    \"<br/><b>LED: </b>\" + (msg.digital_in_3 == 1 ?\n        \"Encendido\" : \"Apagado\") +\n    \"<br/><b>BaterÃ­a: </b>\" + (msg.analog_in_1) +\n    \" V\";\nnewMsg.ultimoUplink = msg.ultimoUplink;\nnewMsg.infoDownlink = msg.infoDownlink;\n\nmsgType = \"POST_ATTRIBUTES_REQUEST\";\nreturn {\n    msg: newMsg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 46,
          "layoutY": 207
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "es telemetria?",
        "debugMode": true,
        "configuration": {
          "jsScript": "if (msgType == 'POST_TELEMETRY_REQUEST') {\n    if (msg.hasOwnProperty('___ultimoDownlink')) {\n        return ['downlink'];\n    } else {\n        return ['telemetria', 'alarma'];\n    }\n} else if (msgType == 'INACTIVITY_EVENT' || msgType ==\n    'ACTIVITY_EVENT') {\n    return ['alarma'];\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 902,
          "layoutY": 41
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgTimeseriesNode",
        "name": "save timeseries",
        "debugMode": true,
        "configuration": {
          "defaultTTL": 0
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1459,
          "layoutY": 63
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgAttributesNode",
        "name": "guardar",
        "debugMode": true,
        "configuration": {
          "scope": "SERVER_SCOPE"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1195,
          "layoutY": 65
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "preparar atributos",
        "debugMode": true,
        "configuration": {
          "jsScript": "msg={\"___heartbeat\":msg.___heartbeat};\nmsgType = \"POST_ATTRIBUTES_REQUEST\";\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 883,
          "layoutY": 278
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "operaciones",
        "debugMode": true,
        "configuration": {
          "jsScript": "\n    return ['guardarAtributo','enviarDownlink'];\n"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1200,
          "layoutY": 142
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "prepararDownlink",
        "debugMode": true,
        "configuration": {
          "jsScript": "var payload = {};\n   \n    payload.port = 99; //Cayenne mydevices manda los downlink por el port 99\n    payload.confirmed = true;\n    payload.schedule='replace';\n    var valor=parseInt(msg.___heartbeat).toString(16);\n    var pad='00';\n    \n    payload.payload_raw=\"0700\"+ pad.substring(0, pad.length - valor.length) + valor;\n    \n    \nmsg={\"payload\":JSON.stringify(payload),\"uuid\": msg.uuid};\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1201,
          "layoutY": 372
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "prepararDownlink3",
        "debugMode": true,
        "configuration": {
          "jsScript": "var payload = {};\n   \n    payload.port = 99; //Cayenne mydevices manda los downlink por el port 99\n    payload.confirmed = true;\n    payload.schedule='last';\n    payload.payload_raw=\"FF03\"+ msg.___tomarPosesionParam3;\n    \n    \nmsg={\"payload\":JSON.stringify(payload),\"uuid\": msg.uuid};\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1201,
          "layoutY": 313
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "prepararDownlink2",
        "debugMode": true,
        "configuration": {
          "jsScript": "var payload = {};\n   \n    payload.port = 99; //Cayenne mydevices manda los downlink por el port 99\n    payload.confirmed = true;\n    payload.schedule='last';\n    payload.payload_raw=\"FF02\"+ msg.___tomarPosesionParam2;\n    \n    \nmsg={\"payload\":JSON.stringify(payload),\"uuid\": msg.uuid};\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 322,
          "layoutY": 292
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "TTN/CS/Everynet?",
        "debugMode": true,
        "configuration": {
          "jsScript": "if(msg.hasOwnProperty('type')&&msg.type== \"uplink\"){\r\n    return['everynetUplink'];\r\n}else if(msg.hasOwnProperty('type')&&msg.type== \"downlink_request\"){\r\n    return['everynetDownlink'];\r\n}else if (msg.hasOwnProperty('payload_fields') &&\r\n    msg.hasOwnProperty('metadata') &&\r\n    msg.hasOwnProperty('dev_id')) {\r\n    return ['TTN'];\r\n} else if (msg.hasOwnProperty('data') &&\r\n    msg.hasOwnProperty('object') &&\r\n    msg.hasOwnProperty('rxInfo') &&\r\n    msg.hasOwnProperty('txInfo') &&\r\n    msg.hasOwnProperty('deviceName')) {\r\n    return ['CS'];\r\n} else if (msg.hasOwnProperty('___ultimoDownlink') &&\r\n    msg.___ultimoDownlink !== '') {\r\n    return ['downlink'];\r\n} "
        }
      },
      {
        "additionalInfo": {
          "layoutX": 196,
          "layoutY": 44
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "CS2TTN",
        "debugMode": true,
        "configuration": {
          "jsScript": "var newMsg = {};\nnewMsg.app_id = msg.applicationName;\nnewMsg.dev_id = msg.deviceName;\nnewMsg.hardware_serial = msg.devEUI;\nnewMsg.adr = msg.adr;\nnewMsg.counter = msg.fCnt;\nnewMsg.port = msg.fPort;\nnewMsg.payload_raw = msg.data;\nvar newPayloadFields = msg.object;\n//Desafortunadamente el Cayenne Codec de CS es muy diferente al de TTN\n//No obstante, lo utilizarÃ© porque aquÃ­ se hace una vez, pero si hubiera que\n//hacerlo en CS implicarÃ­a actuar sobre cada aplicaciÃ³n\n//\"object\": \"{\\\"analogInput\\\":{\\\"1\\\":2.74},\\\"digitalInput\\\":{\\\"2\\\":1,\\\"3\\\":0}}\"\n//\"payload_fields\": \"{\\\"analog_in_1\\\":2.75,\\\"digital_in_2\\\":1,\\\"digital_in_3\\\":0}\"\nnewMsg.payload_fields = {};\nfor (var key in newPayloadFields) {\n    var prefijo = \"\";\n    switch (key) {\n        case 'analogInput':\n            prefijo = 'analog_in_';\n            break;\n        case 'digitalInput':\n            prefijo = 'digital_in_';\n            break;\n        case 'temperatureSensor':\n            prefijo = 'temperature_';\n            break;\n        case 'humiditySensor':\n            prefijo = 'relative_humidity_';\n            break;\n        case 'accelerometer':\n            prefijo = 'accelerometer_';\n            break;\n        case 'barometer':\n            prefijo = 'barometric_pressure_';\n            break;\n        case 'gyrometer':\n            prefijo = 'gyrometer_';\n            break;\n        case 'gpsLocation':\n            prefijo = 'gps_';\n            break;\n        case 'digitalOutput':\n            prefijo = 'digital_out_';\n            break;\n        case 'analogOutput':\n            prefijo = 'analog_out_';\n            break;\n        case 'illuminanceSensor':\n            prefijo = 'luminosity_';\n            break;\n        case 'presenceSensor':\n            prefijo = 'presence_';\n            break;\n\n    }\n    for (var key2 in newPayloadFields[key]) {\n        newMsg.payload_fields[prefijo + key2] =\n            newPayloadFields[key][key2];\n    }\n}\nnewMsg.metadata = {\n    'rxInfo': msg.rxInfo,\n    'txInfo': msg.txInfo\n};\n\nnewMsg.ultimoUplink = \"CS\";\nnewMsg.infoDownlink = {\"hardware_serial\":newMsg.hardware_serial};\nreturn {\n    msg: newMsg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 628,
          "layoutY": 40
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "TTN2JSON",
        "debugMode": true,
        "configuration": {
          "jsScript": "var newObj = msg.payload_fields;\r\nvar obj = {};\r\n//Si el obj tiene propiedades que son, a su vez, objetos JSON\r\n//por ejemplo, el caso de un GPS\r\n//tengo que convertirlas a timeseries\r\n//Desafortunadamente, es posible que aquÃ­ tengamos que hacer algunas\r\n//conversiones porque ciertos widgets no admiten los datos en el formato\r\n//que los entregan los sensores; por ejemplo, el magnetÃ³metro del RAK7200\r\n//entrega las mediciones en uT, pero el widget brÃºjula requiere directamente un Ã¡ngulo\r\n//Esto lo podemos resolver con una funciÃ³n de postprocesamiento en el propio alias\r\n//pero el Widget trip animation sÃ³lo admite timeseries (no attibutes), por lo que no\r\n//podemos cargar el cercado desde un atributo (o quizÃ¡s sea mejor tratarlo en la regla del propio dispositivo)\r\nfor (var x in newObj) {\r\n    if (typeof(newObj[x]) === 'object') {\r\n        for (var y in newObj[x]) {\r\n            obj[x + '_' + y] = newObj[x][y];\r\n        }\r\n    } else {\r\n        obj[x] = newObj[x];\r\n    }\r\n}\r\nobj.metadata = msg.metadata;\r\nif (!msg.hasOwnProperty('ultimoUplink'))  {\r\n    obj.ultimoUplink = \"TTN\";\r\n    obj.infoDownlink = {\r\n        \"downlink_url\": msg.downlink_url,\r\n        \"ttn_dev_id\": msg.dev_id\r\n    };\r\n}else{\r\n    obj.ultimoUplink =msg.ultimoUplink;\r\n    obj.infoDownlink = msg.infoDownlink;\r\n}\r\n\r\nreturn {\r\n    msg: obj,\r\n    metadata: metadata,\r\n    msgType: msgType\r\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 625,
          "layoutY": 167
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "downlinkQueue",
        "debugMode": true,
        "configuration": {
          "clientAttributeNames": [],
          "sharedAttributeNames": [],
          "serverAttributeNames": [
            "downlinkQueue"
          ],
          "latestTsKeyNames": [],
          "tellFailureIfAbsent": true,
          "getLatestValueWithTs": false
        }
      },
      {
        "additionalInfo": {
          "layoutX": 628,
          "layoutY": 286
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgAttributesNode",
        "name": "guardar",
        "debugMode": true,
        "configuration": {
          "scope": "SHARED_SCOPE"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 628,
          "layoutY": 226
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "msg",
        "debugMode": true,
        "configuration": {
          "jsScript": "var downlinkQueue = JSON.parse(metadata.ss_downlinkQueue);\nif (downlinkQueue.length > 0) {\n    var downlink = downlinkQueue.shift();\n    //La meto en metadata para luego guardarla en los atributos del servidor\n    metadata.ss_downlinkQueue=JSON.stringify(downlinkQueue);\n    var newMsg = {\n        \"meta\": msg.meta,\n        \"params\": {\n            \"counter_down\": msg.params.counter_down,\n            \"payload\": downlink.payload,\n            \"port\": downlink.port,\n            \"queue_if_late\": true\n        },\n        \"type\": \"downlink_response\"\n    };\n    return {\n        msg: newMsg,\n        metadata: metadata,\n        msgType: \"POST_ATTRIBUTES_REQUEST\"\n    };\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 874,
          "layoutY": 166
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "msg",
        "debugMode": true,
        "configuration": {
          "jsScript": "\n    return {\n        msg: {\"downlinkQueue\":JSON.parse(metadata.ss_downlinkQueue)},\n        metadata: metadata,\n        msgType: \"POST_ATTRIBUTES_REQUEST\"\n    };\n"
        }
      }
    ],
    "connections": [
      {
        "fromIndex": 1,
        "toIndex": 43,
        "type": "Success"
      },
      {
        "fromIndex": 3,
        "toIndex": 2,
        "type": "Success"
      },
      {
        "fromIndex": 4,
        "toIndex": 39,
        "type": "enviarDownlink"
      },
      {
        "fromIndex": 4,
        "toIndex": 40,
        "type": "enviarDownlink"
      },
      {
        "fromIndex": 4,
        "toIndex": 5,
        "type": "enviarDownlink"
      },
      {
        "fromIndex": 4,
        "toIndex": 3,
        "type": "guardarAtributo"
      },
      {
        "fromIndex": 6,
        "toIndex": 7,
        "type": "Success"
      },
      {
        "fromIndex": 7,
        "toIndex": 37,
        "type": "heartbeat"
      },
      {
        "fromIndex": 7,
        "toIndex": 4,
        "type": "tomarPosesion"
      },
      {
        "fromIndex": 10,
        "toIndex": 9,
        "type": "Created"
      },
      {
        "fromIndex": 11,
        "toIndex": 8,
        "type": "Cleared"
      },
      {
        "fromIndex": 14,
        "toIndex": 18,
        "type": "Success"
      },
      {
        "fromIndex": 15,
        "toIndex": 13,
        "type": "Created"
      },
      {
        "fromIndex": 16,
        "toIndex": 14,
        "type": "Success"
      },
      {
        "fromIndex": 17,
        "toIndex": 12,
        "type": "Cleared"
      },
      {
        "fromIndex": 18,
        "toIndex": 15,
        "type": "crear"
      },
      {
        "fromIndex": 18,
        "toIndex": 17,
        "type": "clear"
      },
      {
        "fromIndex": 21,
        "toIndex": 27,
        "type": "Success"
      },
      {
        "fromIndex": 22,
        "toIndex": 20,
        "type": "Created"
      },
      {
        "fromIndex": 23,
        "toIndex": 21,
        "type": "Success"
      },
      {
        "fromIndex": 24,
        "toIndex": 25,
        "type": "Success"
      },
      {
        "fromIndex": 25,
        "toIndex": 16,
        "type": "nivelDeBateria"
      },
      {
        "fromIndex": 25,
        "toIndex": 23,
        "type": "cambioDeEstado"
      },
      {
        "fromIndex": 25,
        "toIndex": 30,
        "type": "inactividad"
      },
      {
        "fromIndex": 26,
        "toIndex": 19,
        "type": "Cleared"
      },
      {
        "fromIndex": 27,
        "toIndex": 22,
        "type": "crear"
      },
      {
        "fromIndex": 27,
        "toIndex": 26,
        "type": "clear"
      },
      {
        "fromIndex": 28,
        "toIndex": 10,
        "type": "crear"
      },
      {
        "fromIndex": 28,
        "toIndex": 11,
        "type": "clear"
      },
      {
        "fromIndex": 29,
        "toIndex": 28,
        "type": "Success"
      },
      {
        "fromIndex": 30,
        "toIndex": 29,
        "type": "Success"
      },
      {
        "fromIndex": 32,
        "toIndex": 31,
        "type": "Success"
      },
      {
        "fromIndex": 33,
        "toIndex": 41,
        "type": "telemetria"
      },
      {
        "fromIndex": 33,
        "toIndex": 24,
        "type": "alarma"
      },
      {
        "fromIndex": 33,
        "toIndex": 6,
        "type": "downlink"
      },
      {
        "fromIndex": 36,
        "toIndex": 35,
        "type": "Success"
      },
      {
        "fromIndex": 37,
        "toIndex": 38,
        "type": "enviarDownlink"
      },
      {
        "fromIndex": 37,
        "toIndex": 36,
        "type": "guardarAtributo"
      },
      {
        "fromIndex": 41,
        "toIndex": 44,
        "type": "everynetDownlink"
      },
      {
        "fromIndex": 41,
        "toIndex": 1,
        "type": "everynetUplink"
      },
      {
        "fromIndex": 41,
        "toIndex": 43,
        "type": "TTN"
      },
      {
        "fromIndex": 41,
        "toIndex": 42,
        "type": "CS"
      },
      {
        "fromIndex": 42,
        "toIndex": 43,
        "type": "Success"
      },
      {
        "fromIndex": 43,
        "toIndex": 32,
        "type": "Success"
      },
      {
        "fromIndex": 43,
        "toIndex": 34,
        "type": "Success"
      },
      {
        "fromIndex": 44,
        "toIndex": 46,
        "type": "Success"
      },
      {
        "fromIndex": 45,
        "toIndex": 47,
        "type": "Success"
      },
      {
        "fromIndex": 46,
        "toIndex": 45,
        "type": "Success"
      },
      {
        "fromIndex": 47,
        "toIndex": 0,
        "type": "Success"
      }
    ],
    "ruleChainConnections": [
      {
        "fromIndex": 5,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "f48eef20-abc0-11ea-b825-09d866a6d73c"
        },
        "additionalInfo": {
          "layoutX": 1475,
          "layoutY": 309,
          "ruleChainNodeId": "rule-chain-node-50"
        },
        "type": "Success"
      },
      {
        "fromIndex": 8,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "61d05910-9de4-11ea-abf5-9397c4646ed8"
        },
        "additionalInfo": {
          "layoutX": 1706,
          "layoutY": 722,
          "ruleChainNodeId": "rule-chain-node-54"
        },
        "type": "Success"
      },
      {
        "fromIndex": 9,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "61d05910-9de4-11ea-abf5-9397c4646ed8"
        },
        "additionalInfo": {
          "layoutX": 1706,
          "layoutY": 722,
          "ruleChainNodeId": "rule-chain-node-54"
        },
        "type": "Success"
      },
      {
        "fromIndex": 12,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "61d05910-9de4-11ea-abf5-9397c4646ed8"
        },
        "additionalInfo": {
          "layoutX": 1707,
          "layoutY": 596,
          "ruleChainNodeId": "rule-chain-node-53"
        },
        "type": "Success"
      },
      {
        "fromIndex": 13,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "61d05910-9de4-11ea-abf5-9397c4646ed8"
        },
        "additionalInfo": {
          "layoutX": 1707,
          "layoutY": 596,
          "ruleChainNodeId": "rule-chain-node-53"
        },
        "type": "Success"
      },
      {
        "fromIndex": 19,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "61d05910-9de4-11ea-abf5-9397c4646ed8"
        },
        "additionalInfo": {
          "layoutX": 1706,
          "layoutY": 485,
          "ruleChainNodeId": "rule-chain-node-52"
        },
        "type": "Success"
      },
      {
        "fromIndex": 20,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "61d05910-9de4-11ea-abf5-9397c4646ed8"
        },
        "additionalInfo": {
          "layoutX": 1706,
          "layoutY": 485,
          "ruleChainNodeId": "rule-chain-node-52"
        },
        "type": "Success"
      },
      {
        "fromIndex": 38,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "f48eef20-abc0-11ea-b825-09d866a6d73c"
        },
        "additionalInfo": {
          "layoutX": 1463,
          "layoutY": 144,
          "ruleChainNodeId": "rule-chain-node-51"
        },
        "type": "Success"
      },
      {
        "fromIndex": 39,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "f48eef20-abc0-11ea-b825-09d866a6d73c"
        },
        "additionalInfo": {
          "layoutX": 1475,
          "layoutY": 309,
          "ruleChainNodeId": "rule-chain-node-50"
        },
        "type": "Success"
      },
      {
        "fromIndex": 40,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "f48eef20-abc0-11ea-b825-09d866a6d73c"
        },
        "additionalInfo": {
          "layoutX": 1475,
          "layoutY": 309,
          "ruleChainNodeId": "rule-chain-node-50"
        },
        "type": "Success"
      }
    ]
  }
}