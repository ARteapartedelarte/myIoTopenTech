{
  "ruleChain": {
    "additionalInfo": null,
    "name": "LGT92",
    "firstRuleNodeId": null,
    "root": false,
    "debugMode": false,
    "configuration": null
  },
  "metadata": {
    "firstNodeIndex": 36,
    "nodes": [
      {
        "additionalInfo": {
          "layoutX": 1335,
          "layoutY": 1320
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha generado una alarma de inactividad.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 790,
          "layoutY": 1757
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "C[r/l]ear",
        "debugMode": false,
        "configuration": {
          "jsScript": "if (metadata.pitch< msg.alarma.umbralMinimo) {\n    return ['crear'];\n} else if( metadata.pitch > msg.alarma.umbralMinimo + msg.alarma.histeresisMinimo){\n    return ['clear'];\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1080,
          "layoutY": 1808
        },
        "type": "org.thingsboard.rule.engine.action.TbClearAlarmNode",
        "name": "Clear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1080,
          "layoutY": 1747
        },
        "type": "org.thingsboard.rule.engine.action.TbCreateAlarmNode",
        "name": "Crear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;",
          "severity": "CRITICAL",
          "propagate": true,
          "useMessageAlarmData": false,
          "relationTypes": [
            "Contains"
          ]
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1344,
          "layoutY": 1763
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha generado una alarma de tipo \"+metadata.tipoAlarma+\". El ángulo de cabeceo es \"+metadata.pitch+\" º y el umbral es de \"+metadata.umbralMinimo+\" º.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value2\":\"'+metadata.pitch+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1339,
          "layoutY": 1702
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha anulado una alarma de tipo \"+metadata.tipoAlarma+\"El ángulo de cabeceo es \"+metadata.pitch+\" º y el umbral es de \"+metadata.umbralMaximo+\" º.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value2\":\"'+metadata.pitch+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma anulada\"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};\n\n\n"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 517,
          "layoutY": 1646
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "tipo alarma",
        "debugMode": false,
        "configuration": {
          "jsScript": "var obj = JSON.parse(metadata['ss___alarma_' + metadata\n    .deviceType]);\n\n//Cargamos la alarma en el mensaje para que el nodo siguiente\n//pueda ejecutar la \"lógica de negocio\"\nmsg.alarma = obj.cabeceo;\n\n//Cargamos los datos de interés en los metadatos para construir los mensajes \n//de alarma tras el nodo que genera/borrar la alarma\nmetadata.pitch = msg.pitch;\n//alarmaActual se usa en la cadena de reglas de Notificaciones\n//Para extraer información. No puede ir por msg porque se\n//pierde en el nodo de generación de alarma\nmetadata.alarmaActual = JSON.stringify(obj.cabeceo);\nmetadata.tipoAlarma =\n\"Ángulo de cabeceo superior al umbral máximo\";\nmetadata.umbralMinimo = msg.alarma.umbralMinimo;\nmetadata.umbralMaximo = msg.alarma.umbralMaximo;\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 522,
          "layoutY": 1759
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "tipo alarma",
        "debugMode": false,
        "configuration": {
          "jsScript": "var obj = JSON.parse(metadata['ss___alarma_' + metadata\n    .deviceType]);\n\n//Cargamos la alarma en el mensaje para que el nodo siguiente\n//pueda ejecutar la \"lógica de negocio\"\nmsg.alarma = obj.cabeceo;\n\n//Cargamos los datos de interés en los metadatos para construir los mensajes \n//de alarma tras el nodo que genera/borrar la alarma\nmetadata.pitch = msg.pitch;\n//alarmaActual se usa en la cadena de reglas de Notificaciones\n//Para extraer información. No puede ir por msg porque se\n//pierde en el nodo de generación de alarma\nmetadata.alarmaActual = JSON.stringify(obj.cabeceo);\nmetadata.tipoAlarma =\n\"Ángulo de cabeceo inferior al umbral mínimo\";\nmetadata.umbralMinimo = msg.alarma.umbralMinimo;\nmetadata.umbralMaximo = msg.alarma.umbralMaximo;\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 679,
          "layoutY": 1056
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "RAW2JSON",
        "debugMode": true,
        "configuration": {
          "jsScript": "var b64array =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\nfunction decode64(input) {\n\n    var output = \"\";\n    var hex = \"\";\n    var chr1, chr2, chr3 = \"\";\n    var enc1, enc2, enc3, enc4 = \"\";\n    var i = 0;\n\n    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n    do {\n        enc1 = b64array.indexOf(input.charAt(i++));\n        enc2 = b64array.indexOf(input.charAt(i++));\n        enc3 = b64array.indexOf(input.charAt(i++));\n        enc4 = b64array.indexOf(input.charAt(i++));\n\n        chr1 = (enc1 << 2) | (enc2 >> 4);\n        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n        chr3 = ((enc3 & 3) << 6) | enc4;\n\n        output = output + String.fromCharCode(chr1);\n\n        if (enc3 != 64) {\n            output = output + String.fromCharCode(chr2);\n        }\n        if (enc4 != 64) {\n            output = output + String.fromCharCode(chr3);\n        }\n\n        chr1 = chr2 = chr3 = \"\";\n        enc1 = enc2 = enc3 = enc4 = \"\";\n\n    } while (i < input.length);\n\n    return unescape(output);\n\n}\n\nfunction encodeHex(input) {\n    var hex = \"\";\n\n    for (i = 0; i < input.length; i++)\n        hex += ('00' + input.charCodeAt(i).toString(16))\n        .slice(-2);\n\n    return hex;\n}\nvar newMsg = {};\nnewMsg.app_id = msg.app_id;\nnewMsg.dev_id = msg.dev_id;\n\nif (msg.hasOwnProperty('ultimoUplink') && msg\n    .ultimoUplink == 'CS_new') {\n    newMsg.hardware_serial = encodeHex(decode64(msg\n        .hardware_serial));\n    msg.infoDownlink.hardware_serial = encodeHex(decode64(\n        msg.infoDownlink.hardware_serial));\n    msg.ultimoUplink = \"CS\";\n} else {\n    newMsg.hardware_serial = msg.hardware_serial;\n}\n\nnewMsg.counter = msg.counter;\nnewMsg.port = msg.port;\nnewMsg.metadata = msg.metadata;\nnewMsg.payload_raw = encodeHex(decode64(msg.payload_raw));\n\n//Inicio de la conversión de la carga de pago RAW en telemetrías\n//Ejemplo de carga de pago 02680F10FFC70D530FB36300610377\n\n/*\n{\n  \"ALARM_status\": false,\n  \"BatV\": 4.016,\n  \"FW\": 153,\n  \"LON\": \"ON\",\n  \"Latitude\": 40.374024,\n  \"Longitude\": -3.731911,\n  \"MD\": \"Move\",\n  \"Pitch\": 8.91,\n  \"Roll\": 0.47\n}\n*/\n// GPS coordinates; signed 32 bits integer, MSB; unit: Â°\n// When power is low (<2.84v), GPS wonâ€™t be able to get location\n// info and GPS feature will be disabled and the location field\n// will be filled with 0x0FFFFFFF, 0x0FFFFFFF.\nvar latitude = parseInt(newMsg.payload_raw.substring(0,\n    8), 16);\nif (latitude >= 0x80000000) {\n    latitude = latitude - 0x100000000;\n}\n\n\nnewMsg.latitude = latitude / 1000000.0;\nvar longitude = parseInt(newMsg.payload_raw.substring(8,\n    16), 16);\n\nif (longitude >= 0x80000000) {\n    longitude = longitude - 0x100000000;\n}\n\n\nnewMsg.longitude = longitude / 1000000.0;\n\nnewMsg.alarmStatus = (parseInt(newMsg.payload_raw.substring(\n        16, 18),\n    16) & 0x40)>>6;\nnewMsg.bat = (parseInt(newMsg.payload_raw.substring(16, 20),\n    16) & 0x3FFF) / 1000.0;\nnewMsg.movementDetection = (parseInt(newMsg.payload_raw\n    .substring(20, 22),\n    16) >> 6);\nnewMsg.ledStatus = ((parseInt(newMsg.payload_raw.substring(\n        20, 22),\n    16) & 0x20) == 32 ? 1 : 0);\nnewMsg.firmware = 150 + (parseInt(newMsg.payload_raw\n    .substring(20, 22),\n    16) & 0x1F);\nif (newMsg.payload_raw.length > 22) {\n    //Tiene activado el pitch y roll\n    newMsg.alabeo = ((parseInt(newMsg.payload_raw.substring(\n        22, 24), 16) << 24 >> 16) | parseInt(newMsg\n        .payload_raw.substring(24, 26), 16)) / 100.0;\n    newMsg.cabeceo = ((parseInt(newMsg.payload_raw\n            .substring(26, 28), 16) << 24 >> 16) |\n        parseInt(newMsg.payload_raw.substring(28, 30),\n            16)) / 100.0;\n}\n\n//Final de la conversión de la carga de pago RAW en telemetrías\n\n\nif (!msg.hasOwnProperty('ultimoUplink')) {\n    newMsg.ultimoUplink = \"TTN\";\n    newMsg.infoDownlink = {\n        \"downlink_url\": msg.downlink_url,\n        \"ttn_dev_id\": msg.dev_id\n    };\n} else {\n    newMsg.ultimoUplink = msg.ultimoUplink;\n    newMsg.infoDownlink = msg.infoDownlink;\n}\n\nreturn {\n    msg: newMsg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1022,
          "layoutY": 773
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "downlinkQueue",
        "debugMode": false,
        "configuration": {
          "clientAttributeNames": [],
          "sharedAttributeNames": [],
          "serverAttributeNames": [
            "downlinkQueue"
          ],
          "latestTsKeyNames": [],
          "tellFailureIfAbsent": true,
          "getLatestValueWithTs": false
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1934,
          "layoutY": 1058
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgAttributesNode",
        "name": "guardar",
        "debugMode": false,
        "configuration": {
          "scope": "SERVER_SCOPE"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 960,
          "layoutY": 1051,
          "description": "Si la telemetría anterior ya era -1 y el delegado no tiene autorizada esa telemetría, no vuelvo a actualizarla con -1"
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetTelemetryNode",
        "name": "anteriorTelemetria",
        "debugMode": false,
        "configuration": {
          "startInterval": 60,
          "endInterval": 1,
          "startIntervalPattern": "",
          "endIntervalPattern": "",
          "useMetadataIntervalPatterns": false,
          "startIntervalTimeUnit": "MINUTES",
          "endIntervalTimeUnit": "MINUTES",
          "fetchMode": "LAST",
          "orderBy": "ASC",
          "limit": 1000,
          "latestTsKeyNames": [
            "latitude",
            "longitude",
            "bat",
            "alarmStatus",
            "movementDetection",
            "ledStatus",
            "firmware",
            "roll",
            "pitch"
          ]
        }
      },
      {
        "additionalInfo": {
          "layoutX": 781,
          "layoutY": 1540
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "C[r/l]ear",
        "debugMode": false,
        "configuration": {
          "jsScript": "if (msg.alarma.umbralMinimo > msg.bat) {\n    return ['crear'];\n} else if(msg.alarma.umbralMinimo + msg.alarma.histeresisMinimo < msg.bat){\n    return ['clear'];\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 658,
          "layoutY": 901
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Everynet2TTN",
        "debugMode": false,
        "configuration": {
          "jsScript": "var b64array =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\nfunction decode64(input) {\n\n    var output = \"\";\n    var hex = \"\";\n    var chr1, chr2, chr3 = \"\";\n    var enc1, enc2, enc3, enc4 = \"\";\n    var i = 0;\n\n    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n    do {\n        enc1 = b64array.indexOf(input.charAt(i++));\n        enc2 = b64array.indexOf(input.charAt(i++));\n        enc3 = b64array.indexOf(input.charAt(i++));\n        enc4 = b64array.indexOf(input.charAt(i++));\n\n        chr1 = (enc1 << 2) | (enc2 >> 4);\n        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n        chr3 = ((enc3 & 3) << 6) | enc4;\n\n        output = output + String.fromCharCode(chr1);\n\n        if (enc3 != 64) {\n            output = output + String.fromCharCode(chr2);\n        }\n        if (enc4 != 64) {\n            output = output + String.fromCharCode(chr3);\n        }\n\n        chr1 = chr2 = chr3 = \"\";\n        enc1 = enc2 = enc3 = enc4 = \"\";\n\n    } while (i < input.length);\n\n    return unescape(output);\n\n}\n\nfunction encodeHex(input) {\n    var hex = \"\";\n\n    for (i = 0; i < input.length; i++)\n        hex += ('00' + input.charCodeAt(i).toString(16))\n        .slice(-2);\n\n    return hex;\n}\n\n//Sólo gestiono los uplinks no duplicados\nif (msg.params.duplicate === false) {\n\n    /*FORMATO EVERYNET ABP\n    {\n    \"type\": \"uplink\",\n    \"meta\": {\n        \"network\": \"f2108cf9ef0647b291e07e708b8f1812\",\n        \"packet_hash\": \"7a0a3591f78ca5170d189fc13df2be39\",\n        \"application\": \"70b3d57ed0024fa9\",\n        \"device_addr\": \"2601128e\",\n        \"time\": 1592045398.914028883,\n        \"device\": \"00098698e0267d50\",\n        \"packet_id\": \"a5bc7e3592c5eb4b581915cbe8e62545\",\n        \"gateway\": \"b0fd0b70063c0000\"\n    },\n    \"params\": {\n        \"rx_time\": 1592045398.8111801147,\n        \"port\": 1,\n        \"duplicate\": false,\n        \"counter_up\": 0,\n        \"payload\": \"AQIA8QIAAANnAPYEcyTIBWh1BgEA\",\n        \"encrypted_payload\": \"rxcVFaaTAWU4bM4ys885QgCRQXec\"\n    }\n}\n*/\n    /*FORMATO TTN\n    {\n    \"app_id\": \"iotopentech\",\n    \"dev_id\": \"iotopentech03\",\n    \"hardware_serial\": \"005640FFD76F9212\",\n    \"port\": 1,\n    \"counter\": 31092,\n    \"payload_raw\": \"AWYAAgEAA2hWBAIBVAVnAOsGcyTwBwIAAA\\u003d\\u003d\",\n    \"payload_fields\": {\n        \"analog_in_4\": 3.4,\n        \"analog_in_7\": 0,\n        \"barometric_pressure_6\": 945.6,\n        \"digital_out_2\": 0,\n        \"presence_1\": 0,\n        \"relative_humidity_3\": 43,\n        \"temperature_5\": 23.5\n    },\n    \"metadata\": {\n        \"time\": \"2020-06-13T11:25:49.770303106Z\",\n        \"frequency\": 868.5,\n        \"modulation\": \"LORA\",\n        \"data_rate\": \"SF7BW125\",\n        \"coding_rate\": \"4/5\",\n        \"gateways\": [{\n            \"gtw_id\": \"eui-3234333629005e00\",\n            \"timestamp\": 3734173416,\n            \"time\": \"\",\n            \"channel\": 2,\n            \"rssi\": -87,\n            \"snr\": 4,\n            \"rf_chain\": 0\n        }]\n    },\n    \"downlink_url\": \"https://integrations.thethingsnetwork.org/ttn-eu/api/v2/down/iotopentech/myiotopentech_integration?key\\u003dttn-account-v2.hLI6TVUdL4uPkXgUECKvvnDlLm2nvlSSj24ciHOth_Q\"\n}\n*/\n\n\n    var newMsg = {};\n    newMsg.app_id = msg.meta.application;\n    newMsg.dev_id = msg.meta.device_addr;\n    newMsg.hardware_serial = msg.meta.device;\n    newMsg.counter = msg.params.counter_up;\n    newMsg.port = msg.params.port;\n    //newMsg.payload_raw = encodeHex(decode64(msg.params.payload));\n    newMsg.payload_raw = msg.params\n        .payload;\n    /*\n    var comodin_payload_raw = newMsg.payload_raw;\n    //Creo el decodificador LPP\n    newMsg.payload_fields = {};\n\n    while (comodin_payload_raw.length > 4) {\n        switch (comodin_payload_raw.substring(2, 4)) {\n            case \"00\":\n                newMsg.payload_fields['digital_in_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 6),\n                        16);\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(6);\n                break;\n            case \"01\":\n                newMsg.payload_fields['digital_out_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 6),\n                        16);\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(6);\n                break;\n            case \"02\":\n                newMsg.payload_fields['analog_in_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 8),\n                        16) / 100.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(8);\n                break;\n            case \"03\":\n                newMsg.payload_fields['analog_out_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 8),\n                        16) / 100.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(8);\n                break;\n            case \"65\":\n                newMsg.payload_fields['luminosity_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 8),\n                        16);\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(8);\n                break;\n            case \"65\":\n                newMsg.payload_fields['presence_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 6),\n                        16);\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(6);\n                break;\n            case \"67\":\n                newMsg.payload_fields['temperature_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 8),\n                        16) / 10.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(8);\n                break;\n            case \"68\":\n                newMsg.payload_fields['relative_humidity_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 6),\n                        16) / 2.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(6);\n                break;\n            case \"73\":\n                newMsg.payload_fields[\n                        'barometric_pressure_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)] =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 8),\n                        16) / 10.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(8);\n                break;\n            case \"71\":\n                newMsg.payload_fields['accelerometer_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)].x =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 8),\n                        16) / 1000.0;\n                newMsg.payload_fields['accelerometer_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)].y =\n                    parseInt(\n                        comodin_payload_raw.substring(8,\n                            12),\n                        16) / 1000.0;\n                newMsg.payload_fields['accelerometer_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)].z =\n                    parseInt(\n                        comodin_payload_raw.substring(12,\n                            16),\n                        16) / 1000.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(16);\n                break;\n            case \"86\":\n                newMsg.payload_fields['gyrometer_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)].x =\n                    parseInt(\n                        comodin_payload_raw.substring(4, 8),\n                        16) / 100.0;\n                newMsg.payload_fields['gyrometer_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)].y =\n                    parseInt(\n                        comodin_payload_raw.substring(8,\n                            12),\n                        16) / 100.0;\n                newMsg.payload_fields['gyrometer_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)].z =\n                    parseInt(\n                        comodin_payload_raw.substring(12,\n                            16),\n                        16) / 100.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(16);\n                break;\n            case \"88\":\n                newMsg.payload_fields['gps_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)]\n                    .latitude =\n                    parseInt(\n                        comodin_payload_raw.substring(4,\n                        10),\n                        16) / 10000.0;\n                newMsg.payload_fields['gps_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)]\n                    .longitude =\n                    parseInt(\n                        comodin_payload_raw.substring(10,\n                            16),\n                        16) / 10000.0;\n                newMsg.payload_fields['gps_' +\n                        parseInt(comodin_payload_raw\n                            .substring(0, 2), 16)]\n                    .altitude =\n                    parseInt(\n                        comodin_payload_raw.substring(16,\n                            22),\n                        16) / 100.0;\n                comodin_payload_raw = comodin_payload_raw\n                    .substring(22);\n                break;\n        }\n    }\n*/\n\n    newMsg.metadata = {\n        'gateway': msg.meta.gateway,\n        'network': msg.meta.network\n    };\n\n    newMsg.ultimoUplink = \"Everynet\";\n    newMsg.infoDownlink = {};\n    return {\n        msg: newMsg,\n        metadata: metadata,\n        msgType: msgType\n    };\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 2164,
          "layoutY": 771
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgAttributesNode",
        "name": "guardar",
        "debugMode": false,
        "configuration": {
          "scope": "SERVER_SCOPE"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 413,
          "layoutY": 194
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "uuid",
        "debugMode": false,
        "configuration": {
          "jsScript": "msg.uuid=metadata.idEntidad;\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1860,
          "layoutY": 351
        },
        "type": "org.thingsboard.rule.engine.transform.TbChangeOriginatorNode",
        "name": "delegado",
        "debugMode": false,
        "configuration": {
          "originatorSource": "RELATED",
          "relationsQuery": {
            "direction": "FROM",
            "maxLevel": 1,
            "filters": [
              {
                "relationType": "${idDelegadoActual}",
                "entityTypes": [
                  "DEVICE"
                ]
              }
            ],
            "fetchLastLevelOnly": false
          }
        }
      },
      {
        "additionalInfo": {
          "layoutX": 744,
          "layoutY": 426
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "eliminar ___ultimoDownlink",
        "debugMode": false,
        "configuration": {
          "jsScript": "var ultimoDownlink = msg.___ultimoDownlink;\nif (metadata.hasOwnProperty(\"ss____atributosCompartidos\")) {\n    var atributosCompartidos = JSON.parse(metadata\n        .ss____atributosCompartidos);\n    //Si el atributo compartido tuviese como valor un JSON, habría que tratarlo\n    //Los números, llegan como cadenas\n    if(isNaN(metadata\n        .valorAtributoCompartido)){\n    atributosCompartidos[ultimoDownlink] = metadata\n        .valorAtributoCompartido;\n        }else{\n            atributosCompartidos[ultimoDownlink] = parseFloat(metadata\n        .valorAtributoCompartido);\n        }\n} else {\n    var atributosCompartidos = {};\n    atributosCompartidos[ultimoDownlink] = metadata\n        .valorAtributoCompartido;\n}\n\nreturn {\n    msg: {\n        '___atributosCompartidos': atributosCompartidos\n    },\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1557,
          "layoutY": 23
        },
        "type": "org.thingsboard.rule.engine.transform.TbChangeOriginatorNode",
        "name": "delegador",
        "debugMode": false,
        "configuration": {
          "originatorSource": "RELATED",
          "relationsQuery": {
            "direction": "TO",
            "maxLevel": 1,
            "filters": [
              {
                "relationType": "${idEntidad}",
                "entityTypes": [
                  "DEVICE"
                ]
              },
              {
                "relationType": null,
                "entityTypes": []
              }
            ],
            "fetchLastLevelOnly": false
          }
        }
      },
      {
        "additionalInfo": {
          "layoutX": 482,
          "layoutY": 341
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "___atributosCompartidos",
        "debugMode": false,
        "configuration": {
          "clientAttributeNames": [],
          "sharedAttributeNames": [],
          "serverAttributeNames": [
            "___atributosCompartidos"
          ],
          "latestTsKeyNames": [],
          "tellFailureIfAbsent": false,
          "getLatestValueWithTs": false
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1861,
          "layoutY": 209
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "delegados?",
        "debugMode": false,
        "configuration": {
          "clientAttributeNames": [],
          "sharedAttributeNames": [],
          "serverAttributeNames": [
            "delegados"
          ],
          "latestTsKeyNames": [],
          "tellFailureIfAbsent": true,
          "getLatestValueWithTs": false
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1070,
          "layoutY": 1450
        },
        "type": "org.thingsboard.rule.engine.action.TbClearAlarmNode",
        "name": "Clear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 120,
          "layoutY": 1247
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "Alarmas",
        "debugMode": false,
        "configuration": {
          "jsScript": "var respuesta = [];\nif (metadata.hasOwnProperty('ss___alarma_'+metadata.deviceType)) {\n    var obj = JSON.parse(metadata['ss___alarma_'+metadata.deviceType]);\n    \n    if (obj.hasOwnProperty('bat')&&msg.hasOwnProperty('bat')&&obj.bat.enable===true) {\n        respuesta.push('bat');\n    }\n    if (obj.hasOwnProperty('geocercado')&&msg.hasOwnProperty('latitude')&&msg.hasOwnProperty('longitude')&&obj.geocercado.enable===true) {\n        respuesta.push('geocercado');\n    }\n    if (obj.hasOwnProperty('alarmStatus')&&msg.hasOwnProperty('alarmStatus')&&obj.alarmStatus.enable===true) {\n        respuesta.push('alarmStatus');\n    }\n    if (obj.hasOwnProperty('cabeceo')&&msg.hasOwnProperty('pitch')&&obj.cabeceo.enable===true) {\n        respuesta.push('cabeceo');\n    }\n    if (obj.hasOwnProperty('alabeo')&&msg.hasOwnProperty('roll')&&obj.alabeo.enable===true) {\n        respuesta.push('alabeo');\n    }\n    \n    //La alarma de inactividad es genérica para todos los tipos de dispositivos y no requiere modificación\n    if (obj.hasOwnProperty('inactividad')&&(msgType=='INACTIVITY_EVENT'||msgType=='ACTIVITY_EVENT')&&obj.inactividad.enable===true) {\n        \n        respuesta.push('inactividad');\n    }\n}\n\nreturn respuesta;"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1070,
          "layoutY": 1389
        },
        "type": "org.thingsboard.rule.engine.action.TbCreateAlarmNode",
        "name": "Crear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;",
          "severity": "CRITICAL",
          "propagate": true,
          "useMessageAlarmData": false,
          "relationTypes": [
            "Contains"
          ]
        }
      },
      {
        "additionalInfo": {
          "layoutX": 518,
          "layoutY": 1417
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "tipoAlarma",
        "debugMode": false,
        "configuration": {
          "jsScript": "var obj = JSON.parse(metadata['ss___alarma_' + metadata\n    .deviceType]);\n\nmsg.alarma = obj.alarmStatus;\n//Cargo los datos de interés en los metadatos para construir los mensaje de alarma\nmetadata.alarmStatus = msg.alarmStatus;\nmetadata.alarmaActual = JSON.stringify(obj.alarmStatus);\nif (msg.alarma.trigger == 'Si') {\n    metadata.tipoAlarma = \"Alarma activada\";\n\n} else if (msg.alarma.trigger == 'No') {\n    metadata.tipoAlarma = \"Alarma desactivada\";\n}\n\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1623,
          "layoutY": 1048
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "tooltip + downlink + latitude/longitude",
        "debugMode": false,
        "configuration": {
          "jsScript": "// unix timestamp\nvar ts = metadata.ts;\n\n// convert unix timestamp to milliseconds\nvar ts_ms = ts * 1;\n\n// initialize new Date object\nvar date_ob = new Date(ts_ms);\n\n// year as 4 digits (YYYY)\nvar year = date_ob.getFullYear();\n\n// month as 2 digits (MM)\nvar month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);\n\n// date as 2 digits (DD)\nvar date = (\"0\" + date_ob.getDate()).slice(-2);\n\n// hours as 2 digits (hh)\nvar hours = (\"0\" + date_ob.getHours()).slice(-2);\n\n// minutes as 2 digits (mm)\nvar minutes = (\"0\" + date_ob.getMinutes()).slice(-2);\n\n// seconds as 2 digits (ss)\nvar seconds = (\"0\" + date_ob.getSeconds()).slice(-2);\n\n//Inicio de construcción del tooltip\nvar newMsg = {};\nif(msg.latitude != undefined && msg.longitude != undefined){\n    newMsg.__latitude=msg.latitude;\n    newMsg.__longitude=msg.longitude;\n}\nnewMsg.tooltip = \"<b>\" + year + \"-\" + month + \"-\" + date +\n    \" \" + hours + \":\" + minutes + \":\" + seconds +\n    \"</b><br/>\" + \"<b>Lat: </b>\" + (msg\n        .latitude == undefined ? 'No delegado' : msg\n        .latitude) + \n    \"<br/><b>Lon: </b>\" + (msg.longitude ==\n        undefined ? 'No delegado' : msg.longitude);\n        newMsg.tooltip += \"<br/><b>Alarma: </b>\" + (msg\n    .alarmStatus == undefined ? 'No delegado' : (msg.alarmStatus==1?'Sí':'No'));\nnewMsg.tooltip += \"<br/><b>Batería: </b>\" + (msg\n    .bat == undefined ? 'No delegado' : (msg.bat) +\n    \" V\");\n//Final de construcción del tooltip\n\nnewMsg.ultimoUplink = msg.ultimoUplink;\nnewMsg.infoDownlink = msg.infoDownlink;\n\nmsgType = \"POST_ATTRIBUTES_REQUEST\";\nreturn {\n    msg: newMsg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1339,
          "layoutY": 1650
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha generado una alarma de tipo \"+metadata.tipoAlarma+\". El ángulo de cabeceo es \"+metadata.pitch+\" º y el umbral es de \"+metadata.umbralMaximo+\" º.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value2\":\"'+metadata.pitch+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1344,
          "layoutY": 1815
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha anulado una alarma de tipo \"+metadata.tipoAlarma+\"El ángulo de cabeceo es \"+metadata.pitch+\" º y el umbral es de \"+metadata.umbralMinimo+\" º.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value2\":\"'+metadata.pitch+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma anulada\"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};\n\n\n"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 741,
          "layoutY": 771
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "esDelegado?",
        "debugMode": false,
        "configuration": {
          "jsScript": "if(metadata.hasOwnProperty('ss_esDelegado')&& metadata.ss_esDelegado==\"true\" ){\n    return ['si'];\n}else{\n    return ['no'];\n}\n"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 841,
          "layoutY": 109
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsFilterNode",
        "name": "autorizacion?",
        "debugMode": false,
        "configuration": {
          "jsScript": "if (metadata.hasOwnProperty('ss_delegacion')){\n    var delegacion=JSON.parse(metadata.ss_delegacion);\n    if(delegacion.hasOwnProperty(msg.___ultimoDownlink)&&delegacion[msg.___ultimoDownlink]===true){\n        return true;\n    }else{\n        return false;\n    }\n}else{\n    return false;\n}\n"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 689,
          "layoutY": 195
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "esDelegado?",
        "debugMode": false,
        "configuration": {
          "jsScript": "if(metadata.hasOwnProperty('ss_esDelegado')&& metadata.ss_esDelegado==\"true\" ){\n    return ['si'];\n}else{\n    return ['no'];\n}\n"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 522,
          "layoutY": 1541
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "tipoAlarma",
        "debugMode": false,
        "configuration": {
          "jsScript": "JSON.parse(metadata['ss___alarma_' + metadata.deviceType]);\n\nmsg.alarma = obj.bat;\n//Cargo los datos de interés en los metadatos para construir los mensaje de alarma\nmetadata.bat = msg.bat;\nmetadata.alarmaActual = JSON.stringify(obj.bat);\nmetadata.tipoAlarma = \"Nivel bajo de batería\";\nmetadata.umbralMinimo = msg.alarma.umbralMinimo;\nmetadata.histeresisMinimo = msg.alarma.histeresisMinimo;\n\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1074,
          "layoutY": 1574
        },
        "type": "org.thingsboard.rule.engine.action.TbClearAlarmNode",
        "name": "Clear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 675,
          "layoutY": 1205,
          "description": "He tenido que poner esto porque parece que TB no actualiza el nombre del dispositivo cuando lo cambiamos desde el panel Configuración"
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetOriginatorFieldsNode",
        "name": "name?",
        "debugMode": false,
        "configuration": {
          "fieldsMapping": {
            "name": "deviceName"
          }
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1859,
          "layoutY": 138
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgAttributesNode",
        "name": "guardar",
        "debugMode": false,
        "configuration": {
          "scope": "SERVER_SCOPE"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1860,
          "layoutY": 275,
          "description": "Si no está reclamado, puede haber problemas porque no tiene asignado un customer. Por eso sólo actualizo los atributos si el delegado está reclamado. Si no lo está, tendría que hacerlo en el momento de la reclamación."
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "cargar msg y delegados en metadata",
        "debugMode": false,
        "configuration": {
          "jsScript": "var delegadosArray = JSON.parse(metadata.ss_delegados);\nvar newDelegados = [];\nfor (var i = 0; i < delegadosArray.length; i++) {\n    if (delegadosArray[i].reclamado === true &&\n            delegadosArray[i].delegaciones.hasOwnProperty(\n            msg.___ultimoDownlink) && delegadosArray[i]\n        .delegaciones[msg.___ultimoDownlink] === true) {\n        newDelegados.push(delegadosArray[i]);\n    }\n}\ndelegadosArray = newDelegados;\n//Extraigo el primer delegado para cambiar a él\nvar delegadoActual = delegadosArray.shift();\nmetadata.idDelegadoActual = delegadoActual.id;\nmetadata.msgOriginal = JSON.stringify(msg);\nmetadata.delegadosArray = JSON.stringify(delegadosArray);\nmetadata.delegadoActual = JSON.stringify(delegadoActual);\nmetadata.valorAtributoCompartido=msg.___atributosCompartidos[msg.___ultimoDownlink];\n\nreturn {\n    msg: {'___ultimoDownlink':msg.___ultimoDownlink},\n    metadata: metadata,\n    msgType: \"POST_TELEMETRY_REQUEST\"\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 96,
          "layoutY": 250
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "esDelegado/delegacion",
        "debugMode": false,
        "configuration": {
          "clientAttributeNames": [],
          "sharedAttributeNames": [],
          "serverAttributeNames": [
            "esDelegado",
            "delegacion"
          ],
          "latestTsKeyNames": [],
          "tellFailureIfAbsent": false,
          "getLatestValueWithTs": false
        }
      },
      {
        "additionalInfo": {
          "layoutX": 992,
          "layoutY": 193
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "operaciones",
        "debugMode": true,
        "configuration": {
          "jsScript": "switch (msg.___ultimoDownlink) {\n    case 'TDC':\n        return ['guardarAtributo', 'TDC'];\n        break;\n    case 'RESET':\n        return ['guardarAtributo', 'RESET'];\n        break;\n    case 'CFM':\n        return ['guardarAtributo', 'CFM'];\n        break;\n    case 'CHE':\n        return ['guardarAtributo', 'CHE'];\n        break;\n    case 'EXIT_ALARM':\n        return ['guardarAtributo', 'EXIT_ALARM'];\n        break;\n    case 'KAT':\n        return ['guardarAtributo', 'KAT'];\n        break;\n    case 'MD':\n        return ['guardarAtributo', 'MD'];\n        break;\n    \n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 442,
          "layoutY": 824
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "TTN/CS/Everynet?",
        "debugMode": false,
        "configuration": {
          "jsScript": "if (msg.hasOwnProperty('type') && msg.type == \"uplink\") {\r\n    return ['everynetUplink'];\r\n} else if (msg.hasOwnProperty('type') && msg.type ==\r\n    \"downlink_request\") {\r\n    return ['everynetDownlink'];\r\n} else if (msg.hasOwnProperty('payload_raw') &&\r\n    msg.hasOwnProperty('metadata') &&\r\n    msg.hasOwnProperty('dev_id')) {\r\n    return ['TTN'];\r\n} else if (msg.hasOwnProperty('data') &&\r\n    msg.hasOwnProperty('rxInfo') &&\r\n    msg.hasOwnProperty('txInfo') &&\r\n    msg.hasOwnProperty('deviceName')) {\r\n    return ['CS'];\r\n} else if (msg.hasOwnProperty('___ultimoDownlink') &&\r\n    msg.___ultimoDownlink !== '') {\r\n    return ['downlink'];\r\n}\r\n\r\n/*El formato de CS con el nuevo JSON marshaller\r\n{\r\n    \"applicationID\": 6,\r\n    \"applicationName\": \"LDS02\",\r\n    \"deviceName\": \"LDS01\",\r\n    \"devEUI\": \"qEBBAAGB+X8=\",\r\n    \"rxInfo\": [{\r\n        \"gatewayID\": \"uCfr//6my+4=\",\r\n        \"rssi\": -73,\r\n        \"loRaSNR\": 7,\r\n        \"channel\": 2,\r\n        \"rfChain\": 1,\r\n        \"board\": 0,\r\n        \"antenna\": 0,\r\n        \"location\": {\r\n            \"latitude\": 0,\r\n            \"longitude\": 0,\r\n            \"altitude\": 0,\r\n            \"source\": \"UNKNOWN\",\r\n            \"accuracy\": 0\r\n        },\r\n        \"fineTimestampType\": \"NONE\",\r\n        \"context\": \"WAixqw==\",\r\n        \"uplinkID\": \"yNrsc7btS8CljKLG9TiySw==\",\r\n        \"crcStatus\": \"CRC_OK\"\r\n    }],\r\n    \"txInfo\": {\r\n        \"frequency\": 868500000,\r\n        \"modulation\": \"LORA\",\r\n        \"loRaModulationInfo\": {\r\n            \"bandwidth\": 125,\r\n            \"spreadingFactor\": 7,\r\n            \"codeRate\": \"4/5\",\r\n            \"polarizationInversion\": false\r\n        }\r\n    },\r\n    \"adr\": true,\r\n    \"dr\": 5,\r\n    \"fCnt\": 11,\r\n    \"fPort\": 10,\r\n    \"data\": \"CyIBAAAFAAAB\",\r\n    \"objectJSON\": \"{\\\"BAT_V\\\":2.85,\\\"DOOR_OPEN_STATUS\\\":0,\\\"DOOR_OPEN_TIMES\\\":5,\\\"LAST_DOOR_OPEN_DURATION\\\":1,\\\"MOD\\\":\\\"Door sensor\\\"}\",\r\n    \"tags\": {},\r\n    \"confirmedUplink\": false,\r\n    \"devAddr\": \"ASVKiQ==\"\r\n}\r\n*/\r\n\r\n/*El formato legacy json de CS\r\n{\r\n    \"applicationID\": 6,\r\n    \"applicationName\": \"LDS02\",\r\n    \"deviceName\": \"LDS01\",\r\n    \"devEUI\": \"a84041000181f97f\",\r\n    \"rxInfo\": [{\r\n        \"gatewayID\": \"b827ebfffea6cbee\",\r\n        \"uplinkID\": \"37f815f5-e49f-42fe-b379-ff8c38c0d2e9\",\r\n        \"name\": \"jfmateos_rak831\",\r\n        \"rssi\": -75,\r\n        \"loRaSNR\": 7.25,\r\n        \"location\": {\r\n            \"latitude\": 0,\r\n            \"longitude\": 0,\r\n            \"altitude\": 0\r\n        }\r\n    }],\r\n    \"txInfo\": {\r\n        \"frequency\": 868500000,\r\n        \"dr\": 5\r\n    },\r\n    \"adr\": true,\r\n    \"fCnt\": 14,\r\n    \"fPort\": 10,\r\n    \"data\": \"iygBAAAHAAAA\",\r\n    \"object\": {\r\n        \"BAT_V\": 2.856,\r\n        \"DOOR_OPEN_STATUS\": 1,\r\n        \"DOOR_OPEN_TIMES\": 7,\r\n        \"LAST_DOOR_OPEN_DURATION\": 0,\r\n        \"MOD\": \"Door sensor\"\r\n    }\r\n}*/"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1853,
          "layoutY": 769
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "msg",
        "debugMode": false,
        "configuration": {
          "jsScript": "\n    return {\n        msg: {\"downlinkQueue\":JSON.parse(metadata.ss_downlinkQueue)},\n        metadata: metadata,\n        msgType: \"POST_ATTRIBUTES_REQUEST\"\n    };\n"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1257,
          "layoutY": 1046
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "filtrar telemetrias delegado",
        "debugMode": false,
        "configuration": {
          "jsScript": "var newMsg = {};\nif (metadata.hasOwnProperty('delegadoActual') && metadata\n    .delegadoActual.length > 0) {\n    //Es un delegadoActual\n    var delegadoActual = JSON.parse(metadata\n        .delegadoActual).delegaciones;\n    for (var telemetria in msg) {\n        if (delegadoActual.hasOwnProperty(telemetria) &&\n            delegadoActual[telemetria] === true) {\n            newMsg[telemetria] = msg[telemetria];\n        } else {\n            //Si no tiene la delegación o es false\n            if (!metadata.hasOwnProperty(telemetria) ||\n                metadata[telemetria] != \"No delegado\") {\n                newMsg[telemetria] = \"No delegado\";\n            }\n        }\n    }\n\n} else {\n    newMsg = msg;\n}\nreturn {\n    msg: newMsg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1571,
          "layoutY": 767
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgAttributesNode",
        "name": "guardar",
        "debugMode": false,
        "configuration": {
          "scope": "SHARED_SCOPE"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1291,
          "layoutY": 774
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "msg",
        "debugMode": false,
        "configuration": {
          "jsScript": "var downlinkQueue = JSON.parse(metadata.ss_downlinkQueue);\nif (downlinkQueue.length > 0) {\n    var downlink = downlinkQueue.shift();\n    //La meto en metadata para luego guardarla en los atributos del servidor\n    metadata.ss_downlinkQueue=JSON.stringify(downlinkQueue);\n    var newMsg = {\n        \"meta\": msg.meta,\n        \"params\": {\n            \"counter_down\": msg.params.counter_down,\n            \"payload\": downlink.payload,\n            \"port\": downlink.port,\n            \"queue_if_late\": true\n        },\n        \"type\": \"downlink_response\"\n    };\n    return {\n        msg: newMsg,\n        metadata: metadata,\n        msgType: \"POST_ATTRIBUTES_REQUEST\"\n    };\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 785,
          "layoutY": 1644
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "C[r/l]ear",
        "debugMode": false,
        "configuration": {
          "jsScript": "if (metadata.pitch> msg.alarma.umbralMaximo) {\n    return ['crear'];\n} else if( metadata.pitch < msg.alarma.umbralMaximo - msg.alarma.histeresisMaximo){\n    return ['clear'];\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1075,
          "layoutY": 1695
        },
        "type": "org.thingsboard.rule.engine.action.TbClearAlarmNode",
        "name": "Clear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1075,
          "layoutY": 1634
        },
        "type": "org.thingsboard.rule.engine.action.TbCreateAlarmNode",
        "name": "Crear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;",
          "severity": "CRITICAL",
          "propagate": true,
          "useMessageAlarmData": false,
          "relationTypes": [
            "Contains"
          ]
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1299,
          "layoutY": 516
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "prepararDownlink",
        "debugMode": true,
        "configuration": {
          "jsScript": "var payload = {};\n\npayload.port = 2; //cualquiera\npayload.confirmed = false;\npayload.schedule = 'replace';\n\nvar pad = '00';\nvar MD = msg.___atributosCompartidos.MD;\n\nswitch (MD) {\n    case 'Deshabilitada':\n        payload.payload_raw = \"A500\";\n        break;\n    case 'Movimiento':\n        payload.payload_raw = \"A501\";\n        break;\n    case 'Colision':\n        payload.payload_raw = \"A502\";\n        break;\n    case 'Personalizada':\n        var threshold = parseInt(msg.___atributosCompartidos\n            .MD_THRESHOLD).toString(16);\n        var odr = parseInt(msg.___atributosCompartidos\n            .MD_ODR).toString(16);\n        payload.payload_raw = \"A5030\";\n        payload.payload_raw += pad.substring(0, pad.length -\n            threshold.length) + threshold;\n        payload.payload_raw += pad.substring(0, pad.length -\n            odr.length) + odr;\n        break;\n\n}\n\n\nmsg = {\n    \"payload\": JSON.stringify(payload),\n    \"uuid\": msg.uuid\n};\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1300,
          "layoutY": 465
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "prepararDownlink",
        "debugMode": false,
        "configuration": {
          "jsScript": "var payload = {};\n\npayload.port = 2; \npayload.confirmed = false;\npayload.schedule = 'replace';\n\n\npayload.payload_raw = \"0x0201\";\n\nmsg = {\n    \"payload\": JSON.stringify(payload),\n    \"uuid\": msg.uuid\n};\n\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1301,
          "layoutY": 408
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "prepararDownlink",
        "debugMode": false,
        "configuration": {
          "jsScript": "var payload = {};\n\npayload.port = 2; //cualquiera\npayload.confirmed = false;\npayload.schedule = 'replace';\n\nvar valor = parseInt(msg.___atributosCompartidos.KAT)\n    .toString(16);\nvar pad = '000000';\n\npayload.payload_raw = \"A9\" + pad.substring(0, pad\n    .length -\n    valor.length) + valor;\nmsg = {\n    \"payload\": JSON.stringify(payload),\n    \"uuid\": msg.uuid\n};\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1304,
          "layoutY": 355
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "prepararDownlink",
        "debugMode": false,
        "configuration": {
          "jsScript": "var payload = {};\n\npayload.port = 2; //cualquiera\npayload.confirmed = false;\npayload.schedule = 'replace';\n\n\npayload.payload_raw = \"0x070\"+msg.___atributosCompartidos.CHE;\n\nmsg = {\n    \"payload\": JSON.stringify(payload),\n    \"uuid\": msg.uuid\n};\n\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1351,
          "layoutY": 2036
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha anulado una alarma de tipo \"+metadata.tipoAlarma+\"El ángulo de alabeo es \"+metadata.roll+\" º y el umbral es de \"+metadata.umbralMinimo+\" º.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value2\":\"'+metadata.roll+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma anulada\"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};\n\n\n"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1346,
          "layoutY": 1871
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha generado una alarma de tipo \"+metadata.tipoAlarma+\". El ángulo de alabeo es \"+metadata.roll+\" º y el umbral es de \"+metadata.umbralMaximo+\" º.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value2\":\"'+metadata.roll+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 529,
          "layoutY": 1980
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "tipo alarma",
        "debugMode": false,
        "configuration": {
          "jsScript": "var obj = JSON.parse(metadata['ss___alarma_' + metadata\n    .deviceType]);\n\n//Cargamos la alarma en el mensaje para que el nodo siguiente\n//pueda ejecutar la \"lógica de negocio\"\nmsg.alarma = obj.alabeo;\n\n//Cargamos los datos de interés en los metadatos para construir los mensajes \n//de alarma tras el nodo que genera/borrar la alarma\nmetadata.roll = msg.roll;\n//alarmaActual se usa en la cadena de reglas de Notificaciones\n//Para extraer información. No puede ir por msg porque se\n//pierde en el nodo de generación de alarma\nmetadata.alarmaActual = JSON.stringify(obj.alabeo);\nmetadata.tipoAlarma =\n\"Ángulo de alabeo inferior al umbral mínimo\";\nmetadata.umbralMinimo = msg.alarma.umbralMinimo;\nmetadata.umbralMaximo = msg.alarma.umbralMaximo;\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 524,
          "layoutY": 1867
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "tipo alarma",
        "debugMode": false,
        "configuration": {
          "jsScript": "var obj = JSON.parse(metadata['ss___alarma_' + metadata\n    .deviceType]);\n\n//Cargamos la alarma en el mensaje para que el nodo siguiente\n//pueda ejecutar la \"lógica de negocio\"\nmsg.alarma = obj.alabeo;\n\n//Cargamos los datos de interés en los metadatos para construir los mensajes \n//de alarma tras el nodo que genera/borrar la alarma\nmetadata.roll = msg.roll;\n//alarmaActual se usa en la cadena de reglas de Notificaciones\n//Para extraer información. No puede ir por msg porque se\n//pierde en el nodo de generación de alarma\nmetadata.alarmaActual = JSON.stringify(obj.alabeo);\nmetadata.tipoAlarma =\n\"Ángulo de alabeo superior al umbral máximo\";\nmetadata.umbralMinimo = msg.alarma.umbralMinimo;\nmetadata.umbralMaximo = msg.alarma.umbralMaximo;\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1346,
          "layoutY": 1923
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha anulado una alarma de tipo \"+metadata.tipoAlarma+\"El ángulo de alabeo es \"+metadata.roll+\" º y el umbral es de \"+metadata.umbralMaximo+\" º.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value2\":\"'+metadata.roll+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma anulada\"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};\n\n\n"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1351,
          "layoutY": 1984
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha generado una alarma de tipo \"+metadata.tipoAlarma+\". El ángulo de alabeo es \"+metadata.roll+\" º y el umbral es de \"+metadata.umbralMinimo+\" º.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value2\":\"'+metadata.roll+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1087,
          "layoutY": 1968
        },
        "type": "org.thingsboard.rule.engine.action.TbCreateAlarmNode",
        "name": "Crear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;",
          "severity": "CRITICAL",
          "propagate": true,
          "useMessageAlarmData": false,
          "relationTypes": [
            "Contains"
          ]
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1087,
          "layoutY": 2029
        },
        "type": "org.thingsboard.rule.engine.action.TbClearAlarmNode",
        "name": "Clear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 797,
          "layoutY": 1978
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "C[r/l]ear",
        "debugMode": false,
        "configuration": {
          "jsScript": "if (metadata.roll< msg.alarma.umbralMinimo) {\n    return ['crear'];\n} else if( metadata.roll > msg.alarma.umbralMinimo + msg.alarma.histeresisMinimo){\n    return ['clear'];\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1082,
          "layoutY": 1855
        },
        "type": "org.thingsboard.rule.engine.action.TbCreateAlarmNode",
        "name": "Crear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;",
          "severity": "CRITICAL",
          "propagate": true,
          "useMessageAlarmData": false,
          "relationTypes": [
            "Contains"
          ]
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1082,
          "layoutY": 1916
        },
        "type": "org.thingsboard.rule.engine.action.TbClearAlarmNode",
        "name": "Clear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 792,
          "layoutY": 1865
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "C[r/l]ear",
        "debugMode": false,
        "configuration": {
          "jsScript": "if (metadata.rollroll> msg.alarma.umbralMaximo) {\n    return ['crear'];\n} else if( metadata.pitch < msg.alarma.umbralMaximo - msg.alarma.histeresisMaximo){\n    return ['clear'];\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 302,
          "layoutY": 2204
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "geocercado",
        "debugMode": false,
        "configuration": {
          "clientAttributeNames": [],
          "sharedAttributeNames": [],
          "serverAttributeNames": [
            "geocercado"
          ],
          "latestTsKeyNames": [],
          "tellFailureIfAbsent": true,
          "getLatestValueWithTs": false
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1358,
          "layoutY": 2299
        },
        "type": "org.thingsboard.rule.engine.action.TbCreateAlarmNode",
        "name": "Crear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;",
          "severity": "CRITICAL",
          "propagate": true,
          "useMessageAlarmData": false,
          "relationTypes": [
            "Contains"
          ]
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1623,
          "layoutY": 2299
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha generado una alarma de tipo \"+metadata.tipoAlarma+\". Sus coordenadas son Lat: \"+(metadata.latitude)+\", Lon:\"+(metadata.longitude)+\".\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value2\":\"'+(metadata.latitude)+'\",\"value3\":\"'+(metadata.longitude)+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1624,
          "layoutY": 2362
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha anulado una alarma de tipo \"+metadata.tipoAlarma+\". Sus coordenadas son Lat: \"+(metadata.latitude)+\", Lon:\"+(metadata.longitude)+\".\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value2\":\"'+(metadata.latitude)+'\",\"value3\":\"'+(metadata.longitude)+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma anulada \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1065,
          "layoutY": 2326
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "C[r/l]ear",
        "debugMode": false,
        "configuration": {
          "jsScript": "if(msg.alarma.trigger=='entrar'){\n        return ['clear'];\n}else if(msg.alarma.trigger=='salir'){\n        return ['crear'];\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1358,
          "layoutY": 2360
        },
        "type": "org.thingsboard.rule.engine.action.TbClearAlarmNode",
        "name": "Clear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 790,
          "layoutY": 2200
        },
        "type": "org.thingsboard.rule.engine.geo.TbGpsGeofencingActionNode",
        "name": "eventos geocercado",
        "debugMode": false,
        "configuration": {
          "latitudeKeyName": "latitude",
          "longitudeKeyName": "longitude",
          "fetchPerimeterInfoFromMessageMetadata": true,
          "perimeterType": null,
          "polygonsDefinition": null,
          "centerLatitude": null,
          "centerLongitude": null,
          "range": null,
          "rangeUnit": null,
          "minInsideDuration": 1,
          "minOutsideDuration": 1,
          "minInsideDurationTimeUnit": "MINUTES",
          "minOutsideDurationTimeUnit": "MINUTES"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1616,
          "layoutY": 2179
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha generado una alarma de tipo \"+metadata.tipoAlarma+\". Sus coordenadas son Lat: \"+(metadata.latitude)+\", Lon:\"+(metadata.longitude)+\".\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value2\":\"'+(metadata.latitude)+'\",\"value3\":\"'+(metadata.longitude)+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1617,
          "layoutY": 2242
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha anulado una alarma de tipo \"+metadata.tipoAlarma+\". Sus coordenadas son Lat: \"+(metadata.latitude)+\", Lon:\"+(metadata.longitude)+\".\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value2\":\"'+(metadata.latitude)+'\",\"value3\":\"'+(metadata.longitude)+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma anulada \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1058,
          "layoutY": 2206
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "C[r/l]ear",
        "debugMode": false,
        "configuration": {
          "jsScript": "if(msg.alarma.trigger=='entrar'){\n        return ['crear'];\n}else if(msg.alarma.trigger=='salir'){\n        return ['clear'];\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 555,
          "layoutY": 2208
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "tipoAlarma",
        "debugMode": false,
        "configuration": {
          "jsScript": "var obj = JSON.parse(metadata['ss___alarma_' + metadata\n    .deviceType]);\n\nmsg.alarma = obj.geocercado;\n//Cargo los datos de interés en los metadatos para construir los mensaje de alarma\nmetadata.latitude = msg.latitude;\nmetadata.longitude = msg.longitude;\n//El nodo de geocercado requiere una propiedad llamada perimeter\nmetadata.perimeter=metadata.ss___geocercado;\nmetadata.alarmaActual = JSON.stringify(obj.geocercado);\nif (msg.alarma.trigger == 'entrar') {\n    metadata.tipoAlarma = \"Entrada en geocercado\";\n\n} else if (msg.alarma.trigger == 'salir') {\n    metadata.tipoAlarma = \"Salida de geocercado\";\n}\n\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1351,
          "layoutY": 2179
        },
        "type": "org.thingsboard.rule.engine.action.TbCreateAlarmNode",
        "name": "Crear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;",
          "severity": "CRITICAL",
          "propagate": true,
          "useMessageAlarmData": false,
          "relationTypes": [
            "Contains"
          ]
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1351,
          "layoutY": 2240
        },
        "type": "org.thingsboard.rule.engine.action.TbClearAlarmNode",
        "name": "Clear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1614,
          "layoutY": 984
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgTimeseriesNode",
        "name": "save timeseries",
        "debugMode": false,
        "configuration": {
          "defaultTTL": 0
        }
      },
      {
        "additionalInfo": {
          "layoutX": 131,
          "layoutY": 348
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "es telemetria?",
        "debugMode": false,
        "configuration": {
          "jsScript": "if (msgType == 'POST_TELEMETRY_REQUEST') {\n    if (msg.hasOwnProperty('___ultimoDownlink') && !metadata.hasOwnProperty('delegadosArray') ) {\n        //Realmente sólo puede enviar el downlink el delegador (que no tiene el atributo delegadosArray)\n        return ['downlink'];\n     }else if (msg.hasOwnProperty('___ultimoDownlink')) {\n        return ['guardarAtributos'];\n    } else {\n        return ['telemetria'];\n    }\n} else if (msgType == 'INACTIVITY_EVENT' || msgType ==\n    'ACTIVITY_EVENT') {\n    return ['alarma'];\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 740,
          "layoutY": 501
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgAttributesNode",
        "name": "guardarAtributo",
        "debugMode": false,
        "configuration": {
          "scope": "SERVER_SCOPE"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 420,
          "layoutY": 963
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "Cargar alarmas",
        "debugMode": false,
        "configuration": {
          "clientAttributeNames": [],
          "sharedAttributeNames": [],
          "serverAttributeNames": [
            "__alarma_${deviceType}"
          ],
          "latestTsKeyNames": [],
          "tellFailureIfAbsent": true,
          "getLatestValueWithTs": false
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1312,
          "layoutY": 125
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "___atributosCompartidos",
        "debugMode": false,
        "configuration": {
          "clientAttributeNames": [],
          "sharedAttributeNames": [],
          "serverAttributeNames": [
            "___atributosCompartidos"
          ],
          "latestTsKeyNames": [],
          "tellFailureIfAbsent": false,
          "getLatestValueWithTs": false
        }
      },
      {
        "additionalInfo": {
          "layoutX": 777,
          "layoutY": 1416
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "C[r/l]ear",
        "debugMode": false,
        "configuration": {
          "jsScript": "if(msg.alarma.trigger=='Si'){\n    \n    if(msg.alarmStatus==1){\n        return ['crear'];\n    }else{\n        return ['clear'];\n    }\n}else if(msg.alarma.trigger=='No'){\n    if(msg.alarmStatus==0){\n        return ['crear'];\n    }else{\n        return ['clear'];\n    }\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1336,
          "layoutY": 1452
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "\nmetadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha anulado la alarma de tipo \"+metadata.tipoAlarma+\".\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value2\":\"'+(metadata.alarmStatus==1?'Alarma activada':'Alarma desactivada')+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma anulada \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 857,
          "layoutY": 874
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "CS2TTN",
        "debugMode": false,
        "configuration": {
          "jsScript": "var newMsg = {};\nnewMsg.app_id = msg.applicationName;\nnewMsg.dev_id = msg.deviceName;\n\nnewMsg.hardware_serial = msg.devEUI;\nnewMsg.adr = msg.adr;\nnewMsg.counter = msg.fCnt;\nnewMsg.port = msg.fPort;\nnewMsg.payload_raw = msg.data;\nvar newPayloadFields = msg.object;\n//Desafortunadamente el Cayenne Codec de CS es muy diferente al de TTN\n//No obstante, lo utilizaré porque aquí se hace una vez, pero si hubiera que\n//hacerlo en CS implicaría actuar sobre cada aplicación\n//\"object\": \"{\\\"analogInput\\\":{\\\"1\\\":2.74},\\\"digitalInput\\\":{\\\"2\\\":1,\\\"3\\\":0}}\"\n//\"payload_fields\": \"{\\\"analog_in_1\\\":2.75,\\\"digital_in_2\\\":1,\\\"digital_in_3\\\":0}\"\n/*\nnewMsg.payload_fields = {};\nfor (var key in newPayloadFields) {\n    var prefijo = \"\";\n    switch (key) {\n        case 'analogInput':\n            prefijo = 'analog_in_';\n            break;\n        case 'digitalInput':\n            prefijo = 'digital_in_';\n            break;\n        case 'temperatureSensor':\n            prefijo = 'temperature_';\n            break;\n        case 'humiditySensor':\n            prefijo = 'relative_humidity_';\n            break;\n        case 'accelerometer':\n            prefijo = 'accelerometer_';\n            break;\n        case 'barometer':\n            prefijo = 'barometric_pressure_';\n            break;\n        case 'gyrometer':\n            prefijo = 'gyrometer_';\n            break;\n        case 'gpsLocation':\n            prefijo = 'gps_';\n            break;\n        case 'digitalOutput':\n            prefijo = 'digital_out_';\n            break;\n        case 'analogOutput':\n            prefijo = 'analog_out_';\n            break;\n        case 'illuminanceSensor':\n            prefijo = 'luminosity_';\n            break;\n        case 'presenceSensor':\n            prefijo = 'presence_';\n            break;\n\n    }\n    for (var key2 in newPayloadFields[key]) {\n        newMsg.payload_fields[prefijo + key2] =\n            newPayloadFields[key][key2];\n    }\n}\n*/\nnewMsg.metadata = {\n    'rxInfo': msg.rxInfo,\n    'txInfo': msg.txInfo\n};\n//Con el marshaller JSON nuevo de CS parece que envía la propiedad objectJSON\n//incluso aunque no se haya elegido un Codec\n//Por eso la utilizo para intentar saber si se está usando el nuevo JSON o el legacy\nif(msg.hasOwnProperty('objectJSON')){\nnewMsg.ultimoUplink = \"CS_new\";\n}else{\n    newMsg.ultimoUplink = \"CS\";\n}\nnewMsg.infoDownlink = {\"hardware_serial\":newMsg.hardware_serial};\nreturn {\n    msg: newMsg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1338,
          "layoutY": 1581
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha anulado una alarma de tipo \"+metadata.tipoAlarma+\". La tensión actual de la batería es \"+metadata.bat+\" V, y el umbral de alarma es \"+metadata.umbralMinimo+\" V.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value2\":\"'+metadata.bat+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma anulada \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1307,
          "layoutY": 22
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "esDelegado?",
        "debugMode": false,
        "configuration": {
          "jsScript": "if(metadata.hasOwnProperty('ss_esDelegado')&& metadata.ss_esDelegado==\"true\" ){\n    return ['si'];\n}else{\n    return ['no'];\n}\n"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1578,
          "layoutY": 123
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "preparar atributos",
        "debugMode": false,
        "configuration": {
          "jsScript": "//Si existe msg.___atributosCompartidos[___ultimoDownlink]\n//Si existe ss___atributosCompartidos y tiene una propiedad llamada ___ultimoDownlink \n//sustituirla con el valor de msg[___ultimoDownlink]\n//Si no existe ss___atributosCompartidos, crear un nuevo ___atributosCompartidos\n// Si no existe, es un comando que no requiere ningún atributo (por ejemplo Resetear)\n//Almacenamos el ___ultimoDownlink\nif (msg.hasOwnProperty('___atributosCompartidos') && msg.___atributosCompartidos.hasOwnProperty(msg\n    .___ultimoDownlink)) { //Hay un atributo que guardar\n    var ultimoDownlink = msg.___ultimoDownlink;\n    if (metadata.hasOwnProperty(\n            \"ss____atributosCompartidos\")) {\n        var atributosCompartidos = JSON.parse(metadata\n            .ss____atributosCompartidos);\n        atributosCompartidos[ultimoDownlink] = msg.___atributosCompartidos[msg\n            .___ultimoDownlink];\n    } else {\n        var atributosCompartidos = {};\n            atributosCompartidos[ultimoDownlink]= msg.___atributosCompartidos[msg.___ultimoDownlink];\n        \n    }\n    var atributoUltimoDownlink = '___' + ultimoDownlink;\n    msg = {\n        atributoUltimoDownlink: msg[\n            atributoUltimoDownlink],\n        \"___ultimoDownlink\": ultimoDownlink,\n        \"___atributosCompartidos\": atributosCompartidos\n    };\n} else {\n    msg = {\n        \"___ultimoDownlink\": msg.___ultimoDownlink\n    };\n}\nmsgType = \"POST_ATTRIBUTES_REQUEST\";\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 783,
          "layoutY": 1284
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "C[r/l]ear",
        "debugMode": false,
        "configuration": {
          "jsScript": "if (msgType=='INACTIVITY_EVENT') {\n    return ['crear'];\n} else{\n    return ['clear'];\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 516,
          "layoutY": 1287
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "tipoAlarma",
        "debugMode": false,
        "configuration": {
          "jsScript": "var obj = JSON.parse(metadata['ss___alarma_' + metadata\n    .deviceType]);\n\n\nmetadata.alarmaActual = JSON.stringify(obj.inactividad);\nmetadata.tipoAlarma = \"Inactividad\";\n\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1071,
          "layoutY": 1304
        },
        "type": "org.thingsboard.rule.engine.action.TbCreateAlarmNode",
        "name": "Crear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;",
          "severity": "CRITICAL",
          "propagate": true,
          "useMessageAlarmData": false,
          "relationTypes": [
            "Contains"
          ]
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1338,
          "layoutY": 1529
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha generado una alarma de tipo \"+metadata.tipoAlarma+\". La tensión actual de la batería es \"+metadata.bat+\" V, y el umbral de alarma es \"+metadata.umbralMinimo+\" V.\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value2\":\"'+metadata.bat+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1304,
          "layoutY": 189
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "prepararDownlink",
        "debugMode": false,
        "configuration": {
          "jsScript": "var payload = {};\n\npayload.port = 2; //cualquiera\npayload.confirmed = false;\npayload.schedule = 'replace';\n\nvar valor = parseInt(msg.___atributosCompartidos.TDC)\n    .toString(16);\nvar pad = '000000';\n\npayload.payload_raw = \"01\" + pad.substring(0, pad\n    .length -\n    valor.length) + valor;\nmsg = {\n    \"payload\": JSON.stringify(payload),\n    \"uuid\": msg.uuid\n};\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1074,
          "layoutY": 1513
        },
        "type": "org.thingsboard.rule.engine.action.TbCreateAlarmNode",
        "name": "Crear alarma",
        "debugMode": false,
        "configuration": {
          "alarmType": "${tipoAlarma}",
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n}\nreturn details;",
          "severity": "CRITICAL",
          "propagate": true,
          "useMessageAlarmData": false,
          "relationTypes": [
            "Contains"
          ]
        }
      },
      {
        "additionalInfo": {
          "layoutX": 748,
          "layoutY": 343,
          "description": "En realidad aquí sólo llegarían los atributos compartidos de tipo ___. Los de tipo __ se almacenan el la regla configurarEntidad."
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "POST_ATTRIBUTES_REQUEST",
        "debugMode": false,
        "configuration": {
          "jsScript": "return {msg: msg, metadata: metadata, msgType: \"POST_ATTRIBUTES_REQUEST\"};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1304,
          "layoutY": 244
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "prepararDownlink",
        "debugMode": false,
        "configuration": {
          "jsScript": "var payload = {};\n\npayload.port = 2; \npayload.confirmed = false;\npayload.schedule = 'replace';\n\n\npayload.payload_raw = \"0x04FF\";\n\nmsg = {\n    \"payload\": JSON.stringify(payload),\n    \"uuid\": msg.uuid\n};\n\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1304,
          "layoutY": 300
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "prepararDownlink",
        "debugMode": false,
        "configuration": {
          "jsScript": "var payload = {};\n\npayload.port = 2; //cualquiera\npayload.confirmed = false;\npayload.schedule = 'replace';\n\nif(msg.___atributosCompartidos.CFM=='activada'){\npayload.payload_raw = \"0x0501\";\n}else{\n    payload.payload_raw = \"0x0500\";\n}\nmsg = {\n    \"payload\": JSON.stringify(payload),\n    \"uuid\": msg.uuid\n};\n\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 1335,
          "layoutY": 1389
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "construir mensaje",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.mensajeTelegram=\"El dispositivo \" + metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\" ha generado una alarma de tipo \"+metadata.tipoAlarma+\".\";\n\nmetadata.mensajeIfttt='{\"value1\":\"'+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+'\",\"value2\":\"'+(metadata.alarmStatus==1?'Alarma activada':'Alarma desactivada')+'\"}';\n\nmetadata.mensajeEmail=metadata.mensajeTelegram;\nmetadata.asuntoEmail=\"[IoT open Tech] \"+metadata.deviceName.substring(metadata.deviceName.indexOf(\"_\")+1)+\": Alarma \"+metadata.tipoAlarma;\n\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      }
    ],
    "connections": [
      {
        "fromIndex": 1,
        "toIndex": 3,
        "type": "crear"
      },
      {
        "fromIndex": 1,
        "toIndex": 2,
        "type": "clear"
      },
      {
        "fromIndex": 2,
        "toIndex": 27,
        "type": "Cleared"
      },
      {
        "fromIndex": 3,
        "toIndex": 4,
        "type": "Created"
      },
      {
        "fromIndex": 6,
        "toIndex": 43,
        "type": "Success"
      },
      {
        "fromIndex": 7,
        "toIndex": 1,
        "type": "Success"
      },
      {
        "fromIndex": 8,
        "toIndex": 11,
        "type": "Success"
      },
      {
        "fromIndex": 9,
        "toIndex": 42,
        "type": "Success"
      },
      {
        "fromIndex": 11,
        "toIndex": 40,
        "type": "Success"
      },
      {
        "fromIndex": 12,
        "toIndex": 32,
        "type": "clear"
      },
      {
        "fromIndex": 12,
        "toIndex": 91,
        "type": "crear"
      },
      {
        "fromIndex": 13,
        "toIndex": 8,
        "type": "Success"
      },
      {
        "fromIndex": 15,
        "toIndex": 30,
        "type": "Success"
      },
      {
        "fromIndex": 17,
        "toIndex": 77,
        "type": "Success"
      },
      {
        "fromIndex": 18,
        "toIndex": 79,
        "type": "Success"
      },
      {
        "fromIndex": 19,
        "toIndex": 92,
        "type": "Success"
      },
      {
        "fromIndex": 20,
        "toIndex": 35,
        "type": "Success"
      },
      {
        "fromIndex": 21,
        "toIndex": 81,
        "type": "Cleared"
      },
      {
        "fromIndex": 22,
        "toIndex": 62,
        "type": "geocercado"
      },
      {
        "fromIndex": 22,
        "toIndex": 52,
        "type": "alabeo"
      },
      {
        "fromIndex": 22,
        "toIndex": 53,
        "type": "alabeo"
      },
      {
        "fromIndex": 22,
        "toIndex": 24,
        "type": "alarmStatus"
      },
      {
        "fromIndex": 22,
        "toIndex": 31,
        "type": "bat"
      },
      {
        "fromIndex": 22,
        "toIndex": 6,
        "type": "cabeceo"
      },
      {
        "fromIndex": 22,
        "toIndex": 7,
        "type": "cabeceo"
      },
      {
        "fromIndex": 22,
        "toIndex": 87,
        "type": "inactividad"
      },
      {
        "fromIndex": 23,
        "toIndex": 95,
        "type": "Created"
      },
      {
        "fromIndex": 24,
        "toIndex": 80,
        "type": "Success"
      },
      {
        "fromIndex": 25,
        "toIndex": 10,
        "type": "Success"
      },
      {
        "fromIndex": 28,
        "toIndex": 9,
        "type": "no"
      },
      {
        "fromIndex": 29,
        "toIndex": 37,
        "type": "True"
      },
      {
        "fromIndex": 30,
        "toIndex": 29,
        "type": "si"
      },
      {
        "fromIndex": 30,
        "toIndex": 37,
        "type": "no"
      },
      {
        "fromIndex": 31,
        "toIndex": 12,
        "type": "Success"
      },
      {
        "fromIndex": 32,
        "toIndex": 83,
        "type": "Cleared"
      },
      {
        "fromIndex": 33,
        "toIndex": 78,
        "type": "Success"
      },
      {
        "fromIndex": 34,
        "toIndex": 20,
        "type": "Success"
      },
      {
        "fromIndex": 35,
        "toIndex": 16,
        "type": "Success"
      },
      {
        "fromIndex": 36,
        "toIndex": 76,
        "type": "Success"
      },
      {
        "fromIndex": 37,
        "toIndex": 46,
        "type": "MD"
      },
      {
        "fromIndex": 37,
        "toIndex": 49,
        "type": "CHE"
      },
      {
        "fromIndex": 37,
        "toIndex": 94,
        "type": "CFM"
      },
      {
        "fromIndex": 37,
        "toIndex": 93,
        "type": "RESET"
      },
      {
        "fromIndex": 37,
        "toIndex": 90,
        "type": "TDC"
      },
      {
        "fromIndex": 37,
        "toIndex": 84,
        "type": "guardarAtributo"
      },
      {
        "fromIndex": 37,
        "toIndex": 48,
        "type": "KAT"
      },
      {
        "fromIndex": 37,
        "toIndex": 47,
        "type": "EXIT_ALARM"
      },
      {
        "fromIndex": 38,
        "toIndex": 82,
        "type": "CS"
      },
      {
        "fromIndex": 38,
        "toIndex": 8,
        "type": "TTN"
      },
      {
        "fromIndex": 38,
        "toIndex": 13,
        "type": "everynetUplink"
      },
      {
        "fromIndex": 38,
        "toIndex": 28,
        "type": "everynetDownlink"
      },
      {
        "fromIndex": 39,
        "toIndex": 14,
        "type": "Success"
      },
      {
        "fromIndex": 40,
        "toIndex": 33,
        "type": "Success"
      },
      {
        "fromIndex": 40,
        "toIndex": 75,
        "type": "Success"
      },
      {
        "fromIndex": 40,
        "toIndex": 25,
        "type": "Success"
      },
      {
        "fromIndex": 41,
        "toIndex": 39,
        "type": "Success"
      },
      {
        "fromIndex": 42,
        "toIndex": 41,
        "type": "Success"
      },
      {
        "fromIndex": 43,
        "toIndex": 45,
        "type": "crear"
      },
      {
        "fromIndex": 43,
        "toIndex": 44,
        "type": "clear"
      },
      {
        "fromIndex": 44,
        "toIndex": 5,
        "type": "Cleared"
      },
      {
        "fromIndex": 45,
        "toIndex": 26,
        "type": "Created"
      },
      {
        "fromIndex": 52,
        "toIndex": 58,
        "type": "Success"
      },
      {
        "fromIndex": 53,
        "toIndex": 61,
        "type": "Success"
      },
      {
        "fromIndex": 56,
        "toIndex": 55,
        "type": "Created"
      },
      {
        "fromIndex": 57,
        "toIndex": 50,
        "type": "Cleared"
      },
      {
        "fromIndex": 58,
        "toIndex": 56,
        "type": "crear"
      },
      {
        "fromIndex": 58,
        "toIndex": 57,
        "type": "clear"
      },
      {
        "fromIndex": 59,
        "toIndex": 51,
        "type": "Created"
      },
      {
        "fromIndex": 60,
        "toIndex": 54,
        "type": "Cleared"
      },
      {
        "fromIndex": 61,
        "toIndex": 59,
        "type": "crear"
      },
      {
        "fromIndex": 61,
        "toIndex": 60,
        "type": "clear"
      },
      {
        "fromIndex": 62,
        "toIndex": 72,
        "type": "Success"
      },
      {
        "fromIndex": 63,
        "toIndex": 64,
        "type": "Created"
      },
      {
        "fromIndex": 66,
        "toIndex": 67,
        "type": "clear"
      },
      {
        "fromIndex": 66,
        "toIndex": 63,
        "type": "crear"
      },
      {
        "fromIndex": 67,
        "toIndex": 65,
        "type": "Cleared"
      },
      {
        "fromIndex": 68,
        "toIndex": 66,
        "type": "Left"
      },
      {
        "fromIndex": 68,
        "toIndex": 71,
        "type": "Entered"
      },
      {
        "fromIndex": 71,
        "toIndex": 74,
        "type": "clear"
      },
      {
        "fromIndex": 71,
        "toIndex": 73,
        "type": "crear"
      },
      {
        "fromIndex": 72,
        "toIndex": 68,
        "type": "Success"
      },
      {
        "fromIndex": 73,
        "toIndex": 69,
        "type": "Created"
      },
      {
        "fromIndex": 74,
        "toIndex": 70,
        "type": "Cleared"
      },
      {
        "fromIndex": 76,
        "toIndex": 15,
        "type": "downlink"
      },
      {
        "fromIndex": 76,
        "toIndex": 78,
        "type": "alarma"
      },
      {
        "fromIndex": 76,
        "toIndex": 38,
        "type": "telemetria"
      },
      {
        "fromIndex": 76,
        "toIndex": 19,
        "type": "guardarAtributos"
      },
      {
        "fromIndex": 78,
        "toIndex": 22,
        "type": "Success"
      },
      {
        "fromIndex": 79,
        "toIndex": 85,
        "type": "Success"
      },
      {
        "fromIndex": 80,
        "toIndex": 21,
        "type": "clear"
      },
      {
        "fromIndex": 80,
        "toIndex": 23,
        "type": "crear"
      },
      {
        "fromIndex": 82,
        "toIndex": 8,
        "type": "Success"
      },
      {
        "fromIndex": 84,
        "toIndex": 18,
        "type": "si"
      },
      {
        "fromIndex": 84,
        "toIndex": 79,
        "type": "no"
      },
      {
        "fromIndex": 85,
        "toIndex": 34,
        "type": "Success"
      },
      {
        "fromIndex": 86,
        "toIndex": 88,
        "type": "crear"
      },
      {
        "fromIndex": 87,
        "toIndex": 86,
        "type": "Success"
      },
      {
        "fromIndex": 88,
        "toIndex": 0,
        "type": "Created"
      },
      {
        "fromIndex": 91,
        "toIndex": 89,
        "type": "Created"
      },
      {
        "fromIndex": 92,
        "toIndex": 17,
        "type": "Success"
      }
    ],
    "ruleChainConnections": [
      {
        "fromIndex": 0,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2017,
          "layoutY": 2060,
          "ruleChainNodeId": "rule-chain-node-98"
        },
        "type": "Success"
      },
      {
        "fromIndex": 4,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2017,
          "layoutY": 2060,
          "ruleChainNodeId": "rule-chain-node-98"
        },
        "type": "Success"
      },
      {
        "fromIndex": 5,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2017,
          "layoutY": 2060,
          "ruleChainNodeId": "rule-chain-node-98"
        },
        "type": "Success"
      },
      {
        "fromIndex": 16,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "9e0e1260-2010-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 1860,
          "layoutY": 434,
          "ruleChainNodeId": "rule-chain-node-99"
        },
        "type": "Success"
      },
      {
        "fromIndex": 26,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2017,
          "layoutY": 2060,
          "ruleChainNodeId": "rule-chain-node-98"
        },
        "type": "Success"
      },
      {
        "fromIndex": 27,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2017,
          "layoutY": 2060,
          "ruleChainNodeId": "rule-chain-node-98"
        },
        "type": "Success"
      },
      {
        "fromIndex": 46,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "38d6eda0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 1595,
          "layoutY": 349,
          "ruleChainNodeId": "rule-chain-node-100"
        },
        "type": "Success"
      },
      {
        "fromIndex": 47,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "38d6eda0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 1595,
          "layoutY": 349,
          "ruleChainNodeId": "rule-chain-node-100"
        },
        "type": "Success"
      },
      {
        "fromIndex": 48,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "38d6eda0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 1595,
          "layoutY": 349,
          "ruleChainNodeId": "rule-chain-node-100"
        },
        "type": "Success"
      },
      {
        "fromIndex": 49,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "38d6eda0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 1595,
          "layoutY": 349,
          "ruleChainNodeId": "rule-chain-node-100"
        },
        "type": "Success"
      },
      {
        "fromIndex": 50,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2017,
          "layoutY": 2060,
          "ruleChainNodeId": "rule-chain-node-98"
        },
        "type": "Success"
      },
      {
        "fromIndex": 51,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2017,
          "layoutY": 2060,
          "ruleChainNodeId": "rule-chain-node-98"
        },
        "type": "Success"
      },
      {
        "fromIndex": 54,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2017,
          "layoutY": 2060,
          "ruleChainNodeId": "rule-chain-node-98"
        },
        "type": "Success"
      },
      {
        "fromIndex": 55,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2017,
          "layoutY": 2060,
          "ruleChainNodeId": "rule-chain-node-98"
        },
        "type": "Success"
      },
      {
        "fromIndex": 64,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2017,
          "layoutY": 2060,
          "ruleChainNodeId": "rule-chain-node-98"
        },
        "type": "Success"
      },
      {
        "fromIndex": 65,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2017,
          "layoutY": 2060,
          "ruleChainNodeId": "rule-chain-node-98"
        },
        "type": "Success"
      },
      {
        "fromIndex": 69,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2017,
          "layoutY": 2060,
          "ruleChainNodeId": "rule-chain-node-98"
        },
        "type": "Success"
      },
      {
        "fromIndex": 70,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2017,
          "layoutY": 2060,
          "ruleChainNodeId": "rule-chain-node-98"
        },
        "type": "Success"
      },
      {
        "fromIndex": 81,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2017,
          "layoutY": 2060,
          "ruleChainNodeId": "rule-chain-node-98"
        },
        "type": "Success"
      },
      {
        "fromIndex": 83,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2017,
          "layoutY": 2060,
          "ruleChainNodeId": "rule-chain-node-98"
        },
        "type": "Success"
      },
      {
        "fromIndex": 89,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2017,
          "layoutY": 2060,
          "ruleChainNodeId": "rule-chain-node-98"
        },
        "type": "Success"
      },
      {
        "fromIndex": 90,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "38d6eda0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 1595,
          "layoutY": 349,
          "ruleChainNodeId": "rule-chain-node-100"
        },
        "type": "Success"
      },
      {
        "fromIndex": 93,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "38d6eda0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 1595,
          "layoutY": 349,
          "ruleChainNodeId": "rule-chain-node-100"
        },
        "type": "Success"
      },
      {
        "fromIndex": 94,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "38d6eda0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 1595,
          "layoutY": 349,
          "ruleChainNodeId": "rule-chain-node-100"
        },
        "type": "Success"
      },
      {
        "fromIndex": 95,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "1b3ad1d0-200f-11eb-800c-43a360f58fa3"
        },
        "additionalInfo": {
          "layoutX": 2017,
          "layoutY": 2060,
          "ruleChainNodeId": "rule-chain-node-98"
        },
        "type": "Success"
      }
    ]
  }
}