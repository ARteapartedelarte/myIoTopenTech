{
  "ruleChain": {
    "additionalInfo": null,
    "name": "notificaciones",
    "firstRuleNodeId": null,
    "root": false,
    "debugMode": false,
    "configuration": null
  },
  "metadata": {
    "firstNodeIndex": 0,
    "nodes": [
      {
        "additionalInfo": {
          "layoutX": 298,
          "layoutY": 151
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsFilterNode",
        "name": "notificaciones activadas?",
        "debugMode": true,
        "configuration": {
          "jsScript": "var obj = JSON.parse(metadata.alarmaActual);\nvar fecha = new Date();\n\nif (obj.hasOwnProperty('habilitacionConstante') && obj\n    .habilitacionConstante == true) {\n    return true;\n} else {\n    //Está en la programación \n    if (obj.hasOwnProperty('programacionHoraria') && obj\n        .programacionHoraria == true && obj.hasOwnProperty(\n            'horas')) {\n        if(!obj.horas.hasOwnProperty(fecha.getHours().toString()) || obj.horas[fecha.getHours().toString()]==false){\n            return false;\n        }\n    }\n    if (obj.hasOwnProperty('programacionSemanal') && obj\n        .programacionSemanal == true && obj.hasOwnProperty(\n            'dias')) {\n        if(!obj.dias.hasOwnProperty[fecha.getDay().toString()] || obj.horas[fecha.getDay().toString()]==false){\n            return false;\n        }\n    }\n    if (obj.hasOwnProperty('programacionMensual') && obj\n        .programacionMensual == true && obj.hasOwnProperty(\n            'meses')) {\n        if(!obj.dias.hasOwnProperty[fecha.getMonth().toString()] || obj.horas[fecha.getMonth().toString()]==false){\n            return false;\n        }\n    }\n    return true;\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 323,
          "layoutY": 456
        },
        "type": "org.thingsboard.rule.engine.transform.TbChangeOriginatorNode",
        "name": "Customer",
        "debugMode": true,
        "configuration": {
          "originatorSource": "CUSTOMER",
          "relationsQuery": {
            "direction": "FROM",
            "maxLevel": 1,
            "filters": [
              {
                "relationType": "Contains",
                "entityTypes": []
              }
            ],
            "fetchLastLevelOnly": false
          }
        }
      },
      {
        "additionalInfo": {
          "layoutX": 577,
          "layoutY": 662
        },
        "type": "org.thingsboard.rule.engine.rest.TbRestApiCallNode",
        "name": "Join sala",
        "debugMode": true,
        "configuration": {
          "restEndpointUrlPattern": "https://matrix.org/_matrix/client/r0/rooms/${customer_id_sala_matrix}/join?access_token=${ss_tokenMatrix}",
          "requestMethod": "POST",
          "headers": {
            "Content-Type": "application/json"
          },
          "useSimpleClientHttpFactory": false,
          "readTimeoutMs": 0,
          "maxParallelRequestsCount": 0,
          "useRedisQueueForMsgPersistence": false,
          "trimQueue": false,
          "maxQueueSize": 0
        }
      },
      {
        "additionalInfo": {
          "layoutX": 765,
          "layoutY": 219
        },
        "type": "org.thingsboard.rule.engine.mail.TbSendEmailNode",
        "name": "email",
        "debugMode": true,
        "configuration": {
          "useSystemSmtpSettings": true,
          "smtpHost": "localhost",
          "smtpPort": 25,
          "username": null,
          "password": null,
          "smtpProtocol": "smtp",
          "timeout": 10000,
          "enableTls": false
        }
      },
      {
        "additionalInfo": {
          "layoutX": 531,
          "layoutY": 221
        },
        "type": "org.thingsboard.rule.engine.mail.TbMsgToEmailNode",
        "name": "preparar",
        "debugMode": true,
        "configuration": {
          "fromTemplate": "no-reply@iotopentech.io",
          "toTemplate": "${lista_email}",
          "ccTemplate": null,
          "bccTemplate": null,
          "subjectTemplate": "${asuntoEmail}",
          "bodyTemplate": "${mensajeEmail}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 588,
          "layoutY": 300
        },
        "type": "org.thingsboard.rule.engine.rest.TbRestApiCallNode",
        "name": "Telegram",
        "debugMode": true,
        "configuration": {
          "restEndpointUrlPattern": "https://api.telegram.org/bot${customer_token_telegram}/sendMessage",
          "requestMethod": "POST",
          "headers": {
            "Content-Type": "application/json"
          },
          "useSimpleClientHttpFactory": false,
          "readTimeoutMs": 0,
          "maxParallelRequestsCount": 0,
          "useRedisQueueForMsgPersistence": false,
          "trimQueue": false,
          "maxQueueSize": 0
        }
      },
      {
        "additionalInfo": {
          "layoutX": 323,
          "layoutY": 305
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "TB to Telegram",
        "debugMode": true,
        "configuration": {
          "jsScript": "return {msg:{\"text\":metadata.mensajeTelegram,\"chat_id\":metadata.customer_chatid_telegram},\n    metadata: metadata,\n    msgType: msgType\n}"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 585,
          "layoutY": 378
        },
        "type": "org.thingsboard.rule.engine.rest.TbRestApiCallNode",
        "name": "IFTTT",
        "debugMode": false,
        "configuration": {
          "restEndpointUrlPattern": "https://maker.ifttt.com/trigger/${iftttEvento}/with/key/${customer_token_webhook_ifttt}",
          "requestMethod": "GET",
          "headers": {
            "Content-Type": "application/json"
          },
          "useSimpleClientHttpFactory": false,
          "readTimeoutMs": 0,
          "maxParallelRequestsCount": 0,
          "useRedisQueueForMsgPersistence": false,
          "trimQueue": false,
          "maxQueueSize": 0
        }
      },
      {
        "additionalInfo": {
          "layoutX": 324,
          "layoutY": 379
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "TB to IFTTT",
        "debugMode": false,
        "configuration": {
          "jsScript": "//Parece que puede haber un límite para el tamaño de la metadata\n//por lo que cojo sólo lo que necesito\nvar newMetadata={};\nnewMetadata.iftttEvento=JSON.parse(metadata.alarmaActual).iftttEvento;\nnewMetadata.customer_token_webhook_ifttt=metadata.customer_token_webhook_ifttt;\nreturn {msg: JSON.parse(metadata.mensajeIfttt), metadata: newMetadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 49,
          "layoutY": 226
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetCustomerAttributeNode",
        "name": "Atributos",
        "debugMode": true,
        "configuration": {
          "attrMapping": {
            "token_webhook_ifttt": "customer_token_webhook_ifttt",
            "chatid_telegram": "customer_chatid_telegram",
            "token_telegram": "customer_token_telegram",
            "email": "customer_email",
            "id_sala_matrix": "customer_id_sala_matrix"
          },
          "telemetry": false
        }
      },
      {
        "additionalInfo": {
          "layoutX": 49,
          "layoutY": 301
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsSwitchNode",
        "name": "destinos?",
        "debugMode": true,
        "configuration": {
          "jsScript": "var obj=JSON.parse(metadata.alarmaActual);\nvar destinos = [];\nif (metadata.hasOwnProperty('customer_email') && obj.hasOwnProperty('email') && obj.email) {\n    destinos.push('email');\n}\nif (metadata.hasOwnProperty('customer_token_telegram') && metadata.hasOwnProperty('customer_chatid_telegram') && obj.hasOwnProperty('telegram') && obj.telegram) {\n    destinos.push('telegram');\n}\nif (metadata.hasOwnProperty('customer_token_webhook_ifttt')&& obj.hasOwnProperty('ifttt')&& obj.hasOwnProperty('iftttEvento') && obj.ifttt  ) {\n    destinos.push('ifttt');\n}\nif (metadata.hasOwnProperty('customer_id_sala_matrix')  && obj.hasOwnProperty('matrix') && obj.matrix) {\n    destinos.push('matrix');\n}\nreturn destinos;"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 292,
          "layoutY": 221
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "emailAdicionales?",
        "debugMode": true,
        "configuration": {
          "jsScript": "metadata.lista_email = [];\nvar alarmaActual = JSON.parse(metadata.alarmaActual);\nif (alarmaActual.emailPrincipal === true) {\n    metadata.lista_email.push(metadata.customer_email);\n}\nif (alarmaActual.hasOwnProperty(\n        'emailsAdicionales')) {\n    for (var i = 0; i < alarmaActual.emailsAdicionales\n        .length; i++) {\n\n        metadata.lista_email.push(alarmaActual\n            .emailsAdicionales[i]);\n    }\n}\nmetadata.lista_email = metadata.lista_email.join(',');\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 583,
          "layoutY": 727
        },
        "type": "org.thingsboard.rule.engine.rest.TbRestApiCallNode",
        "name": "Enviar mensaje",
        "debugMode": true,
        "configuration": {
          "restEndpointUrlPattern": "https://matrix.org/_matrix/client/r0/rooms/${customer_id_sala_matrix}/send/m.room.message/${ss_contadorMatrix}?access_token=${ss_tokenMatrix}",
          "requestMethod": "PUT",
          "headers": {
            "Content-Type": "application/json",
            "Accept": "application/json"
          },
          "useSimpleClientHttpFactory": false,
          "readTimeoutMs": 0,
          "maxParallelRequestsCount": 0,
          "useRedisQueueForMsgPersistence": false,
          "trimQueue": false,
          "maxQueueSize": 0
        }
      },
      {
        "additionalInfo": {
          "layoutX": 319,
          "layoutY": 730
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "TB to matrix.org: hacer un join primero",
        "debugMode": true,
        "configuration": {
          "jsScript": "return {msg:{\"body\":metadata.mensajeTelegram,\"msgtype\":\"m.text\"},\n    metadata: metadata,\n    msgType: msgType\n};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 571,
          "layoutY": 525
        },
        "type": "org.thingsboard.rule.engine.flow.TbCheckpointNode",
        "name": "Secuencial",
        "debugMode": true,
        "configuration": {
          "queueName": "SequentialByOriginator"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 320,
          "layoutY": 659
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgAttributesNode",
        "name": "Guardar contadorMatrix",
        "debugMode": true,
        "configuration": {
          "scope": "SERVER_SCOPE"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 575,
          "layoutY": 597
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "contadorMatrix++",
        "debugMode": true,
        "configuration": {
          "jsScript": "metadata.ss_contadorMatrix=parseInt(metadata.ss_contadorMatrix)+1;\nreturn {msg: {\"contadorMatrix\":metadata.ss_contadorMatrix}, metadata: metadata, msgType: \"POST_ATTRIBUTES_REQUEST\"};"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 572,
          "layoutY": 453
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetOriginatorFieldsNode",
        "name": "name+id",
        "debugMode": true,
        "configuration": {
          "fieldsMapping": {
            "name": "customerName",
            "id": "customerID"
          }
        }
      },
      {
        "additionalInfo": {
          "layoutX": 321,
          "layoutY": 593
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "contadorMatrix y tokenMatrix",
        "debugMode": true,
        "configuration": {
          "clientAttributeNames": [],
          "sharedAttributeNames": [],
          "serverAttributeNames": [
            "contadorMatrix",
            "tokenMatrix"
          ],
          "latestTsKeyNames": [],
          "tellFailureIfAbsent": false,
          "getLatestValueWithTs": false
        }
      },
      {
        "additionalInfo": {
          "layoutX": 324,
          "layoutY": 525
        },
        "type": "org.thingsboard.rule.engine.transform.TbChangeOriginatorNode",
        "name": "patron",
        "debugMode": true,
        "configuration": {
          "originatorSource": "RELATED",
          "relationsQuery": {
            "direction": "TO",
            "maxLevel": 1,
            "filters": [
              {
                "relationType": "${customerID}",
                "entityTypes": [
                  "CUSTOMER"
                ]
              }
            ],
            "fetchLastLevelOnly": false
          }
        }
      }
    ],
    "connections": [
      {
        "fromIndex": 0,
        "toIndex": 9,
        "type": "True"
      },
      {
        "fromIndex": 1,
        "toIndex": 17,
        "type": "Success"
      },
      {
        "fromIndex": 2,
        "toIndex": 13,
        "type": "Success"
      },
      {
        "fromIndex": 4,
        "toIndex": 3,
        "type": "Success"
      },
      {
        "fromIndex": 6,
        "toIndex": 5,
        "type": "Success"
      },
      {
        "fromIndex": 8,
        "toIndex": 7,
        "type": "Success"
      },
      {
        "fromIndex": 9,
        "toIndex": 10,
        "type": "Success"
      },
      {
        "fromIndex": 10,
        "toIndex": 1,
        "type": "matrix"
      },
      {
        "fromIndex": 10,
        "toIndex": 11,
        "type": "email"
      },
      {
        "fromIndex": 10,
        "toIndex": 8,
        "type": "ifttt"
      },
      {
        "fromIndex": 10,
        "toIndex": 6,
        "type": "telegram"
      },
      {
        "fromIndex": 11,
        "toIndex": 4,
        "type": "Success"
      },
      {
        "fromIndex": 13,
        "toIndex": 12,
        "type": "Success"
      },
      {
        "fromIndex": 14,
        "toIndex": 18,
        "type": "Success"
      },
      {
        "fromIndex": 15,
        "toIndex": 2,
        "type": "Success"
      },
      {
        "fromIndex": 16,
        "toIndex": 15,
        "type": "Success"
      },
      {
        "fromIndex": 17,
        "toIndex": 19,
        "type": "Success"
      },
      {
        "fromIndex": 18,
        "toIndex": 16,
        "type": "Success"
      },
      {
        "fromIndex": 19,
        "toIndex": 14,
        "type": "Success"
      }
    ],
    "ruleChainConnections": null
  }
}