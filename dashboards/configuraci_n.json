{
  "title": "Configuración",
  "configuration": {
    "widgets": {
      "fba8b82f-4b63-d360-68e1-9481f57706b1": {
        "isSystemType": true,
        "bundleAlias": "cards",
        "typeAlias": "entities_hierarchy",
        "type": "latest",
        "title": "New widget",
        "sizeX": 9,
        "sizeY": 11,
        "config": {
          "timewindow": {
            "realtime": {
              "interval": 1000,
              "timewindowMs": 86400000
            },
            "aggregation": {
              "type": "NONE",
              "limit": 200
            }
          },
          "showTitle": true,
          "backgroundColor": "rgb(255, 255, 255)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "4px",
          "settings": {
            "nodeRelationQueryFunction": "/**\n\n// Function should return relations query object for current node used to fetch entity children.\n// Function can return 'default' string value. In this case default relations query will be used.\n\n// The following example code will construct simple relations query that will fetch relations of type 'Contains'\n// from the current entity.\n\nvar entity = nodeCtx.entity;\nvar query = {\n    parameters: {\n        rootId: entity.id.id,\n        rootType: entity.id.entityType,\n        direction: types.entitySearchDirection.from,\n        relationTypeGroup: \"COMMON\",\n        maxLevel: 1\n    },\n    filters: [{\n        relationType: \"Contains\",\n        entityTypes: []\n    }]\n};\nreturn query;\n\n**/\n",
            "nodeHasChildrenFunction": "/**\n\n// Function should return boolean value indicating whether current node has children (whether it can be expanded).\n\n// The following example code will restrict entities hierarchy expansion up to third level.\n\nreturn nodeCtx.level <= 2;\n\n// The next example code will restrict entities expansion according to the value of example 'nodeHasChildren' attribute.\n\nvar data = nodeCtx.data;\nif (data.hasOwnProperty('nodeHasChildren') && data['nodeHasChildren'] !== null) {\n    return data['nodeHasChildren'] === 'true';\n} else {\n    return true;\n}\n  \n**/\n ",
            "nodeTextFunction": "/**\n\n// Function should return text (can be HTML code) for the current node.\n\n// The following example code will generate node text consisting of entity name and temperature if temperature value is present in entity attributes/timeseries.\n\nvar data =  nodeCtx.data;\nvar entity = nodeCtx.entity;\nvar text = entity.name;\nif (data.hasOwnProperty('temperature') && data['temperature'] !== null) {\n    text += \" <b>\"+ data['temperature'] +\" °C</b>\";\n}\nreturn text;\n\n**/\n\n//return \" <b>\"+nodeCtx.data['nombreEntidad']+\"</b>\";\nvar entity = nodeCtx.entity;\nvar nombreCompleto = entity.name;\nvar nombre = nombreCompleto.substring(nombreCompleto.indexOf(\"_\")+1);\n//console.log(nodeCtx.data);\nreturn nombre;",
            "nodeIconFunction": "/** \n\n// Function should return node icon info object.\n// Resulting object should contain either 'materialIcon' or 'iconUrl' property. \n// Where:\n    - 'materialIcon' - name of the material icon to be used from the Material Icons Library (https://material.io/tools/icons);\n    - 'iconUrl' - url of the external image to be used as node icon.\n// Function can return 'default' string value. In this case default icons according to entity type will be used.\n\n// The following example code shows how to use external image for devices which name starts with 'Test' and use \n// default icons for the rest of entities.\n\nvar entity = nodeCtx.entity;\nif (entity.id.entityType === 'DEVICE' && entity.name.startsWith('Test')) {\n    return {iconUrl: 'https://avatars1.githubusercontent.com/u/14793288?v=4&s=117'};\n} else {\n    return 'default';\n}\n \n**/",
            "nodeDisabledFunction": "/**\n\n// Function should return boolean value indicating whether current node should be disabled (not selectable).\n\n// The following example code will disable current node according to the value of example 'nodeDisabled' attribute.\n\nvar data = nodeCtx.data;\nif (data.hasOwnProperty('nodeDisabled') && data['nodeDisabled'] !== null) {\n    return data['nodeDisabled'] === 'true';\n} else {\n    return false;\n}\n  \n**/\n",
            "nodesSortFunction": "/**\n\n// This function is used to sort nodes of the same level. Function should compare two nodes and return \n// integer value: \n//     - less than 0 - sort nodeCtx1 to an index lower than nodeCtx2\n//     - 0 - leave nodeCtx1 and nodeCtx2 unchanged with respect to each other\n//     - greater than 0 - sort nodeCtx2 to an index lower than nodeCtx1\n\n// The following example code will sort entities first by entity type in alphabetical order then\n// by entity name in alphabetical order.\n\nvar result = nodeCtx1.entity.id.entityType.localeCompare(nodeCtx2.entity.id.entityType);\nif (result === 0) {\n    result = nodeCtx1.entity.name.localeCompare(nodeCtx2.entity.name);\n}\nreturn result;\n  \n**/",
            "nodeOpenedFunction": "/**\n\n// Function should return boolean value indicating whether current node should be opened (expanded) when it first loaded.\n\n// The following example code will open by default nodes up to third level.\n\nreturn nodeCtx.level <= 2;\n\n**/\n //return nodeCtx.level <=1;"
          },
          "title": "ACTIVOS Y DISPOSITIVOS",
          "dropShadow": true,
          "enableFullscreen": true,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400,
            "padding": "5px 10px 5px 10px"
          },
          "useDashboardTimewindow": false,
          "showLegend": false,
          "datasources": [
            {
              "type": "entity",
              "dataKeys": [
                {
                  "name": "delegados",
                  "type": "attribute",
                  "label": "delegados",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.9463425840807203
                }
              ],
              "entityAliasId": "bc41b835-4a1d-49fc-de3b-142ec2484fd4"
            }
          ],
          "widgetStyle": {},
          "actions": {
            "nodeSelected": [
              {
                "id": "a7202234-d4a6-48e7-81ed-4cbc6e19ecab",
                "name": "click",
                "icon": "more_horiz",
                "type": "customPretty",
                "customHtml": "<md-dialog flex aria-label=\"Edit entity\">\r\n\r\n\r\n    <md-tabs md-dynamic-height md-border-bottom>\r\n        <md-tab label=\"Editar\">\r\n            <form name=\"form.editEntityFormNull\"\r\n                ng-if=\"vm.entity.type=='ROOT'\">\r\n                <md-toolbar>\r\n                    <div class=\"md-toolbar-tools\">\r\n                        <h2>Editar activo ROOT\r\n                        </h2>\r\n                        <span flex></span>\r\n                        <md-button class=\"md-icon-button\"\r\n                            ng-click=\"vm.cancel()\">\r\n                            <ng-md-icon icon=\"close\"\r\n                                aria-label=\"Close\">\r\n                            </ng-md-icon>\r\n                        </md-button>\r\n                    </div>\r\n                </md-toolbar>\r\n                <md-dialog-content>\r\n                    <div class=\"md-dialog-content\">El activo\r\n                        ROOT es un requisito del\r\n                        sistema\r\n                        que no se puede editar.</div>\r\n                </md-dialog-content>\r\n                <md-dialog-actions>\r\n                    <md-button ng-click=\"vm.cancel()\"\r\n                        class=\"md-primary\">Cancelar\r\n                    </md-button>\r\n                </md-dialog-actions>\r\n            </form>\r\n            <form name=\"form.editEntityForm\"\r\n                class=\"edit-entity-form\"\r\n                ng-submit=\"vm.save()\"\r\n                ng-if=\"vm.entity.type!='ROOT'\">\r\n                <md-toolbar>\r\n                    <div class=\"md-toolbar-tools\">\r\n                        <h2>Editar\r\n                            {{vm.entityType.toLowerCase()==\"asset\"?\"activo\":\"dispositivo\"}}\r\n                            {{vm.attributes.nombreEntidad}}\r\n                        </h2>\r\n                        <span flex></span>\r\n                        <md-button class=\"md-icon-button\"\r\n                            ng-click=\"vm.cancel()\">\r\n                            <ng-md-icon icon=\"close\"\r\n                                aria-label=\"Close\">\r\n                            </ng-md-icon>\r\n                        </md-button>\r\n                    </div>\r\n                </md-toolbar>\r\n                <md-dialog-content>\r\n                    <div class=\"md-dialog-content\">\r\n                        <div layout=\"row\">\r\n                            <md-input-container flex\r\n                                class=\"md-block\">\r\n                                <label>Nombre</label>\r\n                                <input type=\"text\"\r\n                                    ng-model=\"vm.attributes.nombreEntidad\"\r\n                                    required>\r\n                            </md-input-container>\r\n                            <md-input-container flex\r\n                                class=\"md-block\">\r\n                                <label ng-if=\"vm.estaDelegado==false && vm.attributes.esDelegado==false\">Tipo</label>\r\n                                <label ng-if=\"vm.estaDelegado==true || vm.attributes.esDelegado==true\">Tipo (No se puede cambiar en delegaciones)</label>\r\n                                <md-select\r\n                                    ng-model=\"vm.attributes.tipoEntidad\"\r\n                                    required ng-disabled=\"vm.estaDelegado==true || vm.attributes.esDelegado==true\">\r\n                                    \r\n                                    <md-option\r\n                                        ng-if=\"vm.entityType.toLowerCase()=='device'\"\r\n                                        ng-repeat=\"tipo in vm.tiposDeDispositivos\"\r\n                                        ng-value=\"tipo\"\r\n                                        ng-selected=\"{{tipo == vm.attributes.tipoEntidad}}\">\r\n                                        {{tipo}}\r\n                                    </md-option>\r\n                                    <md-option\r\n                                        ng-if=\"vm.entityType.toLowerCase()=='asset'\"\r\n                                        ng-repeat=\"tipo in vm.tiposDeActivos\"\r\n                                        ng-value=\"tipo\"\r\n                                        ng-selected=\"{{tipo == vm.attributes.tipoEntidad}}\">\r\n                                        {{tipo}}\r\n                                    </md-option>\r\n                                </md-select>\r\n                            </md-input-container>\r\n                            <md-input-container flex\r\n                                class=\"md-block\">\r\n                                <label>Padre</label>\r\n                                <md-select\r\n                                    ng-model=\"vm.padre\"\r\n                                    required>\r\n                                    <md-option\r\n                                        ng-repeat=\"(name,valor) in vm.activos\"\r\n                                        ng-value=\"name\"\r\n                                        ng-selected=\"{{name == vm.padre}}\">\r\n                                        {{valor.atributos.nombreEntidad}}/{{valor.atributos.tipoEntidad}}\r\n                                    </md-option>\r\n                                </md-select>\r\n                            </md-input-container>\r\n                        </div>\r\n                    </div>\r\n\r\n                </md-dialog-content>\r\n                <md-dialog-actions>\r\n                    <md-button type=\"submit\"\r\n                        ng-disabled=\"form.editEntityForm.$invalid || !form.editEntityForm.$dirty\"\r\n                        class=\"md-raised md-primary\">Aceptar\r\n                    </md-button>\r\n                    <md-button ng-click=\"vm.cancel()\"\r\n                        class=\"md-primary\">Cancelar\r\n                    </md-button>\r\n                </md-dialog-actions>\r\n            </form>\r\n        </md-tab>\r\n        \r\n        <md-tab ng-if=\"vm.entityType.toLowerCase()=='device' && vm.attributes.hasOwnProperty('esDelegado') && vm.attributes.esDelegado===false\" label=\"delegar\">\r\n                <md-toolbar>\r\n                    <div class=\"md-toolbar-tools\">\r\n                        <h2>Delegar\r\n                            {{vm.attributes.nombreEntidad}}\r\n                        </h2>\r\n                        <span flex></span>\r\n                        <md-button class=\"md-icon-button\"\r\n                            ng-click=\"vm.cancel()\">\r\n                            <ng-md-icon icon=\"close\"\r\n                                aria-label=\"Close\">\r\n                            </ng-md-icon>\r\n                        </md-button>\r\n                    </div>\r\n                </md-toolbar>\r\n                \r\n                \r\n                        <!-- DELEGACIÓN DEL NODO -->\r\n                        <sustituir-delegacion class=\"ng-scope\"></sustituir-delegacion>\r\n                        <!-- DELEGACIÓN DEL NODO -->\r\n                    \r\n                \r\n        </md-tab>\r\n\t\t\r\n        <md-tab label=\"crear\" ng-if=\"vm.entityType.toLowerCase()=='asset'\">\r\n            \r\n            <form name=\"form.addEntityForm\"\r\n                class=\"add-entity-form\"\r\n                ng-submit=\"vm.crear()\"\r\n                >\r\n                <md-toolbar>\r\n                    <div class=\"md-toolbar-tools\">\r\n                        <h2>Crear entidad hija de\r\n                            {{vm.attributes.nombreEntidad}}\r\n                        </h2>\r\n                        <span flex></span>\r\n                        <md-button class=\"md-icon-button\"\r\n                            ng-click=\"vm.cancel()\">\r\n                            <ng-md-icon icon=\"close\"\r\n                                aria-label=\"Close\">\r\n                            </ng-md-icon>\r\n                        </md-button>\r\n                    </div>\r\n                </md-toolbar>\r\n                <md-dialog-content>\r\n                    <div class=\"md-dialog-content\">\r\n                        <div layout=\"row\">\r\n                            <md-input-container flex\r\n                                class=\"md-block\"\r\n                                style=\"min-width: 100px; width: 150px;\">\r\n                                <label>Nombre</label>\r\n                                <input type=\"text\"\r\n                                    ng-model=\"vm.crearEntidad.nombreEntidad\"\r\n                                    name=nombreEntidad\r\n                                    required>\r\n                                <div\r\n                                    ng-messages=\"addEntityForm.nombreEntidad.$error\">\r\n                                    <div\r\n                                        ng-message=\"required\">\r\n                                        Es obligatorio\r\n                                        indicar un nombre.\r\n                                    </div>\r\n                                </div>\r\n                            </md-input-container>\r\n                            <tb-entity-type-select\r\n                                class=\"md-block\"\r\n                                style=\"min-width: 100px; width: 150px;\"\r\n                                the-form=\"addEntityForm\"\r\n                                tb-required=\"true\"\r\n                                allowed-entity-types=\"vm.allowedEntityTypes\"\r\n                                ng-model=\"vm.crearEntidad.tipoEntidad\">\r\n                            </tb-entity-type-select>\r\n\r\n                            <md-input-container flex\r\n                                class=\"md-block\"\r\n                                style=\"min-width: 100px; width: 150px;\">\r\n                                <label>Tipo de\r\n                                    {{vm.crearEntidad.tipoEntidad=='DEVICE'?'dispositivo':'activo'}}</label>\r\n                                <md-select\r\n                                    ng-model=\"vm.crearEntidad.subtipoEntidad\">\r\n                                    <md-option\r\n                                        ng-if=\"vm.crearEntidad.tipoEntidad.toLowerCase()=='device'\"\r\n                                        ng-repeat=\"tipo in vm.tiposDeDispositivos\"\r\n                                        ng-value=\"tipo\"\r\n                                        ng-selected=\"\">\r\n                                        {{tipo}}\r\n                                    </md-option>\r\n                                    <md-option\r\n                                        ng-if=\"vm.crearEntidad.tipoEntidad.toLowerCase()=='asset'\"\r\n                                        ng-repeat=\"tipo in vm.tiposDeActivos\"\r\n                                        ng-value=\"tipo\"\r\n                                        ng-selected=\"\">\r\n                                        {{tipo}}\r\n                                    </md-option>\r\n                                </md-select>\r\n                            </md-input-container>\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n                </md-dialog-content>\r\n                <md-dialog-actions>\r\n                    <md-button type=\"submit\"\r\n                        ng-disabled=\"form.addEntityForm.$invalid || !form.addEntityForm.$dirty\"\r\n                        class=\"md-raised md-primary\">Crear\r\n                    </md-button>\r\n                    <md-button ng-click=\"vm.cancel()\"\r\n                        class=\"md-primary\">Cancelar\r\n                    </md-button>\r\n                </md-dialog-actions>\r\n            </form>\r\n        </md-tab>\r\n\r\n        <md-tab ng-if=\"vm.configurable\" label=\"configurar\">\r\n                <md-toolbar>\r\n                    <div class=\"md-toolbar-tools\">\r\n                        <h2>Configurar\r\n                            {{vm.attributes.nombreEntidad}}\r\n                        </h2>\r\n                        <span flex></span>\r\n                        <md-button class=\"md-icon-button\"\r\n                            ng-click=\"vm.cancel()\">\r\n                            <ng-md-icon icon=\"close\"\r\n                                aria-label=\"Close\">\r\n                            </ng-md-icon>\r\n                        </md-button>\r\n                    </div>\r\n                </md-toolbar>\r\n                \r\n                \r\n                        <!-- CONFIGURACIÓN DEL NODO -->\r\n                        <sustituir class=\"ng-scope\"></sustituir>\r\n                        <!-- CONFIGURACIÓN DEL NODO -->\r\n                    \r\n                \r\n        </md-tab>\r\n\r\n\r\n        <md-tab label=\"borrar\">\r\n            <form name=\"form.deleteEntityFormNull\"\r\n                ng-if=\"vm.entity.type=='ROOT' || vm.borrable==false\">\r\n                <md-toolbar>\r\n                    <div class=\"md-toolbar-tools\">\r\n                        <h2>Borrar\r\n                        </h2>\r\n                        <span flex></span>\r\n                        <md-button class=\"md-icon-button\"\r\n                            ng-click=\"vm.cancel()\">\r\n                            <ng-md-icon icon=\"close\"\r\n                                aria-label=\"Close\">\r\n                            </ng-md-icon>\r\n                        </md-button>\r\n                    </div>\r\n                </md-toolbar>\r\n                <md-dialog-content>\r\n                    <div class=\"md-dialog-content\">No se\r\n                        puede borrar el activo ROOT, ni los\r\n                        activos que tengan hijos, ni los dispositivos que estén delegados.</div>\r\n                </md-dialog-content>\r\n                <md-dialog-actions>\r\n                    <md-button ng-click=\"vm.cancel()\"\r\n                        class=\"md-primary\">Cancelar\r\n                    </md-button>\r\n                </md-dialog-actions>\r\n            </form>\r\n            <form name=\"form.deleteEntityForm\"\r\n                class=\"delete-entity-form\"\r\n                ng-submit=\"vm.borrar()\"\r\n                ng-if=\"vm.entity.type!='ROOT' && vm.borrable==true\">\r\n                <md-toolbar>\r\n                    <div class=\"md-toolbar-tools\">\r\n                        <h2>Borrar\r\n                            {{vm.attributes.nombreEntidad}}\r\n                        </h2>\r\n                        <span flex></span>\r\n                        <md-button class=\"md-icon-button\"\r\n                            ng-click=\"vm.cancel()\">\r\n                            <ng-md-icon icon=\"close\"\r\n                                aria-label=\"Close\">\r\n                            </ng-md-icon>\r\n                        </md-button>\r\n                    </div>\r\n                </md-toolbar>\r\n                <md-dialog-content>\r\n                    <div class=\"md-dialog-content\">\r\n                        Esta operación no es reversible.\r\n                    </div>\r\n                </md-dialog-content>\r\n                <md-dialog-actions>\r\n                    <md-button type=\"submit\"\r\n                        class=\"md-primary\">Borrar\r\n                    </md-button>\r\n                    <md-button ng-click=\"vm.cancel()\"\r\n                        class=\"md-raised md-primary\">\r\n                        Cancelar\r\n                    </md-button>\r\n                </md-dialog-actions>\r\n            </form>\r\n        </md-tab>\r\n    </md-tabs>\r\n</md-dialog>\r\n\r\n<!--=======================================================================-->\r\n<!--=====  There are two example templates: for edit and add entity   =====-->\r\n<!--=======================================================================-->\r\n<!--========================  Edit entity example  ========================-->\r\n<!--=======================================================================-->\r\n<!-- -->\r\n<!--<md-dialog aria-label=\"Edit entity\">-->\r\n<!--    <form name=\"editEntityForm\" class=\"edit-entity-form\" ng-submit=\"vm.save()\">-->\r\n<!--        <md-toolbar>-->\r\n<!--            <div class=\"md-toolbar-tools\">-->\r\n<!--                <h2>Edit {{vm.entityType.toLowerCase()}} {{vm.entityName}}</h2>-->\r\n<!--                <span flex></span>-->\r\n<!--                <md-button class=\"md-icon-button\" ng-click=\"vm.cancel()\">-->\r\n<!--                    <ng-md-icon icon=\"close\" aria-label=\"Close\"></ng-md-icon>-->\r\n<!--                </md-button>-->\r\n<!--            </div>-->\r\n<!--        </md-toolbar>-->\r\n<!--        <md-dialog-content>-->\r\n<!--            <div class=\"md-dialog-content\">-->\r\n<!--                <div layout=\"row\">-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Entity Name</label>-->\r\n<!--                        <input ng-model=\"vm.entityName\" readonly>-->\r\n<!--                    </md-input-container>-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Entity Type</label>-->\r\n<!--                        <input ng-model=\"vm.entityType\" readonly>-->\r\n<!--                    </md-input-container>-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Type</label>-->\r\n<!--                        <input ng-model=\"vm.type\" readonly>-->\r\n<!--                    </md-input-container>-->\r\n<!--                </div>-->\r\n<!--                <div layout=\"row\">-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Latitude</label>-->\r\n<!--                        <input name=\"latitude\" type=\"number\" step=\"any\" ng-model=\"vm.attributes.latitude\">-->\r\n<!--                    </md-input-container>-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Longitude</label>-->\r\n<!--                        <input name=\"longitude\" type=\"number\" step=\"any\" ng-model=\"vm.attributes.longitude\">-->\r\n<!--                    </md-input-container>-->\r\n<!--                </div>-->\r\n<!--                 <div layout=\"row\">-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Address</label>-->\r\n<!--                        <input ng-model=\"vm.attributes.address\">-->\r\n<!--                    </md-input-container>-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Owner</label>-->\r\n<!--                        <input ng-model=\"vm.attributes.owner\">-->\r\n<!--                    </md-input-container>-->\r\n<!--                </div>-->\r\n<!--                <div layout=\"row\">-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Integer Value</label>-->\r\n<!--                        <input name=\"integerNumber\" type=\"number\" step=\"1\" ng-pattern=\"/^-?[0-9]+$/\" ng-model=\"vm.attributes.number\">-->\r\n<!--                        <div ng-messages=\"editEntityForm.integerNumber.$error\">-->\r\n<!--                            <div ng-message=\"pattern\">Invalid integer value.</div>-->\r\n<!--                        </div>-->\r\n<!--                    </md-input-container>-->\r\n<!--                    <div class=\"boolean-value-input\" layout=\"column\" layout-align=\"center start\" flex>-->\r\n<!--                        <label class=\"checkbox-label\">Boolean Value</label>-->\r\n<!--                        <md-checkbox ng-model=\"vm.attributes.booleanValue\" style=\"margin-bottom: 40px;\">-->\r\n<!--                            {{ (vm.attributes.booleanValue ? \"value.true\" : \"value.false\") | translate }}-->\r\n<!--                        </md-checkbox>-->\r\n<!--                    </div>-->\r\n<!--                </div>-->\r\n<!--                <div class=\"relations-list old-relations\">-->\r\n<!--                    <div class=\"md-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>-->\r\n<!--                    <div class=\"body\" ng-show=\"vm.relations.length\">-->\r\n<!--                        <div class=\"row\" layout=\"row\" layout-align=\"start center\" ng-repeat=\"relation in vm.relations track by $index\">-->\r\n<!--                            <div class=\"md-whiteframe-1dp\" flex layout=\"row\" style=\"padding-left: 5px; margin-bottom: 3px;\">-->\r\n<!--                                <div flex layout=\"column\">-->\r\n<!--                                    <div layout=\"row\">-->\r\n<!--                                        <md-input-container class=\"md-block\" style=\"min-width: 100px;\">-->\r\n<!--                                            <label>Direction</label>-->\r\n<!--                                            <md-select ng-disabled=\"true\" required ng-model=\"relation.direction\">-->\r\n<!--                                                <md-option ng-repeat=\"direction in vm.entitySearchDirection\" ng-value=\"direction\">-->\r\n<!--                                                    {{ (\"relation.search-direction.\" + direction) | translate}}-->\r\n<!--                                                </md-option>-->\r\n<!--                                            </md-select>-->\r\n<!--                                        </md-input-container>-->\r\n<!--                                        <tb-relation-type-autocomplete ng-disabled=\"true\" flex class=\"md-block\"-->\r\n<!--                                           the-form=\"editEntityForm\"-->\r\n<!--                                           ng-model=\"relation.relationType\"-->\r\n<!--                                           tb-required=\"true\">-->\r\n<!--                                        </tb-relation-type-autocomplete>-->\r\n<!--                                    </div>-->\r\n<!--                                    <div layout=\"row\">-->\r\n<!--                                        <tb-entity-select flex class=\"md-block\"-->\r\n<!--                                            the-form=\"editEntityForm\"-->\r\n<!--                                            ng-disabled=\"true\"-->\r\n<!--                                            tb-required=\"true\"-->\r\n<!--                                            ng-model=\"relation.relatedEntity\">-->\r\n<!--                                        </tb-entity-select>-->\r\n<!--                                    </div>-->\r\n<!--                                </div>-->\r\n<!--                                <div layout=\"column\" layout-align=\"center center\">-->\r\n<!--                                    <md-button class=\"md-icon-button md-primary\" style=\"width: 40px; min-width: 40px;\"-->\r\n<!--                                               ng-click=\"vm.removeOldRelation($index,relation)\" aria-label=\"Remove\">-->\r\n<!--                                        <md-tooltip md-direction=\"top\">Remove relation</md-tooltip>-->\r\n<!--                                        <md-icon aria-label=\"Remove\" class=\"material-icons\">-->\r\n<!--                                            close-->\r\n<!--                                        </md-icon>-->\r\n<!--                                    </md-button>-->\r\n<!--                                </div>-->\r\n<!--                            </div>-->\r\n<!--                        </div>-->\r\n<!--                    </div>-->\r\n<!--                </div>-->\r\n<!--                <div class=\"relations-list\">-->\r\n<!--                    <div class=\"md-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">New Relations</div>-->\r\n<!--                    <div class=\"body\" ng-show=\"vm.newRelations.length\">-->\r\n<!--                        <div class=\"row\" layout=\"row\" layout-align=\"start center\" ng-repeat=\"relation in vm.newRelations track by $index\">-->\r\n<!--                            <div class=\"md-whiteframe-1dp\" flex layout=\"row\" style=\"padding-left: 5px; margin-bottom: 3px;\">-->\r\n<!--                                <div flex layout=\"column\">-->\r\n<!--                                    <div layout=\"row\">-->\r\n<!--                                        <md-input-container class=\"md-block\" style=\"min-width: 100px;\">-->\r\n<!--                                            <label>Direction</label>-->\r\n<!--                                            <md-select name=\"direction\" required ng-model=\"relation.direction\">-->\r\n<!--                                                <md-option ng-repeat=\"direction in vm.entitySearchDirection\" ng-value=\"direction\">-->\r\n<!--                                                    {{ (\"relation.search-direction.\" + direction) | translate}}-->\r\n<!--                                                </md-option>-->\r\n<!--                                            </md-select>-->\r\n<!--                                            <div ng-messages=\"editEntityForm.direction.$error\">-->\r\n<!--                                                <div ng-message=\"required\">Relation direction is required.</div>-->\r\n<!--                                            </div>-->\r\n<!--                                        </md-input-container>-->\r\n<!--                                        <tb-relation-type-autocomplete flex class=\"md-block\"-->\r\n<!--                                           the-form=\"editEntityForm\"-->\r\n<!--                                           ng-model=\"relation.relationType\"-->\r\n<!--                                           tb-required=\"true\">-->\r\n<!--                                        </tb-relation-type-autocomplete>-->\r\n<!--                                    </div>-->\r\n<!--                                    <div layout=\"row\">-->\r\n<!--                                        <tb-entity-select flex class=\"md-block\"-->\r\n<!--                                            the-form=\"editEntityForm\"-->\r\n<!--                                            tb-required=\"true\"-->\r\n<!--                                            ng-model=\"relation.relatedEntity\">-->\r\n<!--                                        </tb-entity-select>-->\r\n<!--                                    </div>-->\r\n<!--                                </div>-->\r\n<!--                                <div layout=\"column\" layout-align=\"center center\">-->\r\n<!--                                    <md-button class=\"md-icon-button md-primary\" style=\"width: 40px; min-width: 40px;\"-->\r\n<!--                                               ng-click=\"vm.removeRelation($index)\" aria-label=\"Remove\">-->\r\n<!--                                        <md-tooltip md-direction=\"top\">Remove relation</md-tooltip>-->\r\n<!--                                        <md-icon aria-label=\"Remove\" class=\"material-icons\">-->\r\n<!--                                            close-->\r\n<!--                                        </md-icon>-->\r\n<!--                                    </md-button>-->\r\n<!--                                </div>-->\r\n<!--                            </div>-->\r\n<!--                        </div>-->\r\n<!--                    </div>-->\r\n<!--                   <div>-->\r\n<!--                       <md-button class=\"md-primary md-raised\" ng-click=\"vm.addRelation()\" aria-label=\"Add\">-->\r\n<!--                           <md-tooltip md-direction=\"top\">Add Relation</md-tooltip>-->\r\n<!--                           Add-->\r\n<!--                       </md-button>-->\r\n<!--                   </div> -->\r\n<!--                </div>-->\r\n<!--            </div>-->\r\n<!--        </md-dialog-content>-->\r\n<!--        <md-dialog-actions>-->\r\n<!--            <md-button type=\"submit\" ng-disabled=\"editEntityForm.$invalid || !editEntityForm.$dirty\" class=\"md-raised md-primary\">Save</md-button>-->\r\n<!--            <md-button ng-click=\"vm.cancel()\" class=\"md-primary\">Cancel</md-button>-->\r\n<!--        </md-dialog-actions>-->\r\n<!--    </form>-->\r\n<!--</md-dialog>-->\r\n<!---->\r\n<!--========================================================================-->\r\n<!--=========================  Add entity example  =========================-->\r\n<!--========================================================================-->\r\n<!---->\r\n<!--<md-dialog aria-label=\"Add entity\">-->\r\n<!--    <form name=\"addEntityForm\" class=\"add-entity-form\" ng-submit=\"vm.save()\">-->\r\n<!--        <md-toolbar>-->\r\n<!--            <div class=\"md-toolbar-tools\">-->\r\n<!--                <h2>Add entity</h2>-->\r\n<!--                <span flex></span>-->\r\n<!--                <md-button class=\"md-icon-button\" ng-click=\"vm.cancel()\">-->\r\n<!--                    <ng-md-icon icon=\"close\" aria-label=\"Close\"></ng-md-icon>-->\r\n<!--                </md-button>-->\r\n<!--            </div>-->\r\n<!--        </md-toolbar>-->\r\n<!--        <md-dialog-content>-->\r\n<!--            <div class=\"md-dialog-content\">-->\r\n<!--                <div layout=\"row\">-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Entity Name</label>-->\r\n<!--                        <input ng-model=\"vm.entityName\" name=entityName required>-->\r\n<!--                        <div ng-messages=\"addEntityForm.entityName.$error\">-->\r\n<!--                            <div ng-message=\"required\">Entity name is required.</div>-->\r\n<!--                        </div>-->\r\n<!--                    </md-input-container>-->\r\n<!--                    <tb-entity-type-select class=\"md-block\" style=\"min-width: 100px; width: 100px;\"-->\r\n<!--                       the-form=\"addEntityForm\"-->\r\n<!--                       tb-required=\"true\"-->\r\n<!--                       allowed-entity-types=\"vm.allowedEntityTypes\"-->\r\n<!--                       ng-model=\"vm.entityType\">-->\r\n<!--                    </tb-entity-type-select>-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Entity Subtype</label>-->\r\n<!--                        <input ng-model=\"vm.type\" name=type required>-->\r\n<!--                        <div ng-messages=\"addEntityForm.type.$error\">-->\r\n<!--                            <div ng-message=\"required\">Entity subtype is required.</div>-->\r\n<!--                        </div>-->\r\n<!--                    </md-input-container>-->\r\n<!--                </div>-->\r\n<!--                <div layout=\"row\">-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Latitude</label>-->\r\n<!--                        <input name=\"latitude\" type=\"number\" step=\"any\" ng-model=\"vm.attributes.latitude\">-->\r\n<!--                    </md-input-container>-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Longitude</label>-->\r\n<!--                        <input name=\"longitude\" type=\"number\" step=\"any\" ng-model=\"vm.attributes.longitude\">-->\r\n<!--                    </md-input-container>-->\r\n<!--                </div>-->\r\n<!--                 <div layout=\"row\">-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Address</label>-->\r\n<!--                        <input ng-model=\"vm.attributes.address\">-->\r\n<!--                    </md-input-container>-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Owner</label>-->\r\n<!--                        <input ng-model=\"vm.attributes.owner\">-->\r\n<!--                    </md-input-container>-->\r\n<!--                </div>-->\r\n<!--                <div layout=\"row\">-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Integer Value</label>-->\r\n<!--                        <input name=\"integerNumber\" type=\"number\" step=\"1\" ng-pattern=\"/^-?[0-9]+$/\" ng-model=\"vm.attributes.number\">-->\r\n<!--                        <div ng-messages=\"addEntityForm.integerNumber.$error\">-->\r\n<!--                            <div ng-message=\"pattern\">Invalid integer value.</div>-->\r\n<!--                        </div>-->\r\n<!--                    </md-input-container>-->\r\n<!--                    <div class=\"boolean-value-input\" layout=\"column\" layout-align=\"center start\" flex>-->\r\n<!--                        <label class=\"checkbox-label\">Boolean Value</label>-->\r\n<!--                        <md-checkbox ng-model=\"vm.attributes.booleanValue\" style=\"margin-bottom: 40px;\">-->\r\n<!--                            {{ (vm.attributes.booleanValue ? \"value.true\" : \"value.false\") | translate }}-->\r\n<!--                        </md-checkbox>-->\r\n<!--                    </div>-->\r\n<!--                </div>-->\r\n<!--                <div class=\"relations-list\">-->\r\n<!--                    <div class=\"md-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>-->\r\n<!--                    <div class=\"body\" ng-show=\"vm.relations.length\">-->\r\n<!--                        <div class=\"row\" layout=\"row\" layout-align=\"start center\" ng-repeat=\"relation in vm.relations track by $index\">-->\r\n<!--                            <div class=\"md-whiteframe-1dp\" flex layout=\"row\" style=\"padding-left: 5px;\">-->\r\n<!--                                <div flex layout=\"column\">-->\r\n<!--                                    <div layout=\"row\">-->\r\n<!--                                        <md-input-container class=\"md-block\" style=\"min-width: 100px;\">-->\r\n<!--                                            <label>Direction</label>-->\r\n<!--                                            <md-select name=\"direction\" required ng-model=\"relation.direction\">-->\r\n<!--                                                <md-option ng-repeat=\"direction in vm.entitySearchDirection\" ng-value=\"direction\">-->\r\n<!--                                                    {{ (\"relation.search-direction.\" + direction) | translate}}-->\r\n<!--                                                </md-option>-->\r\n<!--                                            </md-select>-->\r\n<!--                                            <div ng-messages=\"addEntityForm.direction.$error\">-->\r\n<!--                                                <div ng-message=\"required\">Relation direction is required.</div>-->\r\n<!--                                            </div>-->\r\n<!--                                        </md-input-container>-->\r\n<!--                                        <tb-relation-type-autocomplete flex class=\"md-block\"-->\r\n<!--                                           the-form=\"addEntityForm\"-->\r\n<!--                                           ng-model=\"relation.relationType\"-->\r\n<!--                                           tb-required=\"true\">-->\r\n<!--                                        </tb-relation-type-autocomplete>-->\r\n<!--                                    </div>-->\r\n<!--                                    <div layout=\"row\">-->\r\n<!--                                        <tb-entity-select flex class=\"md-block\"-->\r\n<!--                                            the-form=\"addEntityForm\"-->\r\n<!--                                            tb-required=\"true\"-->\r\n<!--                                            ng-model=\"relation.relatedEntity\">-->\r\n<!--                                        </tb-entity-select>-->\r\n<!--                                    </div>-->\r\n<!--                                </div>-->\r\n<!--                                <div layout=\"column\" layout-align=\"center center\">-->\r\n<!--                                    <md-button class=\"md-icon-button md-primary\" style=\"width: 40px; min-width: 40px;\"-->\r\n<!--                                               ng-click=\"vm.removeRelation($index)\" aria-label=\"Remove\">-->\r\n<!--                                        <md-tooltip md-direction=\"top\">Remove relation</md-tooltip>-->\r\n<!--                                        <md-icon aria-label=\"Remove\" class=\"material-icons\">-->\r\n<!--                                            close-->\r\n<!--                                        </md-icon>-->\r\n<!--                                    </md-button>-->\r\n<!--                                </div>-->\r\n<!--                            </div>-->\r\n<!--                        </div>-->\r\n<!--                    </div>-->\r\n<!--                   <div>-->\r\n<!--                       <md-button class=\"md-primary md-raised\" ng-click=\"vm.addRelation()\" aria-label=\"Add\">-->\r\n<!--                           <md-tooltip md-direction=\"top\">Add Relation</md-tooltip>-->\r\n<!--                           Add-->\r\n<!--                       </md-button>-->\r\n<!--                   </div> -->\r\n<!--                </div>-->\r\n<!--            </div>-->\r\n<!--        </md-dialog-content>-->\r\n<!--        <md-dialog-actions>-->\r\n<!--            <md-button type=\"submit\" ng-disabled=\"addEntityForm.$invalid || !addEntityForm.$dirty\" class=\"md-raised md-primary\">Create</md-button>-->\r\n<!--            <md-button ng-click=\"vm.cancel()\" class=\"md-primary\">Cancel</md-button>-->\r\n<!--        </md-dialog-actions>-->\r\n<!--    </form>-->\r\n<!--</md-dialog>-->",
                "customCss": "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form md-input-container {\n    padding-right: 10px;\n}\n\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body md-autocomplete-wrap md-input-container {\n    height: 30px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n\n.relations-list.old-relations tb-entity-select tb-entity-autocomplete button {\n    display: none;\n} \n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form md-input-container {\n    padding-right: 10px;\n}\n\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body md-autocomplete-wrap md-input-container {\n    height: 30px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction": "var $injector = widgetContext.$scope.$injector;\r\nvar $mdDialog = $injector.get('$mdDialog'),\r\n    $document = $injector.get('$document'),\r\n    $location = $injector.get('$location'),\r\n    $q = $injector.get('$q'),\r\n    types = $injector.get('types'),\r\n    $rootScope = $injector.get('$rootScope'),\r\n    entityService = $injector.get('entityService'),\r\n    attributeService = $injector.get('attributeService'),\r\n    assetService = $injector.get('assetService'),\r\n    userService = $injector.get('userService'),\r\n    deviceService = $injector.get('deviceService'),\r\n    servicioHTTP = $injector.get(\r\n        '$http'),\r\n    entityRelationService = $injector.get(\r\n        'entityRelationService');\r\n\r\n//Obtengo el código de configuración del tipo de nodo\r\nvar notificaciones =\r\n    '<md-card> Notificaciones <md-card ng-if=\"vm.viasNotificacion.email\"> <label class=\"checkbox-label\">email</label> <md-checkbox ng-disabled=\"!vm.configuracion.__alarmas.cambioDeEstado.enable || !vm.viasNotificacion.email\" ng-model=\"vm.configuracion.__alarmas.cambioDeEstado.email\" style=\"margin-bottom: 10px;\"> {{ (vm.configuracion.__alarmas.cambioDeEstado.email ? \"value.true\" : \"value.false\") | translate }} </md-checkbox> <md-card> <label class=\"checkbox-label\">Enviar al email principal</label> <md-checkbox ng-disabled=\"!vm.configuracion.__alarmas.cambioDeEstado.enable || !vm.viasNotificacion.email\" ng-model=\"vm.configuracion.__alarmas.cambioDeEstado.emailPrincipal\" style=\"margin-bottom: 10px;\"> {{ (vm.configuracion.__alarmas.cambioDeEstado.emailPrincipal ? \"value.true\" : \"value.false\") | translate }} </md-checkbox> <label>Enviar a emails adicionales</label> <md-chips ng-model=\"vm.configuracion.__alarmas.cambioDeEstado.emailsAdicionales\" placeholder=\"Máximo 3 emails\" md-removable=\"vm.configuracion.__alarmas.cambioDeEstado.enable && vm.viasNotificacion.email && vm.configuracion.__alarmas.cambioDeEstado.email\" md-enable-chip-edit=\"vm.configuracion.__alarmas.cambioDeEstado.enable && vm.viasNotificacion.email && vm.configuracion.__alarmas.cambioDeEstado.email\" md-max-chips=\"3\" readonly=\"!vm.configuracion.__alarmas.cambioDeEstado.enable || !vm.viasNotificacion.email || !vm.configuracion.__alarmas.cambioDeEstado.email\" ></md-chips> </md-card> </md-card> <md-card ng-if=\"vm.viasNotificacion.telegram\"> <label class=\"checkbox-label\">Telegram</label> <md-checkbox ng-disabled=\"!vm.configuracion.__alarmas.cambioDeEstado.enable || !vm.viasNotificacion.telegram\" ng-model=\"vm.configuracion.__alarmas.cambioDeEstado.telegram\" style=\"margin-bottom: 10px;\"> {{ (vm.configuracion.__alarmas.cambioDeEstado.telegram ? \"value.true\" : \"value.false\") | translate }} </md-checkbox> </md-card> <md-card ng-if=\"vm.viasNotificacion.ifttt\"> <div flex layout=\"column\"> <label class=\"checkbox-label\">IFTTT</label> <md-checkbox ng-disabled=\"!vm.configuracion.__alarmas.cambioDeEstado.enable || !vm.viasNotificacion.ifttt\" ng-model=\"vm.configuracion.__alarmas.cambioDeEstado.ifttt\" style=\"margin-bottom: 10px;\"> {{ (vm.configuracion.__alarmas.cambioDeEstado.ifttt ? \"value.true\" : \"value.false\") | translate }} </md-checkbox> </div> <md-input-container flex class=\"md-block\"> <label>Evento IFTTT</label> <input size=\"40\" ng-disabled=\"!vm.configuracion.__alarmas.cambioDeEstado.enable || !vm.configuracion.__alarmas.cambioDeEstado.ifttt\" ng-model=\"vm.configuracion.__alarmas.cambioDeEstado.iftttEvento\" ng-required=\"vm.configuracion.__alarmas.cambioDeEstado.enable && vm.configuracion.__alarmas.cambioDeEstado.ifttt\" /> </md-input-container> </md-card> <!--Final notificaciones--></md-card>';\r\nvar chirpstack =\r\n    '<div class=\"body\"> <div class=\"row\" layout=\"row\" layout-align=\"start center\"> <div class=\"md-whiteframe-1dp\" flex layout=\"column\" style=\"padding-left: 5px; margin-bottom: 3px;\"> <div class=\"md-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">ChirpStack</div><div class=\"row\" layout=\"column\"> <md-input-container flex class=\"md-block\"> <label>URL de ChirpStack</label> <input type=\"text\" size=\"30\" ng-model=\"vm.configuracion.__cs_url\" placeholder=\"https://my.iotopentech.io:8080\"/> </md-input-container><md-input-container flex class=\"md-block\"> <label>JWT ChirpStack</label> <input type=\"password\" size=\"30\" ng-model=\"vm.configuracion.__cs_token\" /> </md-input-container> </div> </div> </div></div>';\r\nvar coordenadas =\r\n    '<div class=\"md-body-1\" style=\"padding-bottom: 10px; color: rgba(0, 0, 0, 0.57);\">Coordenadas</div><div class=\"body\" style=\"margin-bottom: 25px;\"> <div class=\"row\" layout=\"row\" layout-align=\"start center\"> <div class=\"md-whiteframe-1dp\" flex layout=\"column\" style=\"padding-left: 5px; margin-bottom: 3px;\"> <div class=\"row\" layout=\"row\"> <md-radio-group ng-model=\"vm.configuracion.__tipoCoordenadas\"> <md-radio-button value=\"Imagen\">Imagen</md-radio-button> <md-radio-button value=\"Mapa\">Mapa</md-radio-button> </md-radio-group> </div> <div class=\"row\" layout=\"row\" ng-if=\"vm.configuracion.__tipoCoordenadas==\\'Imagen\\'\"> <md-input-container flex class=\"md-block\"> <label>Posicion X (expresada entre 0 y 1)</label> <input type=\"number\" size=\"10\" step=\".01\" min=\"0\" max=\"1\" ng-model=\"vm.configuracion.__xPos\" ng-required=\"vm.configuracion.__tipoCoordenadas==\\'Imagen\\'\"/> </md-input-container> <md-input-container flex class=\"md-block\"> <label>Posicion Y (expresada entre 0 y 1)</label> <input type=\"number\" size=\"10\" step=\"0.01\" min=\"0.00\" max=\"1.00\" ng-model=\"vm.configuracion.__yPos\" ng-required=\"vm.configuracion.__tipoCoordenadas==\\'Imagen\\'\"/> </md-input-container> </div> <div class=\"row\" layout=\"row\" ng-if=\"vm.configuracion.__tipoCoordenadas==\\'Mapa\\'\"> <md-input-container flex class=\"md-block\"> <label>Latitud</label> <input type=\"number\" size=\"10\" step=\".01\" min=\"0\" max=\"1\" ng-model=\"vm.configuracion.__latitude\" ng-required=\"vm.configuracion.__tipoCoordenadas==\\'Mapa\\'\"/> </md-input-container> <md-input-container flex class=\"md-block\"> <label>Longitud</label> <input type=\"number\" size=\"10\" step=\"0.01\" min=\"0.00\" max=\"1.00\" ng-model=\"vm.configuracion.__longitude\" ng-required=\"vm.configuracion.__tipoCoordenadas==\\'Mapa\\'\"/> </md-input-container> </div> </div> </div></div>';\r\n\r\nvar subtipo = \"\";\r\nvar configurable = false;\r\nvar htmlTemplate2 = htmlTemplate;\r\nvar emailsAdicionales = [];\r\nvar allowedEntityTypes = [];\r\nvar funciones = [];\r\n/*\r\nif (entityId.entityType != types\r\n    .entityType.device) {\r\n    openEditEntityDialog();\r\n} else {\r\n*/\r\nentityService.getEntity(entityId.entityType,\r\n    entityId.id).then(\r\n    function(entity) {\r\n        subtipo = entity.type;\r\n        //console.log(subtipo);\r\n        attributeService.getEntityAttributesValues(\r\n            'CUSTOMER', userService\r\n            .getCurrentUser()\r\n            .customerId,\r\n            'SERVER_SCOPE').then(\r\n            function(data) {\r\n\r\n                if (data.length) {\r\n                    getConfiguracion(\r\n                        data);\r\n                }\r\n            });\r\n\r\n\r\n    });\r\n\r\n//getConfiguracion();\r\n//}\r\n\r\n//openEditEntityDialog();\r\n\r\nfunction getConfiguracion(attributes) {\r\n\r\n    for (var i = 0; i < attributes.length; i++) {\r\n\r\n        if (attributes[i].key ==\r\n            subtipo + \"_config\") {\r\n\r\n            configurable = true;\r\n            var copia = attributes[i].value;\r\n\r\n            //Extraigo las funciones\r\n            //No puede haber nada por delante de las funciones en el atributo config\r\n            funciones = copia.split('</funciones>');\r\n            if (funciones.length == 2) {\r\n                copia = funciones[\r\n                    1]; //Me quedo con la parte HTML\r\n                //Hay declaración de funciones\r\n                funciones = funciones[0].split(\r\n                    '<funciones>');\r\n                funciones = funciones[1];\r\n\r\n                funciones = JSON.parse(funciones);\r\n            }\r\n            var parser = new DOMParser();\r\n            var xmlText = new XMLSerializer();\r\n\r\n            var xmlDoc = parser.parseFromString(copia,\r\n                \"text/xml\");\r\n            var xmlDevEUI = parser.parseFromString(\r\n                '<panel titulo=\"Device EUI\" resumen=\"Indicar el Device EUI del dispositivo\" nombreFormulario=\"DeviceEUI\" ultimoDownlink=\"devEUI\">        <item tipo=\"atributoCompartido\" nombreAtributo=\"devEUI\" labelAtributo=\"Device EUI expresado en hexadecimal\" tipoAtributo=\"texto\">            <atributosHTML size=\"16\" maxlength=\"16\" pattern=\"[0-9a-fA-F]{16}\" autocomplete=\"off\" />        </item>    </panel>',\r\n                \"text/xml\");\r\n            myIoT = xmlDoc.documentElement;\r\n\r\n            var salida =\r\n                \"<md-dialog-content><div class='md-dialog-content' flex><md-expansion-panel-group>\";\r\n            var paneles = myIoT.children;\r\n\r\n            for (j = 0; j < paneles.length; j++) {\r\n                if (paneles[j].nodeName != 'panel') {\r\n                    //Si no es un panel lo copiamos directamente\r\n                    salida += xmlText.serializeToString(\r\n                        paneles[j]);\r\n                } else {\r\n                    if (paneles[j].hasAttribute('tipo') &&\r\n                        paneles[j].getAttribute('tipo') ==\r\n                        'devEUI') {\r\n                        myIoT.replaceChild(xmlDevEUI\r\n                            .documentElement, paneles[j]\r\n                        );\r\n                    }\r\n                    salida +=\r\n                        '<md-expansion-panel ';\r\n                    //Gestionar si tiene permiso para ver el panel \r\n                    if (paneles[j].hasAttribute(\r\n                            'ultimoDownlink')) {\r\n                        salida +=\r\n                            'ng-if=\"!vm.attributes.hasOwnProperty(\\'esDelegado\\') || (vm.attributes.esDelegado===false)||(vm.attributes.esDelegado===true && vm.attributes.delegacion.hasOwnProperty(\\'';\r\n                        var ultimoDownlinkPanel = paneles[\r\n                                j]\r\n                            .getAttribute(\r\n                                'ultimoDownlink'\r\n                            );\r\n\r\n                        salida +=\r\n                            ultimoDownlinkPanel;\r\n                        salida +=\r\n                            '\\') && vm.attributes.delegacion.';\r\n                        salida +=\r\n                            ultimoDownlinkPanel;\r\n                        salida +=\r\n                            '===true)\"';\r\n                    }\r\n\r\n\r\n                    salida +=\r\n                        '><md-expansion-panel-collapsed><div class=\"md-title\">';\r\n                    salida += paneles[j].getAttribute(\r\n                        'titulo');\r\n                    salida +=\r\n                        '</div><div class=\"md-summary\">';\r\n                    salida += paneles[j].getAttribute(\r\n                        'resumen');\r\n                    salida +=\r\n                        '</div><md-expansion-panel-icon></md-expansion-panel-icon></md-expansion-panel-collapsed><md-expansion-panel-expanded><md-expansion-panel-header ng-click=\"$panel.collapse()\"><div class=\"md-title\">';\r\n                    salida += paneles[j].getAttribute(\r\n                        'titulo');\r\n                    salida +=\r\n                        '</div><div class=\"md-summary\">';\r\n                    salida += paneles[j].getAttribute(\r\n                        'resumen');\r\n                    salida +=\r\n                        '</div><md-expansion-panel-icon></md-expansion-panel-icon></md-expansion-panel-header><md-expansion-panel-content><form class=\"configure-entity-form\" ng-submit=\"vm.configurar()\" name=\"form.configuracion' +\r\n                        paneles[j].getAttribute(\r\n                            'nombreFormulario');\r\n\r\n                    salida += '\">';\r\n\r\n                    var items = paneles[j]\r\n                        .children;\r\n\r\n                    for (k = 0; k < items.length; k++) {\r\n                        if (items[k].nodeName != 'item') {\r\n                            //Si no es un item lo copiamos directamente\r\n                            salida += xmlText\r\n                                .serializeToString(\r\n                                    items[k]);\r\n                        } else {\r\n                            var tipoItem = items[k]\r\n                                .getAttribute(\r\n                                    'tipo');\r\n                            switch (tipoItem) {\r\n                                case 'coordenadas':\r\n                                    salida += coordenadas;\r\n                                    break;\r\n                                case 'chirpstack':\r\n                                    salida += chirpstack;\r\n                                    break;\r\n                                case 'alarma':\r\n                                    if (items[k]\r\n                                        .hasAttribute(\r\n                                            'telemetria')) {\r\n                                        salida +=\r\n                                            '<div class=\"body md-whiteframe-1dp\" style=\"margin-bottom: 25px;\" ng-if=\"!vm.attributes.hasOwnProperty(\\'esDelegado\\') || (vm.attributes.esDelegado===false)||(vm.attributes.esDelegado===true && vm.attributes.delegacion.hasOwnProperty(\\'';\r\n                                        telemetria = items[\r\n                                                k]\r\n                                            .getAttribute(\r\n                                                'telemetria'\r\n                                            );\r\n                                        nombreAlarma =\r\n                                            items[k]\r\n                                            .getAttribute(\r\n                                                'nombreAlarma'\r\n                                            );\r\n                                        salida +=\r\n                                            telemetria;\r\n                                        salida +=\r\n                                            '\\') && vm.attributes.delegacion.';\r\n                                        salida +=\r\n                                            telemetria;\r\n                                        salida +=\r\n                                            '===true)\">';\r\n                                        salida +=\r\n                                            '<label class=\"checkbox-label\">';\r\n                                        salida +=\r\n                                            \"Activar alarma de \" +\r\n                                            items[k]\r\n                                            .getAttribute(\r\n                                                'labelAlarma'\r\n                                            );\r\n                                        salida +=\r\n                                            '</label><md-checkbox ng-model=\"vm.configuracion.__alarmas.';\r\n                                        salida +=\r\n                                            nombreAlarma;\r\n                                        salida +=\r\n                                            '.enable\" style=\"margin-bottom: 10px;\">{{(vm.configuracion.__alarmas.';\r\n                                        salida +=\r\n                                            nombreAlarma;\r\n                                        salida +=\r\n                                            '.enable ? \"value.true\" : \"value.false\") | translate}}</md-checkbox>';\r\n                                        salida +=\r\n                                            '<md-content class=\"md-padding\" layout-xs=\"column\" layout=\"row\"><div flex-xs flex-gt-xs=\"50\" layout=\"column\">';\r\n\r\n                                        switch (items[k]\r\n                                            .getAttribute(\r\n                                                'tipoAlarma'\r\n                                            )) {\r\n                                            case 'opciones':\r\n                                                salida +=\r\n                                                    '<md-card><div flex layout=\"column\"><md-input-container flex class=\"md-block\"><label>';\r\n                                                salida +=\r\n                                                    items[\r\n                                                        k]\r\n                                                    .getAttribute(\r\n                                                        'labelAuxAlarma'\r\n                                                    );\r\n                                                salida +=\r\n                                                    '</label><md-select ng-disabled=\"!vm.configuracion.__alarmas.';\r\n                                                salida +=\r\n                                                    nombreAlarma;\r\n                                                salida +=\r\n                                                    '.enable\" ng-required=\"vm.configuracion.__alarmas.';\r\n                                                salida +=\r\n                                                    nombreAlarma;\r\n                                                salida +=\r\n                                                    '.enable\" ng-model=\"vm.configuracion.__alarmas.';\r\n                                                salida +=\r\n                                                    nombreAlarma;\r\n                                                salida +=\r\n                                                    '.trigger\">';\r\n                                                opciones =\r\n                                                    items[\r\n                                                        k]\r\n                                                    .getAttribute(\r\n                                                        'opciones'\r\n                                                    ).split(\r\n                                                        '/'\r\n                                                    );\r\n                                                for (var opcion of\r\n                                                        opciones) {\r\n                                                    salida\r\n                                                        +=\r\n                                                        '<md-option value=\"';\r\n                                                    salida\r\n                                                        +=\r\n                                                        opcion;\r\n                                                    salida\r\n                                                        +=\r\n                                                        '\">';\r\n                                                    salida\r\n                                                        +=\r\n                                                        opcion;\r\n                                                    salida\r\n                                                        +=\r\n                                                        '</md-option>';\r\n                                                }\r\n                                                salida +=\r\n                                                    '</md-select></md-input-container></div></md-card>';\r\n\r\n                                                break;\r\n                                            case 'umbralMinimo':\r\n                                            case 'umbralMaximo':\r\n                                            case 'biUmbral':\r\n\r\n                                                if (items[k]\r\n                                                    .getAttribute(\r\n                                                        'tipoAlarma'\r\n                                                    ) ==\r\n                                                    'umbralMinimo'\r\n                                                ) {\r\n                                                    umbrales\r\n                                                        = [\r\n                                                            'Minimo'\r\n                                                        ];\r\n                                                } else if (\r\n                                                    items[k]\r\n                                                    .getAttribute(\r\n                                                        'tipoAlarma'\r\n                                                    ) ==\r\n                                                    'umbralMaximo'\r\n                                                ) {\r\n                                                    umbrales\r\n                                                        = [\r\n                                                            'Maximo'\r\n                                                        ];\r\n                                                } else {\r\n                                                    umbrales\r\n                                                        = ['Minimo',\r\n                                                            'Maximo'\r\n                                                        ];\r\n                                                }\r\n\r\n                                                if (items[k]\r\n                                                    .hasAttribute(\r\n                                                        'histeresis'\r\n                                                    )\r\n                                                ) {\r\n                                                    if (items[\r\n                                                            k\r\n                                                        ]\r\n                                                        .getAttribute(\r\n                                                            'histeresis'\r\n                                                        ) ==\r\n                                                        'min'\r\n                                                    ) {\r\n                                                        histeresis\r\n                                                            = {\r\n                                                                'Minimo': true,\r\n                                                                'Maximo': false\r\n                                                            }\r\n                                                    } else if (\r\n                                                        items[\r\n                                                            k\r\n                                                        ]\r\n                                                        .getAttribute(\r\n                                                            'histeresis'\r\n                                                        ) ==\r\n                                                        'max'\r\n                                                    ) {\r\n                                                        histeresis\r\n                                                            = {\r\n                                                                'Minimo': false,\r\n                                                                'Maximo': true\r\n                                                            };\r\n\r\n\r\n                                                    } else if (\r\n                                                        items[\r\n                                                            k\r\n                                                        ]\r\n                                                        .getAttribute(\r\n                                                            'histeresis'\r\n                                                        ) ==\r\n                                                        'bi'\r\n                                                    ) {\r\n                                                        histeresis\r\n                                                            = {\r\n                                                                'Minimo': true,\r\n                                                                'Maximo': true\r\n                                                            }\r\n                                                    } else {\r\n                                                        histeresis\r\n                                                            = {\r\n                                                                'Minimo': false,\r\n                                                                'Maximo': false\r\n                                                            };\r\n                                                    }\r\n                                                } else {\r\n                                                    histeresis\r\n                                                        = {\r\n                                                            'Minimo': false,\r\n                                                            'Maximo': false\r\n                                                        };\r\n                                                }\r\n\r\n                                                for (var p =\r\n                                                        0; p <\r\n                                                    umbrales\r\n                                                    .length; p++\r\n                                                ) {\r\n                                                    umbral =\r\n                                                        umbrales[\r\n                                                            p\r\n                                                        ];\r\n                                                    console\r\n                                                        .log(\r\n                                                            umbral\r\n                                                        );\r\n                                                    salida\r\n                                                        +=\r\n                                                        '<md-card><div flex layout=\"column\"><md-input-container flex class=\"md-block\">';\r\n                                                    salida\r\n                                                        +=\r\n                                                        '<label>Umbral ' +\r\n                                                        (umbral ==\r\n                                                            'Minimo' ?\r\n                                                            'mínimo ' :\r\n                                                            'máximo '\r\n                                                        );\r\n                                                    salida\r\n                                                        +=\r\n                                                        items[\r\n                                                            k\r\n                                                        ]\r\n                                                        .getAttribute(\r\n                                                            'labelAuxAlarma'\r\n                                                        );\r\n                                                    salida\r\n                                                        +=\r\n                                                        '</label> <input type=\"number\" ng-disabled=\"!vm.configuracion.__alarmas.' +\r\n                                                        nombreAlarma +\r\n                                                        '.enable \" ng-model=\"vm.configuracion.__alarmas.' +\r\n                                                        nombreAlarma +\r\n                                                        '.umbral' +\r\n                                                        umbral +\r\n                                                        '\" ng-required=\"vm.configuracion.__alarmas.' +\r\n                                                        nombreAlarma +\r\n                                                        '\"';\r\n                                                    //Atributos HTML\r\n                                                    if (items[\r\n                                                            k\r\n                                                        ]\r\n                                                        .getElementsByTagName(\r\n                                                            \"umbral\" +\r\n                                                            umbral\r\n                                                        )\r\n                                                        .length ==\r\n                                                        1\r\n                                                    ) {\r\n                                                        var atributosComodin =\r\n                                                            items[\r\n                                                                k\r\n                                                            ]\r\n                                                            .getElementsByTagName(\r\n                                                                \"umbral\" +\r\n                                                                umbral\r\n                                                            )[\r\n                                                                0\r\n                                                            ]\r\n                                                            .attributes;\r\n                                                        for (\r\n                                                            var n =\r\n                                                                0; n <\r\n                                                            atributosComodin\r\n                                                            .length; n++\r\n                                                        ) {\r\n                                                            salida\r\n                                                                +=\r\n                                                                atributosComodin\r\n                                                                .item(\r\n                                                                    n\r\n                                                                )\r\n                                                                .nodeName +\r\n                                                                '=\"' +\r\n                                                                atributosComodin\r\n                                                                .item(\r\n                                                                    n\r\n                                                                )\r\n                                                                .nodeValue +\r\n                                                                '\" ';\r\n                                                        }\r\n                                                    }\r\n\r\n                                                    salida\r\n                                                        +=\r\n                                                        '/> </md-input-container>';\r\n\r\n                                                    if (\r\n                                                        histeresis[\r\n                                                            umbral\r\n                                                        ] ===\r\n                                                        true\r\n                                                    ) {\r\n                                                        salida\r\n                                                            +=\r\n                                                            '<md-input-container flex class=\"md-block\"> <label>Histéresis</label> <input type=\"number\" autocomplete=\"off\" ng-disabled=\"!vm.configuracion.__alarmas.' +\r\n                                                            nombreAlarma +\r\n                                                            '.enable \" ng-model=\"vm.configuracion.__alarmas.' +\r\n                                                            nombreAlarma +\r\n                                                            '.histeresis' +\r\n                                                            umbral +\r\n                                                            '\" ng-required=\"vm.configuracion.__alarmas.' +\r\n                                                            nombreAlarma +\r\n                                                            '.enable\" ';\r\n\r\n                                                        //Atributos HTML\r\n                                                        if (items[\r\n                                                                k\r\n                                                            ]\r\n                                                            .getElementsByTagName(\r\n                                                                \"histeresis\" +\r\n                                                                umbral\r\n                                                                )\r\n\r\n                                                            .length ==\r\n                                                            1\r\n                                                        ) {\r\n                                                            \r\n                                                            var atributosComodinHisteresis =\r\n                                                                items[\r\n                                                                    k\r\n                                                                ]\r\n                                                                .getElementsByTagName(\r\n                                                                    \"histeresis\" +\r\n                                                                    umbral\r\n                                                                    )[\r\n                                                                    0\r\n                                                                ]\r\n                                                                .attributes;\r\n                                                                \r\n                                                                \r\n                                                                \r\n                                                            for (\r\n                                                                var n =\r\n                                                                    0; n <\r\n                                                                atributosComodinHisteresis\r\n                                                                .length; n++\r\n                                                            ) {\r\n                                                                \r\n                                                                salida\r\n                                                                    +=\r\n                                                                    atributosComodinHisteresis\r\n                                                                    .item(\r\n                                                                        n\r\n                                                                    )\r\n                                                                    .nodeName +\r\n                                                                    '=\"' +\r\n                                                                    atributosComodinHisteresis\r\n                                                                    .item(\r\n                                                                        n\r\n                                                                    )\r\n                                                                    .nodeValue +\r\n                                                                    '\" ';\r\n                                                            }\r\n                                                        }\r\n\r\n\r\n\r\n                                                        salida\r\n                                                            +=\r\n                                                            '/> </md-input-container>'\r\n                                                    }\r\n\r\n                                                    salida\r\n                                                        +=\r\n                                                        '</div></md-card>';\r\n\r\n                                                }\r\n                                                break;\r\n\r\n                                        }\r\n                                        salida +=\r\n                                            '</div><div flex-xs flex-gt-xs=\"50\" layout=\"column\">';\r\n\r\n                                    } else {\r\n                                        //Alarma de inactividad\r\n                                        salida\r\n                                            +=\r\n                                            '<div class=\"body md-whiteframe-1dp\" style=\"margin-bottom: 25px;\"><label class=\"checkbox-label\">Activar alarma de inactividad</label><md-checkbox ng-model=\"vm.configuracion.__alarmas.inactividad.enable\" style=\"margin-bottom: 10px;\">{{(vm.configuracion.__alarmas.inactividad.enable ? \"value.true\" : \"value.false\") | translate}}</md-checkbox><md-content class=\"md-padding\" layout-xs=\"column\" layout=\"row\"><div flex-xs flex-gt-xs=\"50\" layout=\"column\"><md-card><div flex layout=\"column\"><md-input-container flex class=\"md-block\"><label>Umbral en segundos</label><input type=\"number\"size=\"10\" ng-disabled=\"!vm.configuracion.__alarmas.inactividad.enable \"ng-model=\"vm.configuracion.__alarmas.inactividad.umbralInactividad\" ng-required=\"vm.configuracion.__alarmas.inactividad.enable\"/></md-input-container></div></md-card></div><div flex-xs flex-gt-xs=\"50\" layout=\"column\">';\r\n                                        nombreAlarma\r\n                                            =\r\n                                            'inactividad';\r\n                                    }\r\n                                    //notificaciones\r\n                                    salida\r\n                                        +=\r\n                                        notificaciones\r\n                                        .replace(\r\n                                            /cambioDeEstado/g,\r\n                                            nombreAlarma\r\n                                        );\r\n                                    //El modificador /g de replace sustituye todas las ocurrencias\r\n                                    salida\r\n                                        +=\r\n                                        '</div></md-content></div>';\r\n                                    break;\r\n                                case 'atributoCompartido':\r\n                                case 'atributoInterno':\r\n\r\n                                    nombreAtributo\r\n                                        = items[k]\r\n                                        .getAttribute(\r\n                                            'nombreAtributo'\r\n                                        );\r\n                                    tipoAtributo\r\n                                        = items[k]\r\n                                        .getAttribute(\r\n                                            'tipoAtributo'\r\n                                        );\r\n                                    switch (\r\n                                        tipoAtributo\r\n                                    ) {\r\n                                        case 'opciones':\r\n                                            salida +=\r\n                                                '<label>' +\r\n                                                items[k]\r\n                                                .getAttribute(\r\n                                                    'labelAtributo'\r\n                                                ) +\r\n                                                '</label>';\r\n                                            salida +=\r\n                                                '<md-select ng-model=\"vm.configuracion.' +\r\n                                                (tipoItem ==\r\n                                                    'atributoCompartido' ?\r\n                                                    '___atributosCompartidos.' :\r\n                                                    '') +\r\n                                                nombreAtributo +\r\n                                                '\" class=\"md-no-underline\" placeholder=\"Elija una opción\">';\r\n                                            opciones =\r\n                                                items[\r\n                                                    k]\r\n                                                .getAttribute(\r\n                                                    'opciones'\r\n                                                ).split(\r\n                                                    '/'\r\n                                                );\r\n                                            for (var opcion of\r\n                                                    opciones) {\r\n                                                salida\r\n                                                    +=\r\n                                                    '<md-option value=\"';\r\n                                                salida\r\n                                                    +=\r\n                                                    opcion;\r\n                                                salida\r\n                                                    +=\r\n                                                    '\">';\r\n                                                salida\r\n                                                    +=\r\n                                                    opcion;\r\n                                                salida\r\n                                                    +=\r\n                                                    '</md-option>';\r\n                                            }\r\n                                            salida +=\r\n                                                '</md-select>';\r\n                                            break;\r\n                                        case 'texto':\r\n                                        case 'numero':\r\n\r\n                                            salida +=\r\n                                                '<md-input-container flex class=\"md-block\"><label>' +\r\n                                                items[k]\r\n                                                .getAttribute(\r\n                                                    'labelAtributo'\r\n                                                ) +\r\n                                                '</label>';\r\n\r\n\r\n                                            salida +=\r\n                                                '<input type=\"' +\r\n                                                (tipoAtributo ==\r\n                                                    'texto' ?\r\n                                                    'text' :\r\n                                                    'number'\r\n                                                ) +\r\n                                                '\" ng-model=\"vm.configuracion.' +\r\n                                                (tipoItem ==\r\n                                                    'atributoCompartido' ?\r\n                                                    '___atributosCompartidos.' :\r\n                                                    '') +\r\n                                                nombreAtributo +\r\n                                                '\" ';\r\n                                            if (items[\r\n                                                    k\r\n                                                ]\r\n                                                .getElementsByTagName(\r\n                                                    \"atributosHTML\"\r\n                                                ).length > 0\r\n                                            ) {\r\n                                                var atributosComodin =\r\n                                                    items[\r\n                                                        k\r\n                                                    ]\r\n                                                    .getElementsByTagName(\r\n                                                        \"atributosHTML\"\r\n                                                    )[\r\n                                                        0\r\n                                                    ]\r\n                                                    .attributes;\r\n                                                for (\r\n                                                    var n =\r\n                                                        0; n <\r\n                                                    atributosComodin\r\n                                                    .length; n++\r\n                                                ) {\r\n                                                    salida\r\n                                                        +=\r\n                                                        atributosComodin\r\n                                                        .item(\r\n                                                            n\r\n                                                        )\r\n                                                        .nodeName +\r\n                                                        '=\"' +\r\n                                                        atributosComodin\r\n                                                        .item(\r\n                                                            n\r\n                                                        )\r\n                                                        .nodeValue +\r\n                                                        '\" ';\r\n                                                }\r\n                                            }\r\n                                            salida +=\r\n                                                '/> </md-input-container>';\r\n                                            break;\r\n\r\n                                        case 'boton':\r\n                                            //Nada\r\n                                            break;\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    salida +=\r\n                        '<md-input-container style=\"margin: 0px; margin-top: 10px;\"><md-button type=\"submit\"';\r\n                    if (typeof(tipoAtributo) ===\r\n                        'undefined' ||\r\n                        tipoAtributo != 'boton') {\r\n                        //Los de tipo botón deben estar siempre activos\r\n                        salida +=\r\n                            'ng-disabled=\"form.configuracion' +\r\n                            paneles[j]\r\n                            .getAttribute(\r\n                                'nombreFormulario'\r\n                            ) +\r\n                            '.$invalid || !form.configuracion' +\r\n                            paneles[j]\r\n                            .getAttribute(\r\n                                'nombreFormulario'\r\n                            ) +\r\n                            '.$dirty\" class=\"md-raised md-primary\"';\r\n                    } else {\r\n                        //Si es un botón lo pongo en naranja\r\n                        salida +=\r\n                            ' class=\"md-raised md-warn md-primary\"';\r\n                    }\r\n\r\n                    salida += (\r\n                            paneles[j].hasAttribute(\r\n                                'ultimoDownlink') ?\r\n                            'ng-click=\"vm.configuracion.___ultimoDownlink=\\'' +\r\n                            paneles[j].getAttribute(\r\n                                'ultimoDownlink') +\r\n                            '\\'\"> ' : '> ') + (paneles[j]\r\n                            .hasAttribute(\r\n                                'labelBotonSubmit') ?\r\n                            paneles[j]\r\n                            .getAttribute(\r\n                                'labelBotonSubmit'\r\n                            ) : 'Configurar') +\r\n                        ' </md-button> </md-input-container>';\r\n\r\n\r\n                    salida +=\r\n                        '</form></md-expansion-panel-content></md-expansion-panel-expanded></md-expansion-panel>';\r\n\r\n                }\r\n            }\r\n            salida +=\r\n                '</md-expansion-panel-group></div></md-dialog-content><md-dialog-actions><md-button ng-click=\"vm.cancel()\" class=\"md-primary\">Cancelar</md-button></md-dialog-actions>';\r\n\r\n\r\n\r\n            //console.log(salida);\r\n            htmlTemplate2 = htmlTemplate2.replace(\r\n                '<sustituir class=\"ng-scope\"></sustituir>',\r\n                salida);\r\n\r\n            //console.log(salida);\r\n        } else if (attributes[i].key ==\r\n            subtipo + \"_delegate\") {\r\n            var copiaDelegacion =\r\n                attributes[i]\r\n                .value;\r\n            var parser = new DOMParser();\r\n            var xmlText = new XMLSerializer();\r\n            var xmlDoc = parser.parseFromString(\r\n                copiaDelegacion,\r\n                \"text/xml\");\r\n\r\n            myIoT = xmlDoc.documentElement;\r\n\r\n            var salida =\r\n                '<md-dialog-content> <div class=\"md-dialog-content\" flex> <md-expansion-panel-group> <md-expansion-panel md-component-id=\"panelDelegacion\" id=\"panelDelegacion\"> <md-expansion-panel-collapsed> <div class=\"md-title\" translate>Nueva delegaci&oacute;n</div> <div class=\"md-summary\">Delegar dispositivo en otro usuario</div> <md-expansion-panel-icon></md-expansion-panel-icon> </md-expansion-panel-collapsed> <md-expansion-panel-expanded> <md-expansion-panel-header ng-click=\"$panel.collapse()\"> <div class=\"md-title\" translate>Nueva delegaci&oacute;n</div> <div class=\"md-summary\">Delegar dispositivo en otro usuario</div> <md-expansion-panel-icon></md-expansion-panel-icon> </md-expansion-panel-header> <md-expansion-panel-content> <form name=\"form.crearDelegacion\" class=\"configure-entity-form\" ng-submit=\"vm.delegar()\"> <md-input-container flex class=\"md-block\"> <label>Nombre del dispositivo delegado</label> <input type=\"text\" size=\"30\" ng-model=\"vm.nombreDelegado\" ng-required=\"true\" /> </md-input-container> <md-input-container flex class=\"md-block\"> <label>Clave para reclamar el dispositivo delegado (si lo deja vacío se generará una clave automáticamente). No puede empezar por cero.</label> <input type=\"text\" size=\"30\" ng-model=\"vm.tokenDelegado\" pattern=\"^[1-9a-zA-Z][0-9a-zA-Z]*$\" placeholder=\"Sólo letras y números. No puede empezar por cero.\" /> </md-input-container> <md-input-container flex class=\"md-block\"> <label>La delegación se costea a cargo del crédito del </label> <md-select ng-required=\"true\" ng-model=\"vm.delegacionPorCargoDe\"> <md-option value=\"delegador\"> Delegador (yo) </md-option> <md-option value=\"delegado\"> Delegado (usuario que reclame el dispositivo delegado) </md-option> </md-select> </md-input-container> <md-input-container flex class=\"md-block\"> <md-button type=\"submit\" ng-disabled=\"form.crearDelegacion.$invalid || !form.crearDelegacion.$dirty\" class=\"md-raised md-primary\"> Delegar </md-button> </md-input-container> </form> </md-expansion-panel-content> </md-expansion-panel-expanded> </md-expansion-panel> <md-expansion-panel ng-repeat=\"delegado in vm.attributes.delegados\" md-component-id=\"panelConfiguracionDelegacion_{{$index}}\" id=\"panelConfiguracionDelegacion_{{$index}}\"> <md-expansion-panel-collapsed> <div class=\"md-title\" translate>{{delegado.nombre.substring(delegado.nombre.indexOf(\\'_\\')+1)}}</div> <div class=\"md-summary\">Configurar la delegaci&oacute;n</div> <md-expansion-panel-icon></md-expansion-panel-icon> </md-expansion-panel-collapsed> <md-expansion-panel-expanded> <md-expansion-panel-header ng-click=\"$panel.collapse()\"> <div class=\"md-title\" translate>{{delegado.nombre.substring(delegado.nombre.indexOf(\\'_\\')+1)}}</div> <div class=\"md-summary\">Configurar la delegaci&oacute;n</div> <md-expansion-panel-icon></md-expansion-panel-icon> </md-expansion-panel-header> <md-expansion-panel-content> <strong>Estado: </strong><span ng-if=\"delegado.reclamado\">Reclamado</span><span ng-if=\"!delegado.reclamado\">Aún no reclamado</span> <br /> <strong>Costeado por: </strong><span ng-if=\"delegado.delegacionPorCargoDe==\\'delegador\\'\">Mí (delegador)</span><span ng-if=\"delegado.delegacionPorCargoDe==\\'delegado\\'\">Delegado</span> <br /> <strong>Nombre de reclamación: </strong> {{delegado.nombre}}<br /> <md-button class=\"md-raised md-button ng-isolate-scope md-ink-ripple\" ngclipboard=\"\" data-clipboard-action=\"copy\" data-clipboard-text=\"{{delegado.claimingData.secretKey}}\">Copiar clave de reclamación</md-button> <br /> <br /> <form name=\"form.configurarDelegacion_{{$index}}\" class=\"configure-entity-form\" ng-submit=\"vm.configurarDelegacion(delegado.id,$index)\">';\r\n            var delegaciones = myIoT.children;\r\n\r\n            for (j = 0; j < delegaciones.length; j++) {\r\n                if (delegaciones[j].nodeName !=\r\n                    'delegacion') {\r\n                    //Si no es un panel lo copiamos directamente\r\n                    salida += xmlText.serializeToString(\r\n                        delegaciones[j]);\r\n                } else {\r\n                    var nombreDelegacion=delegaciones[j].getAttribute('nombre');\r\n                    //¿Es un objeto JSON?\r\n                    if (nombreDelegacion.substring(0,1)==\"{\"){\r\n                        nombreDelegacion=JSON.parse(nombreDelegacion);\r\n                        var delegacionesAgrupadas=nombreDelegacion[Object.keys(nombreDelegacion)[0]];\r\n                        nombreDelegacion=Object.keys(nombreDelegacion)[0];\r\n                        if(delegacionesAgrupadas && Array.isArray(delegacionesAgrupadas)){\r\n                            for (var delegacionAgrupada=0;delegacionAgrupada<delegacionesAgrupadas.length;delegacionAgrupada++){\r\n                                salida+='<md-checkbox ng-show=\"false\" ng-model=\"vm.delegacion[$index].' +delegacionesAgrupadas[delegacionAgrupada] +'\" ng-checked=\"vm.delegacion[$index].'+nombreDelegacion+'\"/>';\r\n                            }\r\n                           \r\n                        }\r\n                        \r\n                    }\r\n                    salida +=\r\n                        '<md-checkbox ng-model=\"vm.delegacion[$index].' +\r\n                        nombreDelegacion +\r\n                        '\" style=\"margin-bottom: 10px;\" ng-checked=\"delegado.delegaciones.' +\r\n                        nombreDelegacion +'\" ';\r\n                        salida +='>' + delegaciones[\r\n                            j].getAttribute('label') +\r\n                        '</md-checkbox> <br />';\r\n                }\r\n\r\n            }\r\n            salida +=\r\n                '<md-button type=\"submit\" ng-disabled=\"form.configurarDelegacion_{{$index}}.$invalid || !form.configurarDelegacion_{{$index}}.$dirty\" class=\"md-raised md-primary\"> Actualizar </md-button> <md-button type=\"submit\" ng-click=\"vm.delegacion[$index].borrar=true\" class=\"md-raised md-primary\"> Borrar </md-button>';\r\n            salida +=\r\n                '</form> </md-expansion-panel-content> </md-expansion-panel-expanded> </md-expansion-panel> </md-expansion-panel-group> </div></md-dialog-content>';\r\n            htmlTemplate2 =\r\n                htmlTemplate2\r\n                .replace(\r\n                    '<sustituir-delegacion class=\"ng-scope\"></sustituir-delegacion>',\r\n                    salida);\r\n        } else if (attributes[i].key ==\r\n            \"credito\") {\r\n            //Si no hay crédito no se pueden crear dispositivos\r\n            if (parseInt(attributes[i]\r\n                    .value) > 0) {\r\n                allowedEntityTypes = [\r\n                    types\r\n                    .entityType\r\n                    .asset,\r\n                    types.entityType\r\n                    .device\r\n                ];\r\n            } else {\r\n                allowedEntityTypes = [\r\n                    types\r\n                    .entityType\r\n                    .asset\r\n                ];\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    openEditEntityDialog();\r\n}\r\n\r\n\r\nfunction openEditEntityDialog() {\r\n    $mdDialog.show({\r\n        controller: ['$scope',\r\n            '$mdDialog',\r\n            EditEntityDialogController\r\n        ],\r\n        controllerAs: 'vm',\r\n        template: htmlTemplate2,\r\n        locals: {\r\n            entityId: entityId\r\n        },\r\n        parent: angular.element(\r\n            $document[0]\r\n            .body),\r\n        targetEvent: $event,\r\n        multiple: true,\r\n        clickOutsideToClose: false\r\n    });\r\n}\r\n\r\n\r\nfunction crearFuncion($scope, codigo) {\r\n    return function() {\r\n        eval(codigo);\r\n    };\r\n}\r\n\r\nfunction EditEntityDialogController(\r\n    $scope,\r\n    $mdDialog) {\r\n    $scope.form = {};\r\n    $scope.chip = \"$scope\";\r\n    var vm = this;\r\n    vm.entityId = entityId;\r\n    vm.entityName = entityName;\r\n    vm.entityType = entityId.entityType;\r\n    vm.allowedEntityTypes =\r\n        allowedEntityTypes;\r\n    vm.allowedRelatedEntityTypes = [];\r\n    vm.entitySearchDirection = types\r\n        .entitySearchDirection;\r\n    vm.tiposDeDispositivos = {};\r\n    vm.tiposDeActivos = {};\r\n    vm.activos = {};\r\n    vm.padre = {};\r\n    vm.attributes = {};\r\n    vm.configuracion = {};\r\n    vm.existeInicializacion = false;\r\n    //vm.configuracion.___fechaHora = new Date();\r\n\r\n\r\n    vm.configuracion.__alarmas = {};\r\n    for (var j = 0; j <\r\n        emailsAdicionales\r\n        .length; j++) {\r\n        vm.configuracion.__alarmas[\r\n            emailsAdicionales[\r\n                j]] = {};\r\n        vm.configuracion.__alarmas[\r\n                emailsAdicionales[j]]\r\n            .emailsAdicionales = [];\r\n        //console.log(emailsAdicionales[j]);\r\n    }\r\n\r\n    vm.viasNotificacion = {};\r\n    vm.serverAttributes = {};\r\n    vm.relations = [];\r\n    vm.newRelations = [];\r\n    vm.relationsToDelete = [];\r\n    vm.borrable = true;\r\n    vm.HTMLconfig = \"\";\r\n    vm.subtipo = subtipo;\r\n    vm.configurable = configurable;\r\n    vm.delegacion = {};\r\n    vm.estaDelegado = false;\r\n    vm.attributes.esDelegado = false;\r\n\r\n\r\n    getEntityInfo();\r\n\r\n    //Creo las funciones\r\n    if (funciones.length > 0) {\r\n        for (var k = 0; k < funciones\r\n            .length; k++) {\r\n            var obj = funciones[k];\r\n            if (obj.nombre !=\r\n                'inicializacion') {\r\n                $scope[obj.nombre] =\r\n                    crearFuncion(\r\n                        $scope,\r\n                        obj\r\n                        .codigo);\r\n            } else {\r\n                //Si existe la funcion inicialización, la ejecuto\r\n                //eval(obj.codigo);\r\n\r\n                $scope.inicializacion =\r\n                    crearFuncion($scope,\r\n                        obj\r\n                        .codigo);\r\n                vm.existeInicializacion =\r\n                    true;\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    vm.addRelation = function() {\r\n        var relation = {\r\n            direction: null,\r\n            relationType: null,\r\n            relatedEntity: null\r\n        };\r\n        vm.newRelations.push(\r\n            relation);\r\n        $scope.editEntityForm\r\n            .$setDirty();\r\n    };\r\n    vm.removeRelation = function(\r\n        index) {\r\n        if (index > -1) {\r\n            vm.newRelations.splice(\r\n                index, 1);\r\n            $scope.editEntityForm\r\n                .$setDirty();\r\n        }\r\n    };\r\n    vm.removeOldRelation = function(\r\n        index,\r\n        relation) {\r\n        if (index > -1) {\r\n            vm.relations.splice(\r\n                index,\r\n                1);\r\n            vm.relationsToDelete\r\n                .push(\r\n                    relation);\r\n            $scope.editEntityForm\r\n                .$setDirty();\r\n        }\r\n    };\r\n    vm.borrar = function() {\r\n        openDeleteEntityDialog();\r\n\r\n        function openDeleteEntityDialog() {\r\n            $scope.form\r\n                .deleteEntityForm\r\n                .$setPristine();\r\n            var title = 'Borrar ' +\r\n                entityName;\r\n            var content =\r\n                '¿Seguro que desea borrar la entidad ' +\r\n                entityName + '?';\r\n            var confirm = $mdDialog\r\n                .confirm()\r\n                .targetEvent($event)\r\n                .title(title)\r\n                .htmlContent(\r\n                    content)\r\n                .ariaLabel(title)\r\n                .cancel('Cancelar')\r\n                .ok('Borrar');\r\n            $mdDialog.show(confirm)\r\n                .then(\r\n                    function() {\r\n                        deleteEntity\r\n                            ();\r\n                    });\r\n        }\r\n\r\n        function deleteEntity() {\r\n            servicioHTTP({\r\n                method: 'POST',\r\n                url: $location\r\n                    .protocol() +\r\n                    '://' +\r\n                    $location\r\n                    .host() +\r\n                    ':' +\r\n                    $location\r\n                    .port() +\r\n                    '/api/v1/' +\r\n                    vm\r\n                    .tokenControl +\r\n                    '/telemetry',\r\n                data: \"{'accion':'borrarEntidad','nombreEntidad':'_\" +\r\n                    vm\r\n                    .attributes\r\n                    .nombreEntidad +\r\n                    \"','idEntidad':'\" +\r\n                    vm\r\n                    .entityId\r\n                    .id +\r\n                    \"','tipoEntidad':'\" +\r\n                    vm\r\n                    .entityType +\r\n                    \"'}\"\r\n            }).\r\n            success(function(data,\r\n                status,\r\n                headers,\r\n                config) {\r\n                //Con el sistema de queues es más lento\r\n                //Habría que obtener de algún modo una confirmación del borrado\r\n                //o simplemente una pausa\r\n                setTimeout(\r\n                    updateAliasData,\r\n                    2000\r\n                );\r\n                console.log(\r\n                    'worked'\r\n                );\r\n                //updateAliasData();\r\n                $mdDialog\r\n                    .hide();\r\n                // ...\r\n            }).\r\n            error(function(data,\r\n                status,\r\n                headers,\r\n                config) {\r\n                console.log(\r\n                    'notworked'\r\n                );\r\n                // ...\r\n            });\r\n        }\r\n    };\r\n    vm.crear = function() {\r\n        //console.log( vm.crearEntidad.nombreEntidad);\r\n        //TODO: Gestionar colisión de nombres\r\n        servicioHTTP({\r\n            method: 'POST',\r\n            url: $location\r\n                .protocol() +\r\n                '://' +\r\n                $location\r\n                .host() +\r\n                ':' +\r\n                $location\r\n                .port() +\r\n                '/api/v1/' +\r\n                vm\r\n                .tokenControl +\r\n                '/telemetry',\r\n            data: \"{'accion':'crearEntidad','nombreEntidad':'_\" +\r\n                vm\r\n                .crearEntidad\r\n                .nombreEntidad +\r\n                \"','tipoEntidad':'\" +\r\n                vm\r\n                .crearEntidad\r\n                .tipoEntidad +\r\n                \"','subtipoEntidad':'\" +\r\n                vm\r\n                .crearEntidad\r\n                .subtipoEntidad +\r\n                \"','padreEntidadId':'\" +\r\n                vm\r\n                .entityId\r\n                .id +\r\n                \"','padreEntidadNombre':'\" +\r\n                vm\r\n                .entityName +\r\n                \"'}\"\r\n        }).\r\n        success(function(data,\r\n            status,\r\n            headers,\r\n            config) {\r\n            console.log(\r\n                'worked'\r\n            );\r\n            setTimeout(\r\n                updateAliasData,\r\n                2000);\r\n            //updateAliasData();\r\n            $scope.form\r\n                .addEntityForm\r\n                .$setPristine();\r\n            $mdDialog\r\n                .hide();\r\n            // ...\r\n        }).\r\n        error(function(data, status,\r\n            headers,\r\n            config) {\r\n            console.log(\r\n                'notworked'\r\n            );\r\n            // ...\r\n        });\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    vm.save = function() {\r\n        servicioHTTP({\r\n            method: 'POST',\r\n            url: $location\r\n                .protocol() +\r\n                '://' +\r\n                $location\r\n                .host() +\r\n                ':' +\r\n                $location\r\n                .port() +\r\n                '/api/v1/' +\r\n                vm\r\n                .tokenControl +\r\n                '/telemetry',\r\n            data: \"{'accion':'editarEntidad','idEntidad':'\" +\r\n                vm.entityId\r\n                .id +\r\n                \"','nombreEntidad':'_\" +\r\n                vm\r\n                .attributes\r\n                .nombreEntidad +\r\n                \"','subtipoEntidad':'\" +\r\n                vm\r\n                .attributes\r\n                .tipoEntidad +\r\n                \"','tipoEntidad':'\" +\r\n                vm\r\n                .entityType +\r\n                \"','padreEntidad':'\" +\r\n                vm\r\n                .padre +\r\n                \"','tipoPadreEntidad':'\" +\r\n                vm\r\n                .activos[vm\r\n                    .padre]\r\n                .tipo +\r\n                \"'}\"\r\n        }).\r\n        success(function(data,\r\n            status,\r\n            headers,\r\n            config) {\r\n            console.log(\r\n                'worked'\r\n            );\r\n            setTimeout(\r\n                updateAliasData,\r\n                2000);\r\n            //updateAliasData();\r\n            $scope.form\r\n                .editEntityForm\r\n                .$setPristine();\r\n            $mdDialog\r\n                .hide();\r\n            // ...\r\n        }).\r\n        error(function(data, status,\r\n            headers,\r\n            config) {\r\n            console.log(\r\n                'notworked'\r\n            );\r\n            // ...\r\n        });\r\n\r\n\r\n        //saveAttributes();\r\n        //saveRelations();\r\n        //$scope.editEntityForm.$setPristine();\r\n    };\r\n\r\n    vm.configurar = function() {\r\n        //Si hay atributos de alarma tengo que stringifycarlos\r\n\r\n        vm.configuracion.__alarmas =\r\n            JSON\r\n            .stringify(\r\n                vm\r\n                .configuracion\r\n                .__alarmas\r\n            );\r\n        vm.configuracion = JSON\r\n            .stringify(vm\r\n                .configuracion);\r\n        //console.log(vm.configuracion);\r\n        servicioHTTP({\r\n            method: 'POST',\r\n            url: $location\r\n                .protocol() +\r\n                '://' +\r\n                $location\r\n                .host() +\r\n                ':' +\r\n                $location\r\n                .port() +\r\n                '/api/v1/' +\r\n                vm\r\n                .tokenControl +\r\n                '/telemetry',\r\n            data: \"{'accion':'configurarEntidad','idEntidad':'\" +\r\n                vm.entityId\r\n                .id +\r\n                \"','configuracion':\" +\r\n                vm\r\n                .configuracion +\r\n                \"}\"\r\n        }).\r\n        success(function(data,\r\n            status,\r\n            headers,\r\n            config) {\r\n            console.log(\r\n                'worked'\r\n            );\r\n            updateAliasData\r\n                ();\r\n            $scope.form\r\n                .editEntityForm\r\n                .$setPristine();\r\n            $mdDialog\r\n                .hide();\r\n            // ...\r\n        }).\r\n        error(function(data, status,\r\n            headers,\r\n            config) {\r\n            console.log(\r\n                'notworked'\r\n            );\r\n            // ...\r\n        });\r\n\r\n\r\n        //saveAttributes();\r\n        //saveRelations();\r\n        //$scope.editEntityForm.$setPristine();\r\n    };\r\n\r\n    vm.delegar = function() {\r\n        //console.log(vm.attributes.delegados);\r\n        servicioHTTP({\r\n            method: 'POST',\r\n            url: $location\r\n                .protocol() +\r\n                '://' +\r\n                $location\r\n                .host() +\r\n                ':' +\r\n                $location\r\n                .port() +\r\n                '/api/v1/' +\r\n                vm\r\n                .tokenControl +\r\n                '/telemetry',\r\n            data: \"{'accion':'crearDelegado','nombreDispositivo':'\" +\r\n                vm\r\n                .nombreDelegado +\r\n                \"','tokenDelegado':'\" +\r\n                vm\r\n                .tokenDelegado +\r\n                \"','delegacionPorCargoDe':'\" +\r\n                vm\r\n                .delegacionPorCargoDe +\r\n                \"','idDispositivoPadre':'\" +\r\n                vm.entityId\r\n                .id +\r\n                \"','nombreDispositivoPadre':'\" +\r\n                vm\r\n                .entityName +\r\n                \"','subtipoDispositivo':'\" +\r\n                vm\r\n                .subtipo +\r\n                \"'}\"\r\n        }).\r\n        success(function(data,\r\n            status,\r\n            headers,\r\n            config) {\r\n            console.log(\r\n                'worked'\r\n            );\r\n            updateAliasData\r\n                ();\r\n            $scope.form\r\n                .editEntityForm\r\n                .$setPristine();\r\n            $mdDialog\r\n                .hide();\r\n            // ...\r\n        }).\r\n        error(function(data, status,\r\n            headers,\r\n            config) {\r\n            console.log(\r\n                'notworked'\r\n            );\r\n            // ...\r\n        });\r\n\r\n\r\n        //saveAttributes();\r\n        //saveRelations();\r\n        //$scope.editEntityForm.$setPristine();\r\n    };\r\n    vm.configurarDelegacion = function(\r\n        idDelegacion,\r\n        indice) {\r\n            \r\n        servicioHTTP({\r\n            method: 'POST',\r\n            url: $location\r\n                .protocol() +\r\n                '://' +\r\n                $location\r\n                .host() +\r\n                ':' +\r\n                $location\r\n                .port() +\r\n                '/api/v1/' +\r\n                vm\r\n                .tokenControl +\r\n                '/telemetry',\r\n            data: \"{'accion':'configurarDelegacion','nombreDispositivo':'\" +\r\n                vm\r\n                .entityName +\r\n                \"','idDispositivo':'\" +\r\n                vm.entityId\r\n                .id +\r\n                \"','idDelegacion':'\" +\r\n                idDelegacion +\r\n                \"','subtipoDispositivo':'\" +\r\n                vm\r\n                .subtipo +\r\n                \"','delegacion':'\" +\r\n                JSON\r\n                .stringify(\r\n                    vm\r\n                    .delegacion[\r\n                        indice\r\n                    ]\r\n                ) + \"'}\"\r\n        }).\r\n        success(function(data,\r\n            status,\r\n            headers,\r\n            config) {\r\n            console.log(\r\n                'worked'\r\n            );\r\n            updateAliasData\r\n                ();\r\n            $scope.form\r\n                .editEntityForm\r\n                .$setPristine();\r\n            $mdDialog\r\n                .hide();\r\n            // ...\r\n        }).\r\n        error(function(data, status,\r\n            headers,\r\n            config) {\r\n            console.log(\r\n                'notworked'\r\n            );\r\n            // ...\r\n        });\r\n    };\r\n    vm.cancel = function() {\r\n        $mdDialog.hide();\r\n    };\r\n\r\n    function getEntityAttributes(\r\n        attributes) {\r\n        //console.log(attributes);\r\n        //El nombre de todos los atributos de configuración va a comenzar con __\r\n        for (var i = 0; i < attributes\r\n            .length; i++) {\r\n            if (attributes[i].key\r\n                .substr(0,\r\n                    2) ==\r\n                \"__\") {\r\n                if (attributes[i].key ==\r\n                    \"__alarma_\" +\r\n                    vm\r\n                    .subtipo) {\r\n                    //var alarmas = JSON.parse(attributes[i].value);\r\n                    var alarmas =\r\n                        attributes[\r\n                            i]\r\n                        .value;\r\n                    for (var clave in\r\n                            alarmas) {\r\n                        vm.configuracion\r\n                            .__alarmas[\r\n                                clave] =\r\n                            alarmas[\r\n                                clave];\r\n                        if (!alarmas[\r\n                                clave]\r\n                            .hasOwnProperty(\r\n                                'emailsAdicionales'\r\n                            )\r\n                        ) {\r\n                            vm.configuracion\r\n                                .__alarmas[\r\n                                    clave\r\n                                ]\r\n                                .emailsAdicionales = [];\r\n                        }\r\n                    }\r\n                    /*\r\n                                    } else if (attributes[i].key ==\r\n                                        \"___fechaHora\") {\r\n                                        vm.configuracion.___fechaHora = new Date(attributes[i].value);\r\n                    */\r\n\r\n                } else if (attributes[i]\r\n                    .key ==\r\n                    \"___ultimoDownlink\"\r\n                ) {\r\n                    //No hago nada. No me gusta que esté aquí. Debería gestionarse en las reglas.\r\n                    //Ya se gestiona en las reglas, pero lo dejo porque podrían quedar dispositivos que aún lo tengan.\r\n\r\n                } else {\r\n                    vm.configuracion[\r\n                            attributes[\r\n                                i]\r\n                            .key] =\r\n                        attributes[i]\r\n                        .value;\r\n                }\r\n            } else if (attributes[i]\r\n                .key ==\r\n                \"nombreEntidad\") {\r\n                //Hago esto para quitar el guión bajo y evitar que se puedan perder leading zeros\r\n                vm.attributes[\r\n                        attributes[i]\r\n                        .key] =\r\n                    attributes[i].value\r\n                    .substr(1);\r\n            } else if (attributes[i]\r\n                .key ==\r\n                \"delegados\") {\r\n                vm.attributes[\r\n                        attributes[i]\r\n                        .key] =\r\n                    attributes[i].value;\r\n\r\n                if (typeof attributes[i]\r\n                    .value ==\r\n                    'object' &&\r\n                    attributes[\r\n                        i].value\r\n                    .length >\r\n                    0) {\r\n                    vm.borrable = false;\r\n                    vm.estaDelegado =\r\n                        true;\r\n                }\r\n                console.log(vm\r\n                    .borrable);\r\n            } else {\r\n                vm.attributes[\r\n                        attributes[i]\r\n                        .key] =\r\n                    attributes[i].value;\r\n            }\r\n        }\r\n        //Ejecuto la función de inicialización si existe\r\n        if (vm.existeInicializacion ==\r\n            true) {\r\n\r\n            $scope.inicializacion();\r\n        }\r\n        //console.log(vm.attributes);\r\n        //console.log(vm.configuracion);\r\n        //console.log(vm);\r\n        vm.serverAttributes = angular\r\n            .copy(\r\n                vm\r\n                .attributes);\r\n    }\r\n\r\n    function getTiposDeActivosYDispositivos(\r\n        attributes) {\r\n        for (var i = 0; i < attributes\r\n            .length; i++) {\r\n            if (attributes[i].key ==\r\n                \"tiposDeDispositivos\") {\r\n                vm.tiposDeDispositivos =\r\n                    attributes[\r\n                        i]\r\n                    .value\r\n                    .split(\",\");\r\n            } else if (attributes[i]\r\n                .key ==\r\n                \"tiposDeActivos\") {\r\n                vm.tiposDeActivos =\r\n                    attributes[i]\r\n                    .value\r\n                    .split(\",\");\r\n            } else if (attributes[i]\r\n                .key ==\r\n                \"email\") {\r\n                if (attributes[i]\r\n                    .value !==\r\n                    \"\") {\r\n                    vm.viasNotificacion\r\n                        .email =\r\n                        true;\r\n                } else {\r\n                    vm.viasNotificacion\r\n                        .email =\r\n                        false;\r\n                }\r\n            } else if (attributes[i]\r\n                .key ==\r\n                \"token_telegram\") {\r\n                if (attributes[i]\r\n                    .value !==\r\n                    \"\") {\r\n                    vm.viasNotificacion\r\n                        .telegram =\r\n                        true;\r\n                } else {\r\n                    vm.viasNotificacion\r\n                        .telegram =\r\n                        false;\r\n                }\r\n\r\n            } else if (attributes[i]\r\n                .key ==\r\n                \"token_webhook_ifttt\") {\r\n                if (attributes[i]\r\n                    .value !==\r\n                    \"\") {\r\n                    vm.viasNotificacion\r\n                        .ifttt =\r\n                        true;\r\n                } else {\r\n                    vm.viasNotificacion\r\n                        .ifttt =\r\n                        false;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function getActivos(activos) {\r\n        //Los uso para establecer los padres\r\n        //Aquí habrá que generalizar para usar los atributos nombre y tipo, en lugar de los fields?\r\n        for (var i = 0; i < activos\r\n            .length; i++) {\r\n            //Si es un activo no debe incluirse a sí mismo\r\n            if (vm.entityType ==\r\n                \"DEVICE\" ||\r\n                vm\r\n                .entityId\r\n                .id !=\r\n                activos[i].id.id) {\r\n                getAtributosActivo(\r\n                    activos[\r\n                        i].id.id,\r\n                    activos[i].name,\r\n                    activos[i]\r\n                    .type\r\n                );\r\n\r\n            } else {\r\n                //console.log(\"b_\" + vm.entityId.id + \"__\" +activos[i].id.id);\r\n            }\r\n        }\r\n        //console.log(vm.activos);\r\n    }\r\n\r\n    function getAtributosActivo(id,\r\n        nombreActivo,\r\n        tipoActivo) {\r\n        attributeService\r\n            .getEntityAttributesValues(\r\n                'ASSET',\r\n                id, 'SERVER_SCOPE')\r\n            .then(\r\n                function success(data) {\r\n                    var parametros = {};\r\n                    for (var i = 0; i <\r\n                        data\r\n                        .length; i++) {\r\n                        //console.log(data[i].key,data[i].value);\r\n                        if (data[i]\r\n                            .key ==\r\n                            \"nombreEntidad\"\r\n                        ) {\r\n                            parametros[\r\n                                    'nombreEntidad'\r\n                                ] =\r\n                                data[i]\r\n                                .value\r\n                                .substr(\r\n                                    1);\r\n                        } else {\r\n                            parametros[\r\n                                    data[\r\n                                        i\r\n                                    ]\r\n                                    .key\r\n                                ] =\r\n                                data[\r\n                                    i]\r\n                                .value;\r\n                        }\r\n                    }\r\n                    vm.activos[\r\n                        nombreActivo\r\n                    ] = {\r\n                        'tipo': tipoActivo,\r\n                        'atributos': parametros\r\n                    };\r\n                    //console.log(vm.activos[nombreActivo]);\r\n\r\n                });\r\n    }\r\n\r\n\r\n    function getEntityRelations(\r\n        relations) {\r\n\r\n        var relationsFrom = relations[\r\n            0];\r\n        var relationsTo = relations[1];\r\n        //Si tiene hijos no se puede borrar\r\n\r\n        for (var i = 0; i <\r\n            relationsFrom\r\n            .length; i++) {\r\n            vm.borrable = false;\r\n            var relation = {\r\n                direction: types\r\n                    .entitySearchDirection\r\n                    .from,\r\n                relationType: relationsFrom[\r\n                        i]\r\n                    .type,\r\n                relatedEntity: relationsFrom[\r\n                        i]\r\n                    .to\r\n            };\r\n            vm.relations.push(relation);\r\n        }\r\n\r\n        for (var i = 0; i < relationsTo\r\n            .length; i++) {\r\n\r\n            var relation = {\r\n                direction: types\r\n                    .entitySearchDirection\r\n                    .to,\r\n                relationType: relationsTo[\r\n                        i]\r\n                    .type,\r\n                relatedEntity: relationsTo[\r\n                        i]\r\n                    .from\r\n            };\r\n            if (relation.relationType ==\r\n                \"Contains\" &&\r\n                relation.relatedEntity\r\n                .entityType ==\r\n                \"ASSET\"\r\n            ) {\r\n                establecerNombrePadre(\r\n                    relation\r\n                    .relatedEntity\r\n                    .id);\r\n                //Necesito el nombre del padre\r\n            }\r\n            vm.relations.push(relation);\r\n        }\r\n\r\n    }\r\n\r\n    function establecerNombrePadre(id) {\r\n        assetService.getAsset(id).then(\r\n            function(data) {\r\n                vm.padre = data\r\n                    .name;\r\n                //console.log(vm.padre);\r\n            }\r\n        );\r\n    }\r\n\r\n    function getEntityInfo() {\r\n        entityService.getEntity(entityId\r\n            .entityType,\r\n            entityId.id).then(\r\n            function(entity) {\r\n                vm.entity = entity;\r\n                vm.type = vm.entity\r\n                    .type;\r\n            });\r\n\r\n        attributeService\r\n            .getEntityAttributesValues(\r\n                entityId.entityType,\r\n                entityId.id,\r\n                'SERVER_SCOPE').then(\r\n                function(data) {\r\n                    if (data.length) {\r\n                        getEntityAttributes\r\n                            (\r\n                                data);\r\n                    }\r\n                });\r\n        //Obtngo los tipos de activos y dispositivos \r\n        //que tiene permitidos el customer en sus atributos\r\n        //y también las vías de notificación (ifttt, telegram...)\r\n        attributeService\r\n            .getEntityAttributesValues(\r\n                'CUSTOMER', userService\r\n                .getCurrentUser()\r\n                .customerId,\r\n                'SERVER_SCOPE').then(\r\n                function(data) {\r\n                    if (data.length) {\r\n                        getTiposDeActivosYDispositivos\r\n                            (\r\n                                data);\r\n                    }\r\n                });\r\n        //Obtengo los activos del customer para poder\r\n        //mostrarlos como potenciales padres\r\n        assetService.getCustomerAssets(\r\n            userService\r\n            .getCurrentUser()\r\n            .customerId, {\r\n                \"limit\": 100\r\n            }).then(\r\n            function(data) {\r\n                if (data.data\r\n                    .length) {\r\n                    getActivos(data\r\n                        .data);\r\n\r\n                }\r\n            });\r\n\r\n        //Obtengo el token del dispositivo SYSTEM\r\n        deviceService\r\n            .getCustomerDevices(\r\n                userService\r\n                .getCurrentUser()\r\n                .customerId, {\r\n                    \"limit\": 100\r\n                }, false, {}, 'SYSTEM')\r\n            .then(\r\n                function(data) {\r\n                    if (data.data\r\n                        .length ==\r\n                        1) {\r\n                        deviceService\r\n                            .getDeviceCredentials(\r\n                                data\r\n                                .data[0]\r\n                                .id.id,\r\n                                true, {}\r\n                            ).then(\r\n                                function(\r\n                                    response\r\n                                ) {\r\n                                    vm.tokenControl =\r\n                                        response\r\n                                        .credentialsId;\r\n\r\n                                });\r\n                    }\r\n                });\r\n\r\n\r\n        $q.all([entityRelationService\r\n            .findInfoByFrom(\r\n                entityId.id,\r\n                entityId\r\n                .entityType\r\n            ),\r\n            entityRelationService\r\n            .findInfoByTo(\r\n                entityId\r\n                .id,\r\n                entityId\r\n                .entityType)\r\n        ]).then(\r\n            function(relations) {\r\n                //CUIDADO: Sólo obtiene las relaciones respecto a elementos (customer, asset y diveces) que son accesibles por el propio customer\r\n                //Por ejemplo, no obtiene las relaciones a dispositivos delegados porque no están asignados al customer\r\n                getEntityRelations(\r\n                    relations);\r\n            });\r\n\r\n    }\r\n\r\n    function saveAttributes() {\r\n        var attributesArray = [];\r\n        for (var key in vm.attributes) {\r\n            if (vm.attributes[key] !==\r\n                vm\r\n                .serverAttributes[key]\r\n            ) {\r\n                attributesArray.push({\r\n                    key: key,\r\n                    value: vm\r\n                        .attributes[\r\n                            key]\r\n                });\r\n            }\r\n        }\r\n        if (attributesArray.length >\r\n            0) {\r\n            attributeService\r\n                .saveEntityAttributes(\r\n                    entityId.entityType,\r\n                    entityId\r\n                    .id,\r\n                    \"SERVER_SCOPE\",\r\n                    attributesArray);\r\n        }\r\n    }\r\n\r\n    function saveRelations() {\r\n        var tasks = [];\r\n        for (var i = 0; i < vm\r\n            .newRelations\r\n            .length; i++) {\r\n            var relation = {\r\n                type: vm\r\n                    .newRelations[i]\r\n                    .relationType\r\n            };\r\n            if (vm.newRelations[i]\r\n                .direction ==\r\n                types\r\n                .entitySearchDirection\r\n                .from\r\n            ) {\r\n                relation.to = vm\r\n                    .newRelations[i]\r\n                    .relatedEntity;\r\n                relation.from =\r\n                    entityId;\r\n            } else {\r\n                relation.to = entityId;\r\n                relation.from = vm\r\n                    .newRelations[i]\r\n                    .relatedEntity;\r\n            }\r\n            tasks.push(\r\n                entityRelationService\r\n                .saveRelation(\r\n                    relation));\r\n        }\r\n        for (var i = 0; i < vm\r\n            .relationsToDelete\r\n            .length; i++) {\r\n            var relation = {\r\n                type: vm\r\n                    .relationsToDelete[\r\n                        i]\r\n                    .relationType\r\n            };\r\n            if (vm.relationsToDelete[i]\r\n                .direction ==\r\n                types\r\n                .entitySearchDirection\r\n                .from) {\r\n                relation.to = vm\r\n                    .relationsToDelete[\r\n                        i]\r\n                    .relatedEntity;\r\n                relation.from =\r\n                    entityId;\r\n            } else {\r\n                relation.to = entityId;\r\n                relation.from = vm\r\n                    .relationsToDelete[\r\n                        i]\r\n                    .relatedEntity;\r\n            }\r\n            tasks.push(\r\n                entityRelationService\r\n                .deleteRelation(\r\n                    relation\r\n                    .from\r\n                    .id,\r\n                    relation.from\r\n                    .entityType,\r\n                    relation.type,\r\n                    relation.to\r\n                    .id,\r\n                    relation.to\r\n                    .entityType));\r\n        }\r\n        $q.all(tasks).then(function() {\r\n            vm.relations = vm\r\n                .relations\r\n                .concat(\r\n                    vm\r\n                    .newRelations\r\n                );\r\n            vm\r\n                .newRelations = [];\r\n            vm\r\n                .relationsToDelete = [];\r\n            updateAliasData();\r\n        });\r\n    }\r\n\r\n    function updateAliasData() {\r\n        var aliasIds = [];\r\n        for (var id in widgetContext\r\n                .aliasController\r\n                .resolvedAliases) {\r\n            aliasIds.push(id);\r\n        }\r\n        var tasks = [];\r\n        aliasIds.forEach(function(\r\n            aliasId) {\r\n            widgetContext\r\n                .aliasController\r\n                .setAliasUnresolved(\r\n                    aliasId);\r\n            tasks.push(\r\n                widgetContext\r\n                .aliasController\r\n                .getAliasInfo(\r\n                    aliasId)\r\n            );\r\n        });\r\n        $q.all(tasks).then(function() {\r\n            $rootScope\r\n                .$broadcast(\r\n                    'entityAliasesChanged',\r\n                    aliasIds);\r\n        });\r\n    }\r\n\r\n}"
              }
            ]
          },
          "showTitleIcon": false,
          "titleIcon": null,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "displayTimewindow": true
        },
        "id": "fba8b82f-4b63-d360-68e1-9481f57706b1"
      },
      "f1a629d9-faa9-ae03-8c9e-91e0037b17bc": {
        "isSystemType": true,
        "bundleAlias": "iotopentech",
        "typeAlias": "perfil2",
        "type": "static",
        "title": "New widget",
        "sizeX": 7,
        "sizeY": 14,
        "config": {
          "datasources": [],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": true,
          "backgroundColor": "rgb(255, 255, 255)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "8px",
          "settings": {
            "showResultMessage": true,
            "widgetTitle": "PERFUL DE"
          },
          "title": "PERFIL DE USUARIO",
          "dropShadow": true,
          "showTitleIcon": false,
          "titleIcon": null,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "enableFullscreen": true,
          "widgetStyle": {},
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "useDashboardTimewindow": true,
          "displayTimewindow": true,
          "showLegend": false,
          "actions": {}
        },
        "id": "f1a629d9-faa9-ae03-8c9e-91e0037b17bc"
      },
      "58b27f5a-e29a-7c88-111f-586d8b32a086": {
        "isSystemType": true,
        "bundleAlias": "iotopentech",
        "typeAlias": "device_claiming_widget",
        "type": "static",
        "title": "New widget",
        "sizeX": 9,
        "sizeY": 6,
        "config": {
          "datasources": [],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": true,
          "backgroundColor": "rgb(255, 255, 255)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "8px",
          "settings": {
            "deviceSecret": true,
            "showLabel": true
          },
          "title": "RECLAMAR DISPOSITIVO",
          "dropShadow": true,
          "showTitleIcon": false,
          "titleIcon": null,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "enableFullscreen": false,
          "enableDataExport": true,
          "widgetStyle": {},
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "useDashboardTimewindow": true,
          "displayTimewindow": true,
          "showLegend": false,
          "actions": {}
        },
        "id": "58b27f5a-e29a-7c88-111f-586d8b32a086"
      },
      "74f06f8b-d82d-d5c4-b438-da0472ecf7e8": {
        "isSystemType": true,
        "bundleAlias": "cards",
        "typeAlias": "simple_card",
        "type": "latest",
        "title": "New widget",
        "sizeX": 8,
        "sizeY": 3,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "dataKeys": [
                {
                  "name": "dispositivosPropios",
                  "type": "attribute",
                  "label": "Dispositivos propios",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.684586138282518
                }
              ],
              "entityAliasId": "d5716c46-7e3f-d8a7-163b-c9a265a4ea0f"
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "#ff5722",
          "color": "rgba(255, 255, 255, 0.87)",
          "padding": "16px",
          "settings": {
            "labelPosition": "top"
          },
          "title": "",
          "dropShadow": true,
          "enableFullscreen": false,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "units": "",
          "decimals": 0,
          "useDashboardTimewindow": true,
          "showLegend": false,
          "widgetStyle": {},
          "actions": {
            "headerButton": [
              {
                "id": "015add2c-d27a-b5ef-e7a7-034e67e121cc",
                "name": "Contabilidad",
                "icon": "multiline_chart",
                "type": "openDashboardState",
                "targetDashboardStateId": "contabilidad",
                "setEntityId": true
              }
            ]
          },
          "showTitleIcon": false,
          "titleIcon": null,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "displayTimewindow": true
        },
        "id": "74f06f8b-d82d-d5c4-b438-da0472ecf7e8"
      },
      "97cdc902-7547-2fd8-caab-ecca41cf46a8": {
        "isSystemType": true,
        "bundleAlias": "cards",
        "typeAlias": "simple_card",
        "type": "latest",
        "title": "New widget",
        "sizeX": 8,
        "sizeY": 3,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "dataKeys": [
                {
                  "name": "credito",
                  "type": "attribute",
                  "label": "Crédito",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.6455316370969023
                }
              ],
              "entityAliasId": "d5716c46-7e3f-d8a7-163b-c9a265a4ea0f"
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "#ff5722",
          "color": "rgba(255, 255, 255, 0.87)",
          "padding": "16px",
          "settings": {
            "labelPosition": "top"
          },
          "title": "",
          "dropShadow": true,
          "enableFullscreen": false,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "units": "",
          "decimals": 0,
          "useDashboardTimewindow": true,
          "showLegend": false,
          "widgetStyle": {},
          "actions": {
            "headerButton": [
              {
                "id": "4f03f567-f6cd-0045-6053-ea4b60141306",
                "name": "Contabilidad",
                "icon": "multiline_chart",
                "type": "openDashboardState",
                "targetDashboardStateId": "contabilidad",
                "setEntityId": true
              }
            ]
          },
          "showTitleIcon": false,
          "titleIcon": null,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "displayTimewindow": true
        },
        "id": "97cdc902-7547-2fd8-caab-ecca41cf46a8"
      },
      "48c9f0e5-c2eb-3968-b0ac-d139e2137268": {
        "isSystemType": true,
        "bundleAlias": "charts",
        "typeAlias": "timeseries_bars_flot",
        "type": "timeseries",
        "title": "New widget",
        "sizeX": 24,
        "sizeY": 9,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "dataKeys": [
                {
                  "name": "credito",
                  "type": "timeseries",
                  "label": "Crédito",
                  "color": "#66bb6a",
                  "settings": {
                    "excludeFromStacking": false,
                    "hideDataByDefault": false,
                    "disableDataHiding": false,
                    "removeFromLegend": false,
                    "showLines": false,
                    "fillLines": false,
                    "showPoints": false,
                    "showPointShape": "circle",
                    "pointShapeFormatter": "var size = radius * Math.sqrt(Math.PI) / 2;\nctx.moveTo(x - size, y - size);\nctx.lineTo(x + size, y + size);\nctx.moveTo(x - size, y + size);\nctx.lineTo(x + size, y - size);",
                    "showPointsLineWidth": 5,
                    "showPointsRadius": 3,
                    "showSeparateAxis": false,
                    "axisPosition": "left",
                    "thresholds": [
                      {
                        "thresholdValueSource": "predefinedValue"
                      }
                    ],
                    "comparisonSettings": {
                      "showValuesForComparison": true
                    }
                  },
                  "_hash": 0.6710845221918174
                },
                {
                  "name": "dispositivosPropios",
                  "type": "timeseries",
                  "label": "Nº Dispositivos propios",
                  "color": "#f44336",
                  "settings": {
                    "excludeFromStacking": false,
                    "hideDataByDefault": false,
                    "disableDataHiding": false,
                    "removeFromLegend": false,
                    "showLines": false,
                    "fillLines": false,
                    "showPoints": false,
                    "showPointShape": "circle",
                    "pointShapeFormatter": "var size = radius * Math.sqrt(Math.PI) / 2;\nctx.moveTo(x - size, y - size);\nctx.lineTo(x + size, y + size);\nctx.moveTo(x - size, y + size);\nctx.lineTo(x + size, y - size);",
                    "showPointsLineWidth": 5,
                    "showPointsRadius": 3,
                    "showSeparateAxis": false,
                    "axisPosition": "left",
                    "thresholds": [
                      {
                        "thresholdValueSource": "predefinedValue"
                      }
                    ],
                    "comparisonSettings": {
                      "showValuesForComparison": true
                    }
                  },
                  "_hash": 0.9489344122618633
                },
                {
                  "name": "dispositivosAsumidos",
                  "type": "timeseries",
                  "label": "Nº Dispositivos asumidos",
                  "color": "#fbf300",
                  "settings": {
                    "excludeFromStacking": false,
                    "hideDataByDefault": false,
                    "disableDataHiding": false,
                    "removeFromLegend": false,
                    "showLines": false,
                    "fillLines": false,
                    "showPoints": false,
                    "showPointShape": "circle",
                    "pointShapeFormatter": "var size = radius * Math.sqrt(Math.PI) / 2;\nctx.moveTo(x - size, y - size);\nctx.lineTo(x + size, y + size);\nctx.moveTo(x - size, y + size);\nctx.lineTo(x + size, y - size);",
                    "showPointsLineWidth": 5,
                    "showPointsRadius": 3,
                    "showSeparateAxis": false,
                    "axisPosition": "left",
                    "thresholds": [
                      {
                        "thresholdValueSource": "predefinedValue"
                      }
                    ],
                    "comparisonSettings": {
                      "showValuesForComparison": true
                    }
                  },
                  "_hash": 0.5323685142016874
                }
              ],
              "entityAliasId": "d5716c46-7e3f-d8a7-163b-c9a265a4ea0f"
            }
          ],
          "timewindow": {
            "realtime": {
              "interval": 86400000,
              "timewindowMs": 2592000000
            },
            "aggregation": {
              "type": "NONE",
              "limit": 200
            },
            "hideInterval": false,
            "hideAggregation": false,
            "hideAggInterval": true
          },
          "showTitle": true,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "8px",
          "settings": {
            "shadowSize": 4,
            "fontColor": "#545454",
            "fontSize": 10,
            "xaxis": {
              "showLabels": true,
              "color": "#545454"
            },
            "yaxis": {
              "showLabels": true,
              "color": "#545454"
            },
            "grid": {
              "color": "#545454",
              "tickColor": "#DDDDDD",
              "verticalLines": true,
              "horizontalLines": true,
              "outlineWidth": 1
            },
            "stack": false,
            "tooltipIndividual": true,
            "defaultBarWidth": 600,
            "barAlignment": "left",
            "timeForComparison": "months",
            "xaxisSecond": {
              "axisPosition": "top",
              "showLabels": true
            },
            "tooltipCumulative": true
          },
          "title": "New Timeseries Bars - Flot",
          "dropShadow": true,
          "enableFullscreen": true,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "mobileHeight": null,
          "widgetStyle": {},
          "useDashboardTimewindow": true,
          "showLegend": true,
          "actions": {},
          "showTitleIcon": false,
          "titleIcon": null,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "displayTimewindow": false
        },
        "id": "48c9f0e5-c2eb-3968-b0ac-d139e2137268"
      },
      "2d59a12b-2f43-b323-0a99-322890992dbb": {
        "isSystemType": true,
        "bundleAlias": "cards",
        "typeAlias": "simple_card",
        "type": "latest",
        "title": "New widget",
        "sizeX": 8,
        "sizeY": 3,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "dataKeys": [
                {
                  "name": "dispositivosAsumidos",
                  "type": "attribute",
                  "label": "Dispositivos asumidos",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.14500773985489313
                }
              ],
              "entityAliasId": "d5716c46-7e3f-d8a7-163b-c9a265a4ea0f"
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "#ff5722",
          "color": "rgba(255, 255, 255, 0.87)",
          "padding": "16px",
          "settings": {
            "labelPosition": "top"
          },
          "title": "Dispositivos asumidos",
          "dropShadow": true,
          "enableFullscreen": false,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "units": "",
          "decimals": 0,
          "useDashboardTimewindow": true,
          "showLegend": false,
          "widgetStyle": {},
          "actions": {
            "headerButton": [
              {
                "id": "f21e05bf-f2e0-941c-f9e5-3b156f6ee8ca",
                "name": "Contabilidad",
                "icon": "multiline_chart",
                "type": "openDashboardState",
                "targetDashboardStateId": "contabilidad",
                "setEntityId": true
              }
            ]
          },
          "showTitleIcon": false,
          "titleIcon": null,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "displayTimewindow": true
        },
        "id": "2d59a12b-2f43-b323-0a99-322890992dbb"
      }
    },
    "states": {
      "default": {
        "name": "Configuración",
        "root": true,
        "layouts": {
          "main": {
            "widgets": {
              "fba8b82f-4b63-d360-68e1-9481f57706b1": {
                "sizeX": 9,
                "sizeY": 11,
                "row": 0,
                "col": 7
              },
              "f1a629d9-faa9-ae03-8c9e-91e0037b17bc": {
                "sizeX": 7,
                "sizeY": 14,
                "row": 0,
                "col": 0
              },
              "58b27f5a-e29a-7c88-111f-586d8b32a086": {
                "sizeX": 9,
                "sizeY": 6,
                "row": 11,
                "col": 7
              },
              "74f06f8b-d82d-d5c4-b438-da0472ecf7e8": {
                "sizeX": 8,
                "sizeY": 3,
                "row": 3,
                "col": 16
              },
              "97cdc902-7547-2fd8-caab-ecca41cf46a8": {
                "sizeX": 8,
                "sizeY": 3,
                "row": 0,
                "col": 16
              },
              "2d59a12b-2f43-b323-0a99-322890992dbb": {
                "sizeX": 8,
                "sizeY": 3,
                "row": 6,
                "col": 16
              }
            },
            "gridSettings": {
              "backgroundColor": "#eeeeee",
              "color": "rgba(0,0,0,0.870588)",
              "columns": 24,
              "margins": [
                10,
                10
              ],
              "backgroundSizeMode": "100%"
            }
          }
        }
      },
      "contabilidad": {
        "name": "Contabilidad",
        "root": false,
        "layouts": {
          "main": {
            "widgets": {
              "48c9f0e5-c2eb-3968-b0ac-d139e2137268": {
                "sizeX": 24,
                "sizeY": 9,
                "mobileHeight": null,
                "row": 0,
                "col": 0
              }
            },
            "gridSettings": {
              "backgroundColor": "#eeeeee",
              "color": "rgba(0,0,0,0.870588)",
              "columns": 24,
              "margins": [
                10,
                10
              ],
              "backgroundSizeMode": "100%"
            }
          }
        }
      }
    },
    "entityAliases": {
      "bc41b835-4a1d-49fc-de3b-142ec2484fd4": {
        "id": "bc41b835-4a1d-49fc-de3b-142ec2484fd4",
        "alias": "ActivoROOT",
        "filter": {
          "type": "assetType",
          "resolveMultiple": false,
          "assetType": "ROOT",
          "assetNameFilter": ""
        }
      },
      "d5716c46-7e3f-d8a7-163b-c9a265a4ea0f": {
        "id": "d5716c46-7e3f-d8a7-163b-c9a265a4ea0f",
        "alias": "customer",
        "filter": {
          "type": "singleEntity",
          "resolveMultiple": false,
          "singleEntity": {
            "entityType": "CURRENT_CUSTOMER",
            "id": "2d6cc070-0a52-11eb-b82a-9b3a9cfbb111"
          }
        }
      }
    },
    "timewindow": {
      "history": {
        "interval": 86400000,
        "timewindowMs": 2592000000
      },
      "aggregation": {
        "type": "MAX",
        "limit": 25000
      },
      "hideInterval": false,
      "hideAggregation": false,
      "hideAggInterval": false
    },
    "settings": {
      "stateControllerId": "entity",
      "showTitle": false,
      "showDashboardsSelect": true,
      "showEntitiesSelect": true,
      "showDashboardTimewindow": true,
      "showDashboardExport": true,
      "toolbarAlwaysOpen": true
    }
  },
  "name": "Configuración"
}