{
  "title": "Configuración",
  "configuration": {
    "widgets": {
      "fba8b82f-4b63-d360-68e1-9481f57706b1": {
        "isSystemType": true,
        "bundleAlias": "cards",
        "typeAlias": "entities_hierarchy",
        "type": "latest",
        "title": "New widget",
        "sizeX": 9,
        "sizeY": 11,
        "config": {
          "timewindow": {
            "realtime": {
              "interval": 1000,
              "timewindowMs": 86400000
            },
            "aggregation": {
              "type": "NONE",
              "limit": 200
            }
          },
          "showTitle": true,
          "backgroundColor": "rgb(255, 255, 255)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "4px",
          "settings": {
            "nodeRelationQueryFunction": "/**\n\n// Function should return relations query object for current node used to fetch entity children.\n// Function can return 'default' string value. In this case default relations query will be used.\n\n// The following example code will construct simple relations query that will fetch relations of type 'Contains'\n// from the current entity.\n\nvar entity = nodeCtx.entity;\nvar query = {\n    parameters: {\n        rootId: entity.id.id,\n        rootType: entity.id.entityType,\n        direction: types.entitySearchDirection.from,\n        relationTypeGroup: \"COMMON\",\n        maxLevel: 1\n    },\n    filters: [{\n        relationType: \"Contains\",\n        entityTypes: []\n    }]\n};\nreturn query;\n\n**/\n",
            "nodeHasChildrenFunction": "/**\n\n// Function should return boolean value indicating whether current node has children (whether it can be expanded).\n\n// The following example code will restrict entities hierarchy expansion up to third level.\n\nreturn nodeCtx.level <= 2;\n\n// The next example code will restrict entities expansion according to the value of example 'nodeHasChildren' attribute.\n\nvar data = nodeCtx.data;\nif (data.hasOwnProperty('nodeHasChildren') && data['nodeHasChildren'] !== null) {\n    return data['nodeHasChildren'] === 'true';\n} else {\n    return true;\n}\n  \n**/\n ",
            "nodeTextFunction": "/**\n\n// Function should return text (can be HTML code) for the current node.\n\n// The following example code will generate node text consisting of entity name and temperature if temperature value is present in entity attributes/timeseries.\n\nvar data =  nodeCtx.data;\nvar entity = nodeCtx.entity;\nvar text = entity.name;\nif (data.hasOwnProperty('temperature') && data['temperature'] !== null) {\n    text += \" <b>\"+ data['temperature'] +\" °C</b>\";\n}\nreturn text;\n\n**/\n\n//return \" <b>\"+nodeCtx.data['nombreEntidad']+\"</b>\";\nvar entity = nodeCtx.entity;\nvar nombreCompleto = entity.name;\nvar nombre = nombreCompleto.substring(nombreCompleto.indexOf(\"_\")+1);\nreturn nombre;",
            "nodeIconFunction": "/** \n\n// Function should return node icon info object.\n// Resulting object should contain either 'materialIcon' or 'iconUrl' property. \n// Where:\n    - 'materialIcon' - name of the material icon to be used from the Material Icons Library (https://material.io/tools/icons);\n    - 'iconUrl' - url of the external image to be used as node icon.\n// Function can return 'default' string value. In this case default icons according to entity type will be used.\n\n// The following example code shows how to use external image for devices which name starts with 'Test' and use \n// default icons for the rest of entities.\n\nvar entity = nodeCtx.entity;\nif (entity.id.entityType === 'DEVICE' && entity.name.startsWith('Test')) {\n    return {iconUrl: 'https://avatars1.githubusercontent.com/u/14793288?v=4&s=117'};\n} else {\n    return 'default';\n}\n \n**/",
            "nodeDisabledFunction": "/**\n\n// Function should return boolean value indicating whether current node should be disabled (not selectable).\n\n// The following example code will disable current node according to the value of example 'nodeDisabled' attribute.\n\nvar data = nodeCtx.data;\nif (data.hasOwnProperty('nodeDisabled') && data['nodeDisabled'] !== null) {\n    return data['nodeDisabled'] === 'true';\n} else {\n    return false;\n}\n  \n**/\n",
            "nodesSortFunction": "/**\n\n// This function is used to sort nodes of the same level. Function should compare two nodes and return \n// integer value: \n//     - less than 0 - sort nodeCtx1 to an index lower than nodeCtx2\n//     - 0 - leave nodeCtx1 and nodeCtx2 unchanged with respect to each other\n//     - greater than 0 - sort nodeCtx2 to an index lower than nodeCtx1\n\n// The following example code will sort entities first by entity type in alphabetical order then\n// by entity name in alphabetical order.\n\nvar result = nodeCtx1.entity.id.entityType.localeCompare(nodeCtx2.entity.id.entityType);\nif (result === 0) {\n    result = nodeCtx1.entity.name.localeCompare(nodeCtx2.entity.name);\n}\nreturn result;\n  \n**/",
            "nodeOpenedFunction": "/**\n\n// Function should return boolean value indicating whether current node should be opened (expanded) when it first loaded.\n\n// The following example code will open by default nodes up to third level.\n\nreturn nodeCtx.level <= 2;\n\n**/\n //return nodeCtx.level <=1;"
          },
          "title": "ACTIVOS Y DISPOSITIVOS",
          "dropShadow": true,
          "enableFullscreen": true,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400,
            "padding": "5px 10px 5px 10px"
          },
          "useDashboardTimewindow": false,
          "showLegend": false,
          "datasources": [
            {
              "type": "entity",
              "dataKeys": [],
              "entityAliasId": "bc41b835-4a1d-49fc-de3b-142ec2484fd4"
            }
          ],
          "widgetStyle": {},
          "actions": {
            "nodeSelected": [
              {
                "id": "a7202234-d4a6-48e7-81ed-4cbc6e19ecab",
                "name": "click",
                "icon": "more_horiz",
                "type": "customPretty",
                "customHtml": "<md-dialog flex aria-label=\"Edit entity\">\r\n\r\n\r\n    <md-tabs md-dynamic-height md-border-bottom>\r\n        <md-tab label=\"Editar\">\r\n            <form name=\"form.editEntityFormNull\"\r\n                ng-if=\"vm.entity.type=='ROOT'\">\r\n                <md-toolbar>\r\n                    <div class=\"md-toolbar-tools\">\r\n                        <h2>Editar activo ROOT\r\n                        </h2>\r\n                        <span flex></span>\r\n                        <md-button class=\"md-icon-button\"\r\n                            ng-click=\"vm.cancel()\">\r\n                            <ng-md-icon icon=\"close\"\r\n                                aria-label=\"Close\">\r\n                            </ng-md-icon>\r\n                        </md-button>\r\n                    </div>\r\n                </md-toolbar>\r\n                <md-dialog-content>\r\n                    <div class=\"md-dialog-content\">El activo\r\n                        ROOT es un requisito del\r\n                        sistema\r\n                        que no se puede editar.</div>\r\n                </md-dialog-content>\r\n                <md-dialog-actions>\r\n                    <md-button ng-click=\"vm.cancel()\"\r\n                        class=\"md-primary\">Cancelar\r\n                    </md-button>\r\n                </md-dialog-actions>\r\n            </form>\r\n            <form name=\"form.editEntityForm\"\r\n                class=\"edit-entity-form\"\r\n                ng-submit=\"vm.save()\"\r\n                ng-if=\"vm.entity.type!='ROOT'\">\r\n                <md-toolbar>\r\n                    <div class=\"md-toolbar-tools\">\r\n                        <h2>Editar\r\n                            {{vm.entityType.toLowerCase()==\"asset\"?\"activo\":\"dispositivo\"}}\r\n                            {{vm.attributes.nombreEntidad}}\r\n                        </h2>\r\n                        <span flex></span>\r\n                        <md-button class=\"md-icon-button\"\r\n                            ng-click=\"vm.cancel()\">\r\n                            <ng-md-icon icon=\"close\"\r\n                                aria-label=\"Close\">\r\n                            </ng-md-icon>\r\n                        </md-button>\r\n                    </div>\r\n                </md-toolbar>\r\n                <md-dialog-content>\r\n                    <div class=\"md-dialog-content\">\r\n                        <div layout=\"row\">\r\n                            <md-input-container flex\r\n                                class=\"md-block\">\r\n                                <label>Nombre</label>\r\n                                <input type=\"text\"\r\n                                    ng-model=\"vm.attributes.nombreEntidad\"\r\n                                    required>\r\n                            </md-input-container>\r\n                            <md-input-container flex\r\n                                class=\"md-block\">\r\n                                <label>Tipo</label>\r\n                                <md-select\r\n                                    ng-model=\"vm.attributes.tipoEntidad\"\r\n                                    required>\r\n                                    <md-option\r\n                                        ng-if=\"vm.entityType.toLowerCase()=='device'\"\r\n                                        ng-repeat=\"tipo in vm.tiposDeDispositivos\"\r\n                                        ng-value=\"tipo\"\r\n                                        ng-selected=\"{{tipo == vm.attributes.tipoEntidad}}\">\r\n                                        {{tipo}}\r\n                                    </md-option>\r\n                                    <md-option\r\n                                        ng-if=\"vm.entityType.toLowerCase()=='asset'\"\r\n                                        ng-repeat=\"tipo in vm.tiposDeActivos\"\r\n                                        ng-value=\"tipo\"\r\n                                        ng-selected=\"{{tipo == vm.attributes.tipoEntidad}}\">\r\n                                        {{tipo}}\r\n                                    </md-option>\r\n                                </md-select>\r\n                            </md-input-container>\r\n                            <md-input-container flex\r\n                                class=\"md-block\">\r\n                                <label>Padre</label>\r\n                                <md-select\r\n                                    ng-model=\"vm.padre\"\r\n                                    required>\r\n                                    <md-option\r\n                                        ng-repeat=\"(name,valor) in vm.activos\"\r\n                                        ng-value=\"name\"\r\n                                        ng-selected=\"{{name == vm.padre}}\">\r\n                                        {{valor.atributos.nombreEntidad}}/{{valor.atributos.tipoEntidad}}\r\n                                    </md-option>\r\n                                </md-select>\r\n                            </md-input-container>\r\n                        </div>\r\n                    </div>\r\n\r\n                </md-dialog-content>\r\n                <md-dialog-actions>\r\n                    <md-button type=\"submit\"\r\n                        ng-disabled=\"form.editEntityForm.$invalid || !form.editEntityForm.$dirty\"\r\n                        class=\"md-raised md-primary\">Aceptar\r\n                    </md-button>\r\n                    <md-button ng-click=\"vm.cancel()\"\r\n                        class=\"md-primary\">Cancelar\r\n                    </md-button>\r\n                </md-dialog-actions>\r\n            </form>\r\n        </md-tab>\r\n\r\n        <md-tab label=\"crear\">\r\n            <form name=\"form.addEntityFormNull\"\r\n                ng-if=\"vm.entityType.toLowerCase()=='device'\">\r\n                <md-toolbar>\r\n                    <div class=\"md-toolbar-tools\">\r\n                        <h2>Crear entidad hija de\r\n                            {{vm.attributes.nombreEntidad}}\r\n                        </h2>\r\n                        <span flex></span>\r\n                        <md-button class=\"md-icon-button\"\r\n                            ng-click=\"vm.cancel()\">\r\n                            <ng-md-icon icon=\"close\"\r\n                                aria-label=\"Close\">\r\n                            </ng-md-icon>\r\n                        </md-button>\r\n                    </div>\r\n                </md-toolbar>\r\n                <md-dialog-content>\r\n                    <div class=\"md-dialog-content\">No se\r\n                        pueden crear entidades hijas de\r\n                        dispositivos.</div>\r\n                </md-dialog-content>\r\n                <md-dialog-actions>\r\n                    <md-button ng-click=\"vm.cancel()\"\r\n                        class=\"md-primary\">Cancelar\r\n                    </md-button>\r\n                </md-dialog-actions>\r\n            </form>\r\n            <form name=\"form.addEntityForm\"\r\n                class=\"add-entity-form\"\r\n                ng-submit=\"vm.crear()\"\r\n                ng-if=\"vm.entityType.toLowerCase()!='device'\">\r\n                <md-toolbar>\r\n                    <div class=\"md-toolbar-tools\">\r\n                        <h2>Crear entidad hija de\r\n                            {{vm.attributes.nombreEntidad}}\r\n                        </h2>\r\n                        <span flex></span>\r\n                        <md-button class=\"md-icon-button\"\r\n                            ng-click=\"vm.cancel()\">\r\n                            <ng-md-icon icon=\"close\"\r\n                                aria-label=\"Close\">\r\n                            </ng-md-icon>\r\n                        </md-button>\r\n                    </div>\r\n                </md-toolbar>\r\n                <md-dialog-content>\r\n                    <div class=\"md-dialog-content\">\r\n                        <div layout=\"row\">\r\n                            <md-input-container flex\r\n                                class=\"md-block\"\r\n                                style=\"min-width: 100px; width: 150px;\">\r\n                                <label>Nombre</label>\r\n                                <input type=\"text\"\r\n                                    ng-model=\"vm.crearEntidad.nombreEntidad\"\r\n                                    name=nombreEntidad\r\n                                    required>\r\n                                <div\r\n                                    ng-messages=\"addEntityForm.nombreEntidad.$error\">\r\n                                    <div\r\n                                        ng-message=\"required\">\r\n                                        Es obligatorio\r\n                                        indicar un nombre.\r\n                                    </div>\r\n                                </div>\r\n                            </md-input-container>\r\n                            <tb-entity-type-select\r\n                                class=\"md-block\"\r\n                                style=\"min-width: 100px; width: 150px;\"\r\n                                the-form=\"addEntityForm\"\r\n                                tb-required=\"true\"\r\n                                allowed-entity-types=\"vm.allowedEntityTypes\"\r\n                                ng-model=\"vm.crearEntidad.tipoEntidad\">\r\n                            </tb-entity-type-select>\r\n\r\n                            <md-input-container flex\r\n                                class=\"md-block\"\r\n                                style=\"min-width: 100px; width: 150px;\">\r\n                                <label>Tipo de\r\n                                    {{vm.crearEntidad.tipoEntidad=='DEVICE'?'dispositivo':'activo'}}</label>\r\n                                <md-select\r\n                                    ng-model=\"vm.crearEntidad.subtipoEntidad\">\r\n                                    <md-option\r\n                                        ng-if=\"vm.crearEntidad.tipoEntidad.toLowerCase()=='device'\"\r\n                                        ng-repeat=\"tipo in vm.tiposDeDispositivos\"\r\n                                        ng-value=\"tipo\"\r\n                                        ng-selected=\"\">\r\n                                        {{tipo}}\r\n                                    </md-option>\r\n                                    <md-option\r\n                                        ng-if=\"vm.crearEntidad.tipoEntidad.toLowerCase()=='asset'\"\r\n                                        ng-repeat=\"tipo in vm.tiposDeActivos\"\r\n                                        ng-value=\"tipo\"\r\n                                        ng-selected=\"\">\r\n                                        {{tipo}}\r\n                                    </md-option>\r\n                                </md-select>\r\n                            </md-input-container>\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n                </md-dialog-content>\r\n                <md-dialog-actions>\r\n                    <md-button type=\"submit\"\r\n                        ng-disabled=\"form.addEntityForm.$invalid || !form.addEntityForm.$dirty\"\r\n                        class=\"md-raised md-primary\">Crear\r\n                    </md-button>\r\n                    <md-button ng-click=\"vm.cancel()\"\r\n                        class=\"md-primary\">Cancelar\r\n                    </md-button>\r\n                </md-dialog-actions>\r\n            </form>\r\n        </md-tab>\r\n\r\n        <md-tab ng-if=\"vm.configurable\" label=\"configurar\">\r\n                <md-toolbar>\r\n                    <div class=\"md-toolbar-tools\">\r\n                        <h2>Configurar\r\n                            {{vm.attributes.nombreEntidad}}\r\n                        </h2>\r\n                        <span flex></span>\r\n                        <md-button class=\"md-icon-button\"\r\n                            ng-click=\"vm.cancel()\">\r\n                            <ng-md-icon icon=\"close\"\r\n                                aria-label=\"Close\">\r\n                            </ng-md-icon>\r\n                        </md-button>\r\n                    </div>\r\n                </md-toolbar>\r\n                \r\n                \r\n                        <!-- CONFIGURACIÓN DEL NODO -->\r\n                        <sustituir class=\"ng-scope\"></sustituir>\r\n                        <!-- CONFIGURACIÓN DEL NODO -->\r\n                    \r\n                \r\n        </md-tab>\r\n\r\n\r\n        <md-tab label=\"borrar\">\r\n            <form name=\"form.deleteEntityFormNull\"\r\n                ng-if=\"vm.entity.type=='ROOT' || vm.borrable==false\">\r\n                <md-toolbar>\r\n                    <div class=\"md-toolbar-tools\">\r\n                        <h2>Borrar\r\n                        </h2>\r\n                        <span flex></span>\r\n                        <md-button class=\"md-icon-button\"\r\n                            ng-click=\"vm.cancel()\">\r\n                            <ng-md-icon icon=\"close\"\r\n                                aria-label=\"Close\">\r\n                            </ng-md-icon>\r\n                        </md-button>\r\n                    </div>\r\n                </md-toolbar>\r\n                <md-dialog-content>\r\n                    <div class=\"md-dialog-content\">No se\r\n                        puede borrar el activo ROOT ni los\r\n                        activos que tengan hijos.</div>\r\n                </md-dialog-content>\r\n                <md-dialog-actions>\r\n                    <md-button ng-click=\"vm.cancel()\"\r\n                        class=\"md-primary\">Cancelar\r\n                    </md-button>\r\n                </md-dialog-actions>\r\n            </form>\r\n            <form name=\"form.deleteEntityForm\"\r\n                class=\"delete-entity-form\"\r\n                ng-submit=\"vm.borrar()\"\r\n                ng-if=\"vm.entity.type!='ROOT' && vm.borrable==true\">\r\n                <md-toolbar>\r\n                    <div class=\"md-toolbar-tools\">\r\n                        <h2>Borrar\r\n                            {{vm.attributes.nombreEntidad}}\r\n                        </h2>\r\n                        <span flex></span>\r\n                        <md-button class=\"md-icon-button\"\r\n                            ng-click=\"vm.cancel()\">\r\n                            <ng-md-icon icon=\"close\"\r\n                                aria-label=\"Close\">\r\n                            </ng-md-icon>\r\n                        </md-button>\r\n                    </div>\r\n                </md-toolbar>\r\n                <md-dialog-content>\r\n                    <div class=\"md-dialog-content\">\r\n                        Esta operación no es reversible.\r\n                    </div>\r\n                </md-dialog-content>\r\n                <md-dialog-actions>\r\n                    <md-button type=\"submit\"\r\n                        class=\"md-primary\">Borrar\r\n                    </md-button>\r\n                    <md-button ng-click=\"vm.cancel()\"\r\n                        class=\"md-raised md-primary\">\r\n                        Cancelar\r\n                    </md-button>\r\n                </md-dialog-actions>\r\n            </form>\r\n        </md-tab>\r\n    </md-tabs>\r\n</md-dialog>\r\n\r\n<!--=======================================================================-->\r\n<!--=====  There are two example templates: for edit and add entity   =====-->\r\n<!--=======================================================================-->\r\n<!--========================  Edit entity example  ========================-->\r\n<!--=======================================================================-->\r\n<!-- -->\r\n<!--<md-dialog aria-label=\"Edit entity\">-->\r\n<!--    <form name=\"editEntityForm\" class=\"edit-entity-form\" ng-submit=\"vm.save()\">-->\r\n<!--        <md-toolbar>-->\r\n<!--            <div class=\"md-toolbar-tools\">-->\r\n<!--                <h2>Edit {{vm.entityType.toLowerCase()}} {{vm.entityName}}</h2>-->\r\n<!--                <span flex></span>-->\r\n<!--                <md-button class=\"md-icon-button\" ng-click=\"vm.cancel()\">-->\r\n<!--                    <ng-md-icon icon=\"close\" aria-label=\"Close\"></ng-md-icon>-->\r\n<!--                </md-button>-->\r\n<!--            </div>-->\r\n<!--        </md-toolbar>-->\r\n<!--        <md-dialog-content>-->\r\n<!--            <div class=\"md-dialog-content\">-->\r\n<!--                <div layout=\"row\">-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Entity Name</label>-->\r\n<!--                        <input ng-model=\"vm.entityName\" readonly>-->\r\n<!--                    </md-input-container>-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Entity Type</label>-->\r\n<!--                        <input ng-model=\"vm.entityType\" readonly>-->\r\n<!--                    </md-input-container>-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Type</label>-->\r\n<!--                        <input ng-model=\"vm.type\" readonly>-->\r\n<!--                    </md-input-container>-->\r\n<!--                </div>-->\r\n<!--                <div layout=\"row\">-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Latitude</label>-->\r\n<!--                        <input name=\"latitude\" type=\"number\" step=\"any\" ng-model=\"vm.attributes.latitude\">-->\r\n<!--                    </md-input-container>-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Longitude</label>-->\r\n<!--                        <input name=\"longitude\" type=\"number\" step=\"any\" ng-model=\"vm.attributes.longitude\">-->\r\n<!--                    </md-input-container>-->\r\n<!--                </div>-->\r\n<!--                 <div layout=\"row\">-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Address</label>-->\r\n<!--                        <input ng-model=\"vm.attributes.address\">-->\r\n<!--                    </md-input-container>-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Owner</label>-->\r\n<!--                        <input ng-model=\"vm.attributes.owner\">-->\r\n<!--                    </md-input-container>-->\r\n<!--                </div>-->\r\n<!--                <div layout=\"row\">-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Integer Value</label>-->\r\n<!--                        <input name=\"integerNumber\" type=\"number\" step=\"1\" ng-pattern=\"/^-?[0-9]+$/\" ng-model=\"vm.attributes.number\">-->\r\n<!--                        <div ng-messages=\"editEntityForm.integerNumber.$error\">-->\r\n<!--                            <div ng-message=\"pattern\">Invalid integer value.</div>-->\r\n<!--                        </div>-->\r\n<!--                    </md-input-container>-->\r\n<!--                    <div class=\"boolean-value-input\" layout=\"column\" layout-align=\"center start\" flex>-->\r\n<!--                        <label class=\"checkbox-label\">Boolean Value</label>-->\r\n<!--                        <md-checkbox ng-model=\"vm.attributes.booleanValue\" style=\"margin-bottom: 40px;\">-->\r\n<!--                            {{ (vm.attributes.booleanValue ? \"value.true\" : \"value.false\") | translate }}-->\r\n<!--                        </md-checkbox>-->\r\n<!--                    </div>-->\r\n<!--                </div>-->\r\n<!--                <div class=\"relations-list old-relations\">-->\r\n<!--                    <div class=\"md-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>-->\r\n<!--                    <div class=\"body\" ng-show=\"vm.relations.length\">-->\r\n<!--                        <div class=\"row\" layout=\"row\" layout-align=\"start center\" ng-repeat=\"relation in vm.relations track by $index\">-->\r\n<!--                            <div class=\"md-whiteframe-1dp\" flex layout=\"row\" style=\"padding-left: 5px; margin-bottom: 3px;\">-->\r\n<!--                                <div flex layout=\"column\">-->\r\n<!--                                    <div layout=\"row\">-->\r\n<!--                                        <md-input-container class=\"md-block\" style=\"min-width: 100px;\">-->\r\n<!--                                            <label>Direction</label>-->\r\n<!--                                            <md-select ng-disabled=\"true\" required ng-model=\"relation.direction\">-->\r\n<!--                                                <md-option ng-repeat=\"direction in vm.entitySearchDirection\" ng-value=\"direction\">-->\r\n<!--                                                    {{ (\"relation.search-direction.\" + direction) | translate}}-->\r\n<!--                                                </md-option>-->\r\n<!--                                            </md-select>-->\r\n<!--                                        </md-input-container>-->\r\n<!--                                        <tb-relation-type-autocomplete ng-disabled=\"true\" flex class=\"md-block\"-->\r\n<!--                                           the-form=\"editEntityForm\"-->\r\n<!--                                           ng-model=\"relation.relationType\"-->\r\n<!--                                           tb-required=\"true\">-->\r\n<!--                                        </tb-relation-type-autocomplete>-->\r\n<!--                                    </div>-->\r\n<!--                                    <div layout=\"row\">-->\r\n<!--                                        <tb-entity-select flex class=\"md-block\"-->\r\n<!--                                            the-form=\"editEntityForm\"-->\r\n<!--                                            ng-disabled=\"true\"-->\r\n<!--                                            tb-required=\"true\"-->\r\n<!--                                            ng-model=\"relation.relatedEntity\">-->\r\n<!--                                        </tb-entity-select>-->\r\n<!--                                    </div>-->\r\n<!--                                </div>-->\r\n<!--                                <div layout=\"column\" layout-align=\"center center\">-->\r\n<!--                                    <md-button class=\"md-icon-button md-primary\" style=\"width: 40px; min-width: 40px;\"-->\r\n<!--                                               ng-click=\"vm.removeOldRelation($index,relation)\" aria-label=\"Remove\">-->\r\n<!--                                        <md-tooltip md-direction=\"top\">Remove relation</md-tooltip>-->\r\n<!--                                        <md-icon aria-label=\"Remove\" class=\"material-icons\">-->\r\n<!--                                            close-->\r\n<!--                                        </md-icon>-->\r\n<!--                                    </md-button>-->\r\n<!--                                </div>-->\r\n<!--                            </div>-->\r\n<!--                        </div>-->\r\n<!--                    </div>-->\r\n<!--                </div>-->\r\n<!--                <div class=\"relations-list\">-->\r\n<!--                    <div class=\"md-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">New Relations</div>-->\r\n<!--                    <div class=\"body\" ng-show=\"vm.newRelations.length\">-->\r\n<!--                        <div class=\"row\" layout=\"row\" layout-align=\"start center\" ng-repeat=\"relation in vm.newRelations track by $index\">-->\r\n<!--                            <div class=\"md-whiteframe-1dp\" flex layout=\"row\" style=\"padding-left: 5px; margin-bottom: 3px;\">-->\r\n<!--                                <div flex layout=\"column\">-->\r\n<!--                                    <div layout=\"row\">-->\r\n<!--                                        <md-input-container class=\"md-block\" style=\"min-width: 100px;\">-->\r\n<!--                                            <label>Direction</label>-->\r\n<!--                                            <md-select name=\"direction\" required ng-model=\"relation.direction\">-->\r\n<!--                                                <md-option ng-repeat=\"direction in vm.entitySearchDirection\" ng-value=\"direction\">-->\r\n<!--                                                    {{ (\"relation.search-direction.\" + direction) | translate}}-->\r\n<!--                                                </md-option>-->\r\n<!--                                            </md-select>-->\r\n<!--                                            <div ng-messages=\"editEntityForm.direction.$error\">-->\r\n<!--                                                <div ng-message=\"required\">Relation direction is required.</div>-->\r\n<!--                                            </div>-->\r\n<!--                                        </md-input-container>-->\r\n<!--                                        <tb-relation-type-autocomplete flex class=\"md-block\"-->\r\n<!--                                           the-form=\"editEntityForm\"-->\r\n<!--                                           ng-model=\"relation.relationType\"-->\r\n<!--                                           tb-required=\"true\">-->\r\n<!--                                        </tb-relation-type-autocomplete>-->\r\n<!--                                    </div>-->\r\n<!--                                    <div layout=\"row\">-->\r\n<!--                                        <tb-entity-select flex class=\"md-block\"-->\r\n<!--                                            the-form=\"editEntityForm\"-->\r\n<!--                                            tb-required=\"true\"-->\r\n<!--                                            ng-model=\"relation.relatedEntity\">-->\r\n<!--                                        </tb-entity-select>-->\r\n<!--                                    </div>-->\r\n<!--                                </div>-->\r\n<!--                                <div layout=\"column\" layout-align=\"center center\">-->\r\n<!--                                    <md-button class=\"md-icon-button md-primary\" style=\"width: 40px; min-width: 40px;\"-->\r\n<!--                                               ng-click=\"vm.removeRelation($index)\" aria-label=\"Remove\">-->\r\n<!--                                        <md-tooltip md-direction=\"top\">Remove relation</md-tooltip>-->\r\n<!--                                        <md-icon aria-label=\"Remove\" class=\"material-icons\">-->\r\n<!--                                            close-->\r\n<!--                                        </md-icon>-->\r\n<!--                                    </md-button>-->\r\n<!--                                </div>-->\r\n<!--                            </div>-->\r\n<!--                        </div>-->\r\n<!--                    </div>-->\r\n<!--                   <div>-->\r\n<!--                       <md-button class=\"md-primary md-raised\" ng-click=\"vm.addRelation()\" aria-label=\"Add\">-->\r\n<!--                           <md-tooltip md-direction=\"top\">Add Relation</md-tooltip>-->\r\n<!--                           Add-->\r\n<!--                       </md-button>-->\r\n<!--                   </div> -->\r\n<!--                </div>-->\r\n<!--            </div>-->\r\n<!--        </md-dialog-content>-->\r\n<!--        <md-dialog-actions>-->\r\n<!--            <md-button type=\"submit\" ng-disabled=\"editEntityForm.$invalid || !editEntityForm.$dirty\" class=\"md-raised md-primary\">Save</md-button>-->\r\n<!--            <md-button ng-click=\"vm.cancel()\" class=\"md-primary\">Cancel</md-button>-->\r\n<!--        </md-dialog-actions>-->\r\n<!--    </form>-->\r\n<!--</md-dialog>-->\r\n<!---->\r\n<!--========================================================================-->\r\n<!--=========================  Add entity example  =========================-->\r\n<!--========================================================================-->\r\n<!---->\r\n<!--<md-dialog aria-label=\"Add entity\">-->\r\n<!--    <form name=\"addEntityForm\" class=\"add-entity-form\" ng-submit=\"vm.save()\">-->\r\n<!--        <md-toolbar>-->\r\n<!--            <div class=\"md-toolbar-tools\">-->\r\n<!--                <h2>Add entity</h2>-->\r\n<!--                <span flex></span>-->\r\n<!--                <md-button class=\"md-icon-button\" ng-click=\"vm.cancel()\">-->\r\n<!--                    <ng-md-icon icon=\"close\" aria-label=\"Close\"></ng-md-icon>-->\r\n<!--                </md-button>-->\r\n<!--            </div>-->\r\n<!--        </md-toolbar>-->\r\n<!--        <md-dialog-content>-->\r\n<!--            <div class=\"md-dialog-content\">-->\r\n<!--                <div layout=\"row\">-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Entity Name</label>-->\r\n<!--                        <input ng-model=\"vm.entityName\" name=entityName required>-->\r\n<!--                        <div ng-messages=\"addEntityForm.entityName.$error\">-->\r\n<!--                            <div ng-message=\"required\">Entity name is required.</div>-->\r\n<!--                        </div>-->\r\n<!--                    </md-input-container>-->\r\n<!--                    <tb-entity-type-select class=\"md-block\" style=\"min-width: 100px; width: 100px;\"-->\r\n<!--                       the-form=\"addEntityForm\"-->\r\n<!--                       tb-required=\"true\"-->\r\n<!--                       allowed-entity-types=\"vm.allowedEntityTypes\"-->\r\n<!--                       ng-model=\"vm.entityType\">-->\r\n<!--                    </tb-entity-type-select>-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Entity Subtype</label>-->\r\n<!--                        <input ng-model=\"vm.type\" name=type required>-->\r\n<!--                        <div ng-messages=\"addEntityForm.type.$error\">-->\r\n<!--                            <div ng-message=\"required\">Entity subtype is required.</div>-->\r\n<!--                        </div>-->\r\n<!--                    </md-input-container>-->\r\n<!--                </div>-->\r\n<!--                <div layout=\"row\">-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Latitude</label>-->\r\n<!--                        <input name=\"latitude\" type=\"number\" step=\"any\" ng-model=\"vm.attributes.latitude\">-->\r\n<!--                    </md-input-container>-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Longitude</label>-->\r\n<!--                        <input name=\"longitude\" type=\"number\" step=\"any\" ng-model=\"vm.attributes.longitude\">-->\r\n<!--                    </md-input-container>-->\r\n<!--                </div>-->\r\n<!--                 <div layout=\"row\">-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Address</label>-->\r\n<!--                        <input ng-model=\"vm.attributes.address\">-->\r\n<!--                    </md-input-container>-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Owner</label>-->\r\n<!--                        <input ng-model=\"vm.attributes.owner\">-->\r\n<!--                    </md-input-container>-->\r\n<!--                </div>-->\r\n<!--                <div layout=\"row\">-->\r\n<!--                    <md-input-container flex class=\"md-block\">-->\r\n<!--                        <label>Integer Value</label>-->\r\n<!--                        <input name=\"integerNumber\" type=\"number\" step=\"1\" ng-pattern=\"/^-?[0-9]+$/\" ng-model=\"vm.attributes.number\">-->\r\n<!--                        <div ng-messages=\"addEntityForm.integerNumber.$error\">-->\r\n<!--                            <div ng-message=\"pattern\">Invalid integer value.</div>-->\r\n<!--                        </div>-->\r\n<!--                    </md-input-container>-->\r\n<!--                    <div class=\"boolean-value-input\" layout=\"column\" layout-align=\"center start\" flex>-->\r\n<!--                        <label class=\"checkbox-label\">Boolean Value</label>-->\r\n<!--                        <md-checkbox ng-model=\"vm.attributes.booleanValue\" style=\"margin-bottom: 40px;\">-->\r\n<!--                            {{ (vm.attributes.booleanValue ? \"value.true\" : \"value.false\") | translate }}-->\r\n<!--                        </md-checkbox>-->\r\n<!--                    </div>-->\r\n<!--                </div>-->\r\n<!--                <div class=\"relations-list\">-->\r\n<!--                    <div class=\"md-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>-->\r\n<!--                    <div class=\"body\" ng-show=\"vm.relations.length\">-->\r\n<!--                        <div class=\"row\" layout=\"row\" layout-align=\"start center\" ng-repeat=\"relation in vm.relations track by $index\">-->\r\n<!--                            <div class=\"md-whiteframe-1dp\" flex layout=\"row\" style=\"padding-left: 5px;\">-->\r\n<!--                                <div flex layout=\"column\">-->\r\n<!--                                    <div layout=\"row\">-->\r\n<!--                                        <md-input-container class=\"md-block\" style=\"min-width: 100px;\">-->\r\n<!--                                            <label>Direction</label>-->\r\n<!--                                            <md-select name=\"direction\" required ng-model=\"relation.direction\">-->\r\n<!--                                                <md-option ng-repeat=\"direction in vm.entitySearchDirection\" ng-value=\"direction\">-->\r\n<!--                                                    {{ (\"relation.search-direction.\" + direction) | translate}}-->\r\n<!--                                                </md-option>-->\r\n<!--                                            </md-select>-->\r\n<!--                                            <div ng-messages=\"addEntityForm.direction.$error\">-->\r\n<!--                                                <div ng-message=\"required\">Relation direction is required.</div>-->\r\n<!--                                            </div>-->\r\n<!--                                        </md-input-container>-->\r\n<!--                                        <tb-relation-type-autocomplete flex class=\"md-block\"-->\r\n<!--                                           the-form=\"addEntityForm\"-->\r\n<!--                                           ng-model=\"relation.relationType\"-->\r\n<!--                                           tb-required=\"true\">-->\r\n<!--                                        </tb-relation-type-autocomplete>-->\r\n<!--                                    </div>-->\r\n<!--                                    <div layout=\"row\">-->\r\n<!--                                        <tb-entity-select flex class=\"md-block\"-->\r\n<!--                                            the-form=\"addEntityForm\"-->\r\n<!--                                            tb-required=\"true\"-->\r\n<!--                                            ng-model=\"relation.relatedEntity\">-->\r\n<!--                                        </tb-entity-select>-->\r\n<!--                                    </div>-->\r\n<!--                                </div>-->\r\n<!--                                <div layout=\"column\" layout-align=\"center center\">-->\r\n<!--                                    <md-button class=\"md-icon-button md-primary\" style=\"width: 40px; min-width: 40px;\"-->\r\n<!--                                               ng-click=\"vm.removeRelation($index)\" aria-label=\"Remove\">-->\r\n<!--                                        <md-tooltip md-direction=\"top\">Remove relation</md-tooltip>-->\r\n<!--                                        <md-icon aria-label=\"Remove\" class=\"material-icons\">-->\r\n<!--                                            close-->\r\n<!--                                        </md-icon>-->\r\n<!--                                    </md-button>-->\r\n<!--                                </div>-->\r\n<!--                            </div>-->\r\n<!--                        </div>-->\r\n<!--                    </div>-->\r\n<!--                   <div>-->\r\n<!--                       <md-button class=\"md-primary md-raised\" ng-click=\"vm.addRelation()\" aria-label=\"Add\">-->\r\n<!--                           <md-tooltip md-direction=\"top\">Add Relation</md-tooltip>-->\r\n<!--                           Add-->\r\n<!--                       </md-button>-->\r\n<!--                   </div> -->\r\n<!--                </div>-->\r\n<!--            </div>-->\r\n<!--        </md-dialog-content>-->\r\n<!--        <md-dialog-actions>-->\r\n<!--            <md-button type=\"submit\" ng-disabled=\"addEntityForm.$invalid || !addEntityForm.$dirty\" class=\"md-raised md-primary\">Create</md-button>-->\r\n<!--            <md-button ng-click=\"vm.cancel()\" class=\"md-primary\">Cancel</md-button>-->\r\n<!--        </md-dialog-actions>-->\r\n<!--    </form>-->\r\n<!--</md-dialog>-->",
                "customCss": "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form md-input-container {\n    padding-right: 10px;\n}\n\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body md-autocomplete-wrap md-input-container {\n    height: 30px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n\n.relations-list.old-relations tb-entity-select tb-entity-autocomplete button {\n    display: none;\n} \n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form md-input-container {\n    padding-right: 10px;\n}\n\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body md-autocomplete-wrap md-input-container {\n    height: 30px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction": "var $injector = widgetContext.$scope.$injector;\r\nvar $mdDialog = $injector.get('$mdDialog'),\r\n    $document = $injector.get('$document'),\r\n    $location = $injector.get('$location'),\r\n    $q = $injector.get('$q'),\r\n    types = $injector.get('types'),\r\n    $rootScope = $injector.get('$rootScope'),\r\n    entityService = $injector.get('entityService'),\r\n    attributeService = $injector.get('attributeService'),\r\n    assetService = $injector.get('assetService'),\r\n    userService = $injector.get('userService'),\r\n    deviceService = $injector.get('deviceService'),\r\n    servicioHTTP = $injector.get(\r\n        '$http'),\r\n    entityRelationService = $injector.get(\r\n        'entityRelationService');\r\n\r\n//Obtengo el código de configuración del tipo de nodo\r\nvar notificaciones =\r\n    '<md-card> Notificaciones <md-card ng-if=\"vm.viasNotificacion.email\"> <label class=\"checkbox-label\">email</label> <md-checkbox ng-disabled=\"!vm.configuracion.__alarmas.cambioDeEstado.enable || !vm.viasNotificacion.email\" ng-model=\"vm.configuracion.__alarmas.cambioDeEstado.email\" style=\"margin-bottom: 10px;\"> {{ (vm.configuracion.__alarmas.cambioDeEstado.email ? \"value.true\" : \"value.false\") | translate }} </md-checkbox> <md-card> <label class=\"checkbox-label\">Enviar al email principal</label> <md-checkbox ng-disabled=\"!vm.configuracion.__alarmas.cambioDeEstado.enable || !vm.viasNotificacion.email\" ng-model=\"vm.configuracion.__alarmas.cambioDeEstado.emailPrincipal\" style=\"margin-bottom: 10px;\"> {{ (vm.configuracion.__alarmas.cambioDeEstado.emailPrincipal ? \"value.true\" : \"value.false\") | translate }} </md-checkbox> <label>Enviar a emails adicionales</label> <md-chips ng-model=\"vm.configuracion.__alarmas.cambioDeEstado.emailsAdicionales\" placeholder=\"Máximo 3 emails\" md-removable=\"vm.configuracion.__alarmas.cambioDeEstado.enable && vm.viasNotificacion.email && vm.configuracion.__alarmas.cambioDeEstado.email\" md-enable-chip-edit=\"vm.configuracion.__alarmas.cambioDeEstado.enable && vm.viasNotificacion.email && vm.configuracion.__alarmas.cambioDeEstado.email\" md-max-chips=\"3\" readonly=\"!vm.configuracion.__alarmas.cambioDeEstado.enable || !vm.viasNotificacion.email || !vm.configuracion.__alarmas.cambioDeEstado.email\" ></md-chips> </md-card> </md-card> <md-card> <label class=\"checkbox-label\">Telegram</label> <md-checkbox ng-disabled=\"!vm.configuracion.__alarmas.cambioDeEstado.enable || !vm.viasNotificacion.telegram\" ng-model=\"vm.configuracion.__alarmas.cambioDeEstado.telegram\" style=\"margin-bottom: 10px;\"> {{ (vm.configuracion.__alarmas.cambioDeEstado.telegram ? \"value.true\" : \"value.false\") | translate }} </md-checkbox> </md-card> <md-card> <div flex layout=\"column\"> <label class=\"checkbox-label\">IFTTT</label> <md-checkbox ng-disabled=\"!vm.configuracion.__alarmas.cambioDeEstado.enable || !vm.viasNotificacion.ifttt\" ng-model=\"vm.configuracion.__alarmas.cambioDeEstado.ifttt\" style=\"margin-bottom: 10px;\"> {{ (vm.configuracion.__alarmas.cambioDeEstado.ifttt ? \"value.true\" : \"value.false\") | translate }} </md-checkbox> </div> <md-input-container flex class=\"md-block\"> <label>Evento IFTTT</label> <input size=\"40\" ng-disabled=\"!vm.configuracion.__alarmas.cambioDeEstado.enable || !vm.configuracion.__alarmas.cambioDeEstado.ifttt\" ng-model=\"vm.configuracion.__alarmas.cambioDeEstado.iftttEvento\" ng-required=\"vm.configuracion.__alarmas.cambioDeEstado.enable && vm.configuracion.__alarmas.cambioDeEstado.ifttt\" /> </md-input-container> </md-card> <!--Final notificaciones--></md-card>';\r\nvar chirpstack =\r\n    '<div class=\"body\"> <div class=\"row\" layout=\"row\" layout-align=\"start center\"> <div class=\"md-whiteframe-1dp\" flex layout=\"column\" style=\"padding-left: 5px; margin-bottom: 3px;\"> <div class=\"md-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">ChirpStack</div><div class=\"row\" layout=\"column\"> <md-input-container flex class=\"md-block\"> <label>URL de ChirpStack</label> <input type=\"text\" size=\"30\" ng-model=\"vm.configuracion.__cs_url\" placeholder=\"https://my.iotopentech.io:8080\"/> </md-input-container><md-input-container flex class=\"md-block\"> <label>JWT ChirpStack</label> <input type=\"password\" size=\"30\" ng-model=\"vm.configuracion.__cs_token\" /> </md-input-container> </div> </div> </div></div>';\r\nvar coordenadas =\r\n    '<div class=\"md-body-1\" style=\"padding-bottom: 10px; color: rgba(0, 0, 0, 0.57);\">Coordenadas</div><div class=\"body\" style=\"margin-bottom: 25px;\"> <div class=\"row\" layout=\"row\" layout-align=\"start center\"> <div class=\"md-whiteframe-1dp\" flex layout=\"column\" style=\"padding-left: 5px; margin-bottom: 3px;\"> <div class=\"row\" layout=\"row\"> <md-radio-group ng-model=\"vm.configuracion.__tipoCoordenadas\"> <md-radio-button value=\"Imagen\">Imagen</md-radio-button> <md-radio-button value=\"Mapa\">Mapa</md-radio-button> </md-radio-group> </div> <div class=\"row\" layout=\"row\" ng-if=\"vm.configuracion.__tipoCoordenadas==\\'Imagen\\'\"> <md-input-container flex class=\"md-block\"> <label>Posicion X (expresada entre 0 y 1)</label> <input type=\"number\" size=\"10\" step=\".01\" min=\"0\" max=\"1\" ng-model=\"vm.configuracion.__xPos\" ng-required=\"vm.configuracion.__tipoCoordenadas==\\'Imagen\\'\"/> </md-input-container> <md-input-container flex class=\"md-block\"> <label>Posicion Y (expresada entre 0 y 1)</label> <input type=\"number\" size=\"10\" step=\"0.01\" min=\"0.00\" max=\"1.00\" ng-model=\"vm.configuracion.__yPos\" ng-required=\"vm.configuracion.__tipoCoordenadas==\\'Imagen\\'\"/> </md-input-container> </div> <div class=\"row\" layout=\"row\" ng-if=\"vm.configuracion.__tipoCoordenadas==\\'Mapa\\'\"> <md-input-container flex class=\"md-block\"> <label>Latitud</label> <input type=\"number\" size=\"10\" step=\".01\" min=\"0\" max=\"1\" ng-model=\"vm.configuracion.__latitude\" ng-required=\"vm.configuracion.__tipoCoordenadas==\\'Mapa\\'\"/> </md-input-container> <md-input-container flex class=\"md-block\"> <label>Longitud</label> <input type=\"number\" size=\"10\" step=\"0.01\" min=\"0.00\" max=\"1.00\" ng-model=\"vm.configuracion.__longitude\" ng-required=\"vm.configuracion.__tipoCoordenadas==\\'Mapa\\'\"/> </md-input-container> </div> </div> </div></div>';\r\nvar subtipo = \"\";\r\nvar configurable = false;\r\nvar htmlTemplate2 = htmlTemplate;\r\nvar emailsAdicionales = [];\r\nvar allowedEntityTypes = [];\r\nvar funciones = [];\r\n/*\r\nif (entityId.entityType != types\r\n    .entityType.device) {\r\n    openEditEntityDialog();\r\n} else {\r\n*/\r\nentityService.getEntity(entityId.entityType,\r\n    entityId.id).then(\r\n    function(entity) {\r\n        subtipo = entity.type;\r\n        //console.log(subtipo);\r\n        attributeService.getEntityAttributesValues(\r\n            'CUSTOMER', userService\r\n            .getCurrentUser()\r\n            .customerId,\r\n            'SERVER_SCOPE').then(\r\n            function(data) {\r\n                if (data.length) {\r\n                    getConfiguracion(\r\n                        data);\r\n                }\r\n            });\r\n\r\n\r\n    });\r\n\r\n//getConfiguracion();\r\n//}\r\n\r\n//openEditEntityDialog();\r\n\r\nfunction getConfiguracion(attributes) {\r\n    for (var i = 0; i < attributes.length; i++) {\r\n        if (attributes[i].key ==\r\n            subtipo + \"_config\") {\r\n            configurable = true;\r\n            var copia = attributes[i].value;\r\n\r\n            //Extraigo las funciones\r\n            //No puede haber nada por delante de las funciones en el atributo config\r\n            funciones = copia.split('</funciones>');\r\n            if (funciones.length == 2) {\r\n                copia = funciones[\r\n                    1]; //Me quedo con la parte HTML\r\n                //Hay declaración de funciones\r\n                funciones = funciones[0].split(\r\n                    '<funciones>');\r\n                funciones = funciones[1];\r\n\r\n                funciones = JSON.parse(funciones);\r\n            }\r\n\r\n            //En copia tengo el HTML, sin las funciones\r\n            //TODO: Sustituir alarmas (alarmasMaxMin, Max y Min) por bloques genéricos\r\n\r\n\r\n            var res = copia.split(\r\n                '<sustituir-notificaciones class=\"ng-scope\">'\r\n            );\r\n            //Reemplazo las notificaciones de las alarmas\r\n            for (var j = 1; j < res.length; j++) {\r\n                var res2 = res[j].split(\r\n                    '</sustituir-notificaciones>');\r\n                res2 = res2[0];\r\n                emailsAdicionales.push(res2);\r\n                //console.log(res2);\r\n                copia = copia.replace(\r\n                    '<sustituir-notificaciones class=\"ng-scope\">' +\r\n                    res2 +\r\n                    '</sustituir-notificaciones>',\r\n                    notificaciones.replace(\r\n                        /cambioDeEstado/g, res2));\r\n                //El modificador /g de replace sustituye todas las ocurrencias\r\n            }\r\n\r\n\r\n\r\n            copia = copia.replace(\r\n                '<sustituir-chirpstack class=\"ng-scope\"></sustituir-chirpstack>',\r\n                chirpstack);\r\n\r\n            copia = copia.replace(\r\n                '<sustituir-coordenadas class=\"ng-scope\"></sustituir-coordenadas>',\r\n                coordenadas);\r\n            //Introduzco copia en la sección configuración de la plantilla html\r\n            htmlTemplate2 = htmlTemplate2.replace(\r\n                '<sustituir class=\"ng-scope\"></sustituir>',\r\n                copia);\r\n\r\n        } else if (attributes[i].key == \"credito\") {\r\n            //Si no hay crédito no se pueden crear dispositivos\r\n            if (parseInt(attributes[i].value) > 0) {\r\n                allowedEntityTypes = [types\r\n                    .entityType.asset,\r\n                    types.entityType.device\r\n                ];\r\n            } else {\r\n                allowedEntityTypes = [types\r\n                    .entityType.asset\r\n                ];\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    openEditEntityDialog();\r\n}\r\n\r\n\r\nfunction openEditEntityDialog() {\r\n    $mdDialog.show({\r\n        controller: ['$scope', '$mdDialog',\r\n            EditEntityDialogController\r\n        ],\r\n        controllerAs: 'vm',\r\n        template: htmlTemplate2,\r\n        locals: {\r\n            entityId: entityId\r\n        },\r\n        parent: angular.element($document[0].body),\r\n        targetEvent: $event,\r\n        multiple: true,\r\n        clickOutsideToClose: false\r\n    });\r\n}\r\n\r\n\r\nfunction crearFuncion($scope, codigo) {\r\n    return function() {\r\n        eval(codigo);\r\n    };\r\n}\r\n\r\nfunction EditEntityDialogController($scope, $mdDialog) {\r\n    $scope.form = {};\r\n    $scope.chip = \"$scope\";\r\n    var vm = this;\r\n    vm.entityId = entityId;\r\n    vm.entityName = entityName;\r\n    vm.entityType = entityId.entityType;\r\n    vm.allowedEntityTypes = allowedEntityTypes;\r\n    vm.allowedRelatedEntityTypes = [];\r\n    vm.entitySearchDirection = types\r\n        .entitySearchDirection;\r\n    vm.tiposDeDispositivos = {};\r\n    vm.tiposDeActivos = {};\r\n    vm.activos = {};\r\n    vm.padre = {};\r\n    vm.attributes = {};\r\n    vm.configuracion = {};\r\n    vm.existeInicializacion = false;\r\n    //vm.configuracion.___fechaHora = new Date();\r\n\r\n\r\n    vm.configuracion.__alarmas = {};\r\n    for (var j = 0; j < emailsAdicionales.length; j++) {\r\n        vm.configuracion.__alarmas[emailsAdicionales[\r\n            j]] = {};\r\n        vm.configuracion.__alarmas[emailsAdicionales[j]]\r\n            .emailsAdicionales = [];\r\n        //console.log(emailsAdicionales[j]);\r\n    }\r\n\r\n    vm.viasNotificacion = {};\r\n    vm.serverAttributes = {};\r\n    vm.relations = [];\r\n    vm.newRelations = [];\r\n    vm.relationsToDelete = [];\r\n    vm.borrable = false;\r\n    vm.HTMLconfig = \"\";\r\n    vm.subtipo = subtipo;\r\n    vm.configurable = configurable;\r\n\r\n\r\n    getEntityInfo();\r\n\r\n    //Creo las funciones\r\n    if (funciones.length > 0) {\r\n        for (var k = 0; k < funciones.length; k++) {\r\n            var obj = funciones[k];\r\n            if (obj.nombre != 'inicializacion') {\r\n                $scope[obj.nombre] = crearFuncion($scope,\r\n                    obj\r\n                    .codigo);\r\n            } else {\r\n                //Si existe la funcion inicialización, la ejecuto\r\n                //eval(obj.codigo);\r\n\r\n                $scope.inicializacion = crearFuncion($scope,\r\n                    obj\r\n                    .codigo);\r\n                vm.existeInicializacion = true;\r\n                \r\n            }\r\n        }\r\n    }\r\n\r\n    vm.addRelation = function() {\r\n        var relation = {\r\n            direction: null,\r\n            relationType: null,\r\n            relatedEntity: null\r\n        };\r\n        vm.newRelations.push(relation);\r\n        $scope.editEntityForm.$setDirty();\r\n    };\r\n    vm.removeRelation = function(index) {\r\n        if (index > -1) {\r\n            vm.newRelations.splice(index, 1);\r\n            $scope.editEntityForm.$setDirty();\r\n        }\r\n    };\r\n    vm.removeOldRelation = function(index, relation) {\r\n        if (index > -1) {\r\n            vm.relations.splice(index, 1);\r\n            vm.relationsToDelete.push(relation);\r\n            $scope.editEntityForm.$setDirty();\r\n        }\r\n    };\r\n    vm.borrar = function() {\r\n        openDeleteEntityDialog();\r\n\r\n        function openDeleteEntityDialog() {\r\n            $scope.form.deleteEntityForm\r\n                .$setPristine();\r\n            var title = 'Borrar ' +\r\n                entityName;\r\n            var content =\r\n                '¿Seguro que desea borrar la entidad ' +\r\n                entityName + '?';\r\n            var confirm = $mdDialog.confirm()\r\n                .targetEvent($event)\r\n                .title(title)\r\n                .htmlContent(content)\r\n                .ariaLabel(title)\r\n                .cancel('Cancelar')\r\n                .ok('Borrar');\r\n            $mdDialog.show(confirm).then(\r\n                function() {\r\n                    deleteEntity();\r\n                });\r\n        }\r\n\r\n        function deleteEntity() {\r\n            servicioHTTP({\r\n                method: 'POST',\r\n                url: $location.protocol() +\r\n                    '://' +\r\n                    $location.host() + ':' +\r\n                    $location.port() +\r\n                    '/api/v1/' + vm\r\n                    .tokenControl +\r\n                    '/telemetry',\r\n                data: \"{'accion':'borrarEntidad','nombreEntidad':'_\" +\r\n                    vm\r\n                    .attributes\r\n                    .nombreEntidad +\r\n                    \"','idEntidad':'\" +\r\n                    vm.entityId.id +\r\n                    \"','tipoEntidad':'\" + vm\r\n                    .entityType +\r\n                    \"'}\"\r\n            }).\r\n            success(function(data, status, headers,\r\n                config) {\r\n                //Con el sistema de queues es más lento\r\n                //Habría que obtener de algún modo una confirmación del borrado\r\n                //o simplemente una pausa\r\n                setTimeout(updateAliasData,\r\n                    2000);\r\n                console.log('worked');\r\n                //updateAliasData();\r\n                $mdDialog.hide();\r\n                // ...\r\n            }).\r\n            error(function(data, status, headers,\r\n                config) {\r\n                console.log('notworked');\r\n                // ...\r\n            });\r\n        }\r\n    };\r\n    vm.crear = function() {\r\n        //console.log( vm.crearEntidad.nombreEntidad);\r\n        //TODO: Gestionar colisión de nombres\r\n        servicioHTTP({\r\n            method: 'POST',\r\n            url: $location.protocol() +\r\n                '://' +\r\n                $location.host() + ':' +\r\n                $location.port() +\r\n                '/api/v1/' + vm\r\n                .tokenControl +\r\n                '/telemetry',\r\n            data: \"{'accion':'crearEntidad','nombreEntidad':'_\" +\r\n                vm.crearEntidad\r\n                .nombreEntidad +\r\n                \"','tipoEntidad':'\" + vm\r\n                .crearEntidad.tipoEntidad +\r\n                \"','subtipoEntidad':'\" + vm\r\n                .crearEntidad\r\n                .subtipoEntidad +\r\n                \"','padreEntidadId':'\" + vm\r\n                .entityId.id +\r\n                \"','padreEntidadNombre':'\" +\r\n                vm\r\n                .entityName + \"'}\"\r\n        }).\r\n        success(function(data, status, headers,\r\n            config) {\r\n            console.log('worked');\r\n            setTimeout(updateAliasData,\r\n                2000);\r\n            //updateAliasData();\r\n            $scope.form.addEntityForm\r\n                .$setPristine();\r\n            $mdDialog.hide();\r\n            // ...\r\n        }).\r\n        error(function(data, status, headers,\r\n            config) {\r\n            console.log('notworked');\r\n            // ...\r\n        });\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    vm.save = function() {\r\n        servicioHTTP({\r\n            method: 'POST',\r\n            url: $location.protocol() +\r\n                '://' +\r\n                $location.host() + ':' +\r\n                $location.port() +\r\n                '/api/v1/' + vm\r\n                .tokenControl +\r\n                '/telemetry',\r\n            data: \"{'accion':'editarEntidad','idEntidad':'\" +\r\n                vm.entityId.id +\r\n                \"','nombreEntidad':'_\" + vm\r\n                .attributes.nombreEntidad +\r\n                \"','subtipoEntidad':'\" + vm\r\n                .attributes.tipoEntidad +\r\n                \"','tipoEntidad':'\" + vm\r\n                .entityType +\r\n                \"','padreEntidad':'\" + vm\r\n                .padre +\r\n                \"','tipoPadreEntidad':'\" +\r\n                vm\r\n                .activos[vm.padre].tipo +\r\n                \"'}\"\r\n        }).\r\n        success(function(data, status, headers,\r\n            config) {\r\n            console.log('worked');\r\n            setTimeout(updateAliasData,\r\n                2000);\r\n            //updateAliasData();\r\n            $scope.form.editEntityForm\r\n                .$setPristine();\r\n            $mdDialog.hide();\r\n            // ...\r\n        }).\r\n        error(function(data, status, headers,\r\n            config) {\r\n            console.log('notworked');\r\n            // ...\r\n        });\r\n\r\n\r\n        //saveAttributes();\r\n        //saveRelations();\r\n        //$scope.editEntityForm.$setPristine();\r\n    };\r\n\r\n    vm.configurar = function() {\r\n        //Si hay atributos de alarma tengo que stringifycarlos\r\n\r\n        vm.configuracion.__alarmas = JSON.stringify(\r\n            vm\r\n            .configuracion.__alarmas);\r\n        vm.configuracion = JSON.stringify(vm\r\n            .configuracion);\r\n        //console.log(vm.attributes);\r\n        servicioHTTP({\r\n            method: 'POST',\r\n            url: $location.protocol() +\r\n                '://' +\r\n                $location.host() + ':' +\r\n                $location.port() +\r\n                '/api/v1/' + vm\r\n                .tokenControl +\r\n                '/telemetry',\r\n            data: \"{'accion':'configurarEntidad','idEntidad':'\" +\r\n                vm.entityId.id +\r\n                \"','configuracion':\" + vm\r\n                .configuracion + \"}\"\r\n        }).\r\n        success(function(data, status, headers,\r\n            config) {\r\n            console.log('worked');\r\n            updateAliasData();\r\n            $scope.form.editEntityForm\r\n                .$setPristine();\r\n            $mdDialog.hide();\r\n            // ...\r\n        }).\r\n        error(function(data, status, headers,\r\n            config) {\r\n            console.log('notworked');\r\n            // ...\r\n        });\r\n\r\n\r\n        //saveAttributes();\r\n        //saveRelations();\r\n        //$scope.editEntityForm.$setPristine();\r\n    };\r\n\r\n    vm.cancel = function() {\r\n        $mdDialog.hide();\r\n    };\r\n\r\n    function getEntityAttributes(attributes) {\r\n        //console.log(attributes);\r\n        //El nombre de todos los atributos de configuración va a comenzar con __\r\n        for (var i = 0; i < attributes.length; i++) {\r\n            if (attributes[i].key.substr(0, 2) ==\r\n                \"__\") {\r\n                if (attributes[i].key == \"__alarma_\" +\r\n                    vm\r\n                    .subtipo) {\r\n                    var alarmas = JSON.parse(attributes[\r\n                            i]\r\n                        .value);\r\n                    for (var clave in alarmas) {\r\n                        vm.configuracion.__alarmas[\r\n                                clave] =\r\n                            alarmas[clave];\r\n                        if (!alarmas[clave]\r\n                            .hasOwnProperty(\r\n                                'emailsAdicionales')) {\r\n                            vm.configuracion.__alarmas[\r\n                                    clave]\r\n                                .emailsAdicionales = [];\r\n                        }\r\n                    }\r\n                    /*\r\n                                    } else if (attributes[i].key ==\r\n                                        \"___fechaHora\") {\r\n                                        vm.configuracion.___fechaHora = new Date(attributes[i].value);\r\n                    */\r\n                } else {\r\n                    vm.configuracion[attributes[i]\r\n                            .key] =\r\n                        attributes[i]\r\n                        .value;\r\n                }\r\n            } else if (attributes[i].key ==\r\n                \"nombreEntidad\") {\r\n                //Hago esto para quitar el guión bajo y evitar que se puedan perder leading zeros\r\n                vm.attributes[attributes[i].key] =\r\n                    attributes[i].value.substr(1);\r\n            } else {\r\n                vm.attributes[attributes[i].key] =\r\n                    attributes[i].value;\r\n            }\r\n        }\r\n        //Ejecuto la función de inicialización si existe\r\n        if (vm.existeInicializacion == true) {\r\n            \r\n            $scope.inicializacion();\r\n        }\r\n        vm.serverAttributes = angular.copy(vm\r\n            .attributes);\r\n    }\r\n\r\n    function getTiposDeActivosYDispositivos(\r\n        attributes) {\r\n        for (var i = 0; i < attributes.length; i++) {\r\n            if (attributes[i].key ==\r\n                \"tiposDeDispositivos\") {\r\n                vm.tiposDeDispositivos = attributes[i]\r\n                    .value\r\n                    .split(\",\");\r\n            } else if (attributes[i].key ==\r\n                \"tiposDeActivos\") {\r\n                vm.tiposDeActivos = attributes[i].value\r\n                    .split(\",\");\r\n            } else if (attributes[i].key ==\r\n                \"email\") {\r\n                if (attributes[i].value !== \"\") {\r\n                    vm.viasNotificacion.email = true;\r\n                } else {\r\n                    vm.viasNotificacion.email = false;\r\n                }\r\n            } else if (attributes[i].key ==\r\n                \"token_telegram\") {\r\n                if (attributes[i].value !== \"\") {\r\n                    vm.viasNotificacion.telegram = true;\r\n                } else {\r\n                    vm.viasNotificacion.telegram =\r\n                        false;\r\n                }\r\n\r\n            } else if (attributes[i].key ==\r\n                \"token_webhook_ifttt\") {\r\n                if (attributes[i].value !== \"\") {\r\n                    vm.viasNotificacion.ifttt = true;\r\n                } else {\r\n                    vm.viasNotificacion.ifttt = false;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function getActivos(activos) {\r\n        //Los uso para establecer los padres\r\n        //Aquí habrá que generalizar para usar los atributos nombre y tipo, en lugar de los fields?\r\n        for (var i = 0; i < activos.length; i++) {\r\n            //Si es un activo no debe incluirse a sí mismo\r\n            if (vm.entityType == \"DEVICE\" || vm.entityId\r\n                .id !=\r\n                activos[i].id.id) {\r\n                getAtributosActivo(activos[i].id.id,\r\n                    activos[i].name, activos[i].type\r\n                );\r\n\r\n            } else {\r\n                //console.log(\"b_\" + vm.entityId.id + \"__\" +activos[i].id.id);\r\n            }\r\n        }\r\n        //console.log(vm.activos);\r\n    }\r\n\r\n    function getAtributosActivo(id, nombreActivo,\r\n        tipoActivo) {\r\n        attributeService.getEntityAttributesValues(\r\n            'ASSET',\r\n            id, 'SERVER_SCOPE').then(\r\n            function success(data) {\r\n                var parametros = {};\r\n                for (var i = 0; i < data\r\n                    .length; i++) {\r\n                    //console.log(data[i].key,data[i].value);\r\n                    if (data[i].key ==\r\n                        \"nombreEntidad\") {\r\n                        parametros[\r\n                                'nombreEntidad'] =\r\n                            data[i]\r\n                            .value.substr(1);\r\n                    } else {\r\n                        parametros[data[i].key] =\r\n                            data[\r\n                                i]\r\n                            .value;\r\n                    }\r\n                }\r\n                vm.activos[nombreActivo] = {\r\n                    'tipo': tipoActivo,\r\n                    'atributos': parametros\r\n                };\r\n                //console.log(vm.activos[nombreActivo]);\r\n\r\n            });\r\n    }\r\n\r\n\r\n    function getEntityRelations(relations) {\r\n        var relationsFrom = relations[0];\r\n        var relationsTo = relations[1];\r\n        //Si tiene hijos no se puede borrar\r\n        vm.borrable = true;\r\n        for (var i = 0; i < relationsFrom.length; i++) {\r\n            vm.borrable = false;\r\n            var relation = {\r\n                direction: types\r\n                    .entitySearchDirection.from,\r\n                relationType: relationsFrom[i].type,\r\n                relatedEntity: relationsFrom[i].to\r\n            };\r\n            vm.relations.push(relation);\r\n        }\r\n\r\n        for (var i = 0; i < relationsTo.length; i++) {\r\n\r\n            var relation = {\r\n                direction: types\r\n                    .entitySearchDirection.to,\r\n                relationType: relationsTo[i].type,\r\n                relatedEntity: relationsTo[i].from\r\n            };\r\n            if (relation.relationType == \"Contains\" &&\r\n                relation.relatedEntity.entityType ==\r\n                \"ASSET\"\r\n            ) {\r\n                establecerNombrePadre(relation\r\n                    .relatedEntity\r\n                    .id);\r\n                //Necesito el nombre del padre\r\n            }\r\n            vm.relations.push(relation);\r\n        }\r\n\r\n    }\r\n\r\n    function establecerNombrePadre(id) {\r\n        assetService.getAsset(id).then(\r\n            function(data) {\r\n                vm.padre = data.name;\r\n                //console.log(vm.padre);\r\n            }\r\n        );\r\n    }\r\n\r\n    function getEntityInfo() {\r\n        entityService.getEntity(entityId.entityType,\r\n            entityId.id).then(\r\n            function(entity) {\r\n                vm.entity = entity;\r\n                vm.type = vm.entity.type;\r\n            });\r\n\r\n        attributeService.getEntityAttributesValues(\r\n            entityId.entityType, entityId.id,\r\n            'SERVER_SCOPE').then(\r\n            function(data) {\r\n                if (data.length) {\r\n                    getEntityAttributes(data);\r\n                }\r\n            });\r\n        //Obtngo los tipos de activos y dispositivos \r\n        //que tiene permitidos el customer en sus atributos\r\n        //y también las vías de notificación (ifttt, telegram...)\r\n        attributeService.getEntityAttributesValues(\r\n            'CUSTOMER', userService.getCurrentUser()\r\n            .customerId,\r\n            'SERVER_SCOPE').then(\r\n            function(data) {\r\n                if (data.length) {\r\n                    getTiposDeActivosYDispositivos(\r\n                        data);\r\n                }\r\n            });\r\n        //Obtengo los activos del customer para poder\r\n        //mostrarlos como potenciales padres\r\n        assetService.getCustomerAssets(userService\r\n            .getCurrentUser()\r\n            .customerId, {\r\n                \"limit\": 100\r\n            }).then(\r\n            function(data) {\r\n                if (data.data.length) {\r\n                    getActivos(data.data);\r\n\r\n                }\r\n            });\r\n\r\n        //Obtengo el token del dispositivo SYSTEM\r\n        deviceService.getCustomerDevices(userService\r\n            .getCurrentUser().customerId, {\r\n                \"limit\": 100\r\n            }, false, {}, 'SYSTEM').then(\r\n            function(data) {\r\n                if (data.data.length == 1) {\r\n                    deviceService\r\n                        .getDeviceCredentials(\r\n                            data.data[0].id.id,\r\n                            true, {}\r\n                        ).then(\r\n                            function(response) {\r\n                                vm.tokenControl =\r\n                                    response\r\n                                    .credentialsId;\r\n\r\n                            });\r\n                }\r\n            });\r\n\r\n\r\n        $q.all([entityRelationService.findInfoByFrom(\r\n                entityId.id, entityId.entityType\r\n            ), entityRelationService\r\n            .findInfoByTo(entityId.id, entityId\r\n                .entityType)\r\n        ]).then(\r\n            function(relations) {\r\n                getEntityRelations(relations);\r\n            });\r\n\r\n    }\r\n\r\n    function saveAttributes() {\r\n        var attributesArray = [];\r\n        for (var key in vm.attributes) {\r\n            if (vm.attributes[key] !== vm\r\n                .serverAttributes[key]) {\r\n                attributesArray.push({\r\n                    key: key,\r\n                    value: vm.attributes[key]\r\n                });\r\n            }\r\n        }\r\n        if (attributesArray.length > 0) {\r\n            attributeService.saveEntityAttributes(\r\n                entityId.entityType, entityId.id,\r\n                \"SERVER_SCOPE\", attributesArray);\r\n        }\r\n    }\r\n\r\n    function saveRelations() {\r\n        var tasks = [];\r\n        for (var i = 0; i < vm.newRelations\r\n            .length; i++) {\r\n            var relation = {\r\n                type: vm.newRelations[i]\r\n                    .relationType\r\n            };\r\n            if (vm.newRelations[i].direction == types\r\n                .entitySearchDirection.from) {\r\n                relation.to = vm.newRelations[i]\r\n                    .relatedEntity;\r\n                relation.from = entityId;\r\n            } else {\r\n                relation.to = entityId;\r\n                relation.from = vm.newRelations[i]\r\n                    .relatedEntity;\r\n            }\r\n            tasks.push(entityRelationService\r\n                .saveRelation(relation));\r\n        }\r\n        for (var i = 0; i < vm.relationsToDelete\r\n            .length; i++) {\r\n            var relation = {\r\n                type: vm.relationsToDelete[i]\r\n                    .relationType\r\n            };\r\n            if (vm.relationsToDelete[i].direction ==\r\n                types.entitySearchDirection.from) {\r\n                relation.to = vm.relationsToDelete[i]\r\n                    .relatedEntity;\r\n                relation.from = entityId;\r\n            } else {\r\n                relation.to = entityId;\r\n                relation.from = vm.relationsToDelete[i]\r\n                    .relatedEntity;\r\n            }\r\n            tasks.push(entityRelationService\r\n                .deleteRelation(relation.from.id,\r\n                    relation.from.entityType,\r\n                    relation.type, relation.to.id,\r\n                    relation.to.entityType));\r\n        }\r\n        $q.all(tasks).then(function() {\r\n            vm.relations = vm.relations.concat(\r\n                vm.newRelations);\r\n            vm.newRelations = [];\r\n            vm.relationsToDelete = [];\r\n            updateAliasData();\r\n        });\r\n    }\r\n\r\n    function updateAliasData() {\r\n        var aliasIds = [];\r\n        for (var id in widgetContext.aliasController\r\n                .resolvedAliases) {\r\n            aliasIds.push(id);\r\n        }\r\n        var tasks = [];\r\n        aliasIds.forEach(function(aliasId) {\r\n            widgetContext.aliasController\r\n                .setAliasUnresolved(aliasId);\r\n            tasks.push(widgetContext\r\n                .aliasController\r\n                .getAliasInfo(aliasId));\r\n        });\r\n        $q.all(tasks).then(function() {\r\n            $rootScope.$broadcast(\r\n                'entityAliasesChanged',\r\n                aliasIds);\r\n        });\r\n    }\r\n\r\n}"
              }
            ]
          },
          "showTitleIcon": false,
          "titleIcon": null,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "displayTimewindow": true
        },
        "id": "fba8b82f-4b63-d360-68e1-9481f57706b1"
      },
      "f1a629d9-faa9-ae03-8c9e-91e0037b17bc": {
        "isSystemType": true,
        "bundleAlias": "iotopentech",
        "typeAlias": "perfil2",
        "type": "static",
        "title": "New widget",
        "sizeX": 7,
        "sizeY": 14,
        "config": {
          "datasources": [],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": true,
          "backgroundColor": "rgb(255, 255, 255)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "8px",
          "settings": {
            "showResultMessage": true,
            "widgetTitle": "PERFUL DE"
          },
          "title": "PERFIL DE USUARIO",
          "dropShadow": true,
          "showTitleIcon": false,
          "titleIcon": null,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "enableFullscreen": true,
          "widgetStyle": {},
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "useDashboardTimewindow": true,
          "displayTimewindow": true,
          "showLegend": false,
          "actions": {}
        },
        "id": "f1a629d9-faa9-ae03-8c9e-91e0037b17bc"
      },
      "58b27f5a-e29a-7c88-111f-586d8b32a086": {
        "isSystemType": true,
        "bundleAlias": "iotopentech",
        "typeAlias": "device_claiming_widget",
        "type": "static",
        "title": "New widget",
        "sizeX": 8,
        "sizeY": 6,
        "config": {
          "datasources": [],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": true,
          "backgroundColor": "rgb(255, 255, 255)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "8px",
          "settings": {
            "deviceSecret": true,
            "showLabel": true
          },
          "title": "RECLAMAR DISPOSITIVO",
          "dropShadow": true,
          "showTitleIcon": false,
          "titleIcon": null,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "enableFullscreen": false,
          "enableDataExport": true,
          "widgetStyle": {},
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "useDashboardTimewindow": true,
          "displayTimewindow": true,
          "showLegend": false,
          "actions": {}
        },
        "id": "58b27f5a-e29a-7c88-111f-586d8b32a086"
      },
      "74f06f8b-d82d-d5c4-b438-da0472ecf7e8": {
        "isSystemType": true,
        "bundleAlias": "cards",
        "typeAlias": "simple_card",
        "type": "latest",
        "title": "New widget",
        "sizeX": 4,
        "sizeY": 3,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "dataKeys": [
                {
                  "name": "dispositivosActivos",
                  "type": "timeseries",
                  "label": "Nº Dispositivos",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.7126089966406222
                }
              ],
              "entityAliasId": "d5716c46-7e3f-d8a7-163b-c9a265a4ea0f"
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": true,
          "backgroundColor": "#ff5722",
          "color": "rgba(255, 255, 255, 0.87)",
          "padding": "16px",
          "settings": {
            "labelPosition": "top"
          },
          "title": "",
          "dropShadow": true,
          "enableFullscreen": false,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "units": "",
          "decimals": 0,
          "useDashboardTimewindow": true,
          "showLegend": false,
          "widgetStyle": {},
          "actions": {
            "headerButton": [
              {
                "id": "015add2c-d27a-b5ef-e7a7-034e67e121cc",
                "name": "Contabilidad",
                "icon": "more_horiz",
                "type": "openDashboardState",
                "targetDashboardStateId": "contabilidad",
                "setEntityId": true
              }
            ]
          },
          "showTitleIcon": false,
          "titleIcon": null,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "displayTimewindow": true
        },
        "id": "74f06f8b-d82d-d5c4-b438-da0472ecf7e8"
      },
      "97cdc902-7547-2fd8-caab-ecca41cf46a8": {
        "isSystemType": true,
        "bundleAlias": "cards",
        "typeAlias": "simple_card",
        "type": "latest",
        "title": "New widget",
        "sizeX": 4,
        "sizeY": 3,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "dataKeys": [
                {
                  "name": "credito",
                  "type": "timeseries",
                  "label": "Crédito",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.2595345730556584
                }
              ],
              "entityAliasId": "d5716c46-7e3f-d8a7-163b-c9a265a4ea0f"
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": true,
          "backgroundColor": "#ff5722",
          "color": "rgba(255, 255, 255, 0.87)",
          "padding": "16px",
          "settings": {
            "labelPosition": "top"
          },
          "title": "",
          "dropShadow": true,
          "enableFullscreen": false,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "units": "",
          "decimals": 0,
          "useDashboardTimewindow": true,
          "showLegend": false,
          "widgetStyle": {},
          "actions": {
            "headerButton": [
              {
                "id": "4f03f567-f6cd-0045-6053-ea4b60141306",
                "name": "Contabilidad",
                "icon": "more_horiz",
                "type": "openDashboardState",
                "targetDashboardStateId": "contabilidad",
                "setEntityId": true
              }
            ]
          },
          "showTitleIcon": false,
          "titleIcon": null,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "displayTimewindow": true
        },
        "id": "97cdc902-7547-2fd8-caab-ecca41cf46a8"
      },
      "48c9f0e5-c2eb-3968-b0ac-d139e2137268": {
        "isSystemType": true,
        "bundleAlias": "charts",
        "typeAlias": "timeseries_bars_flot",
        "type": "timeseries",
        "title": "New widget",
        "sizeX": 24,
        "sizeY": 9,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "dataKeys": [
                {
                  "name": "credito",
                  "type": "timeseries",
                  "label": "Crédito",
                  "color": "#66bb6a",
                  "settings": {
                    "excludeFromStacking": false,
                    "hideDataByDefault": false,
                    "disableDataHiding": false,
                    "removeFromLegend": false,
                    "showLines": false,
                    "fillLines": false,
                    "showPoints": false,
                    "showPointShape": "circle",
                    "pointShapeFormatter": "var size = radius * Math.sqrt(Math.PI) / 2;\nctx.moveTo(x - size, y - size);\nctx.lineTo(x + size, y + size);\nctx.moveTo(x - size, y + size);\nctx.lineTo(x + size, y - size);",
                    "showPointsLineWidth": 5,
                    "showPointsRadius": 3,
                    "showSeparateAxis": false,
                    "axisPosition": "left",
                    "thresholds": [
                      {
                        "thresholdValueSource": "predefinedValue"
                      }
                    ],
                    "comparisonSettings": {
                      "showValuesForComparison": true
                    }
                  },
                  "_hash": 0.6710845221918174
                },
                {
                  "name": "dispositivosActivos",
                  "type": "timeseries",
                  "label": "Nº Dispositivos",
                  "color": "#f44336",
                  "settings": {
                    "excludeFromStacking": false,
                    "hideDataByDefault": false,
                    "disableDataHiding": false,
                    "removeFromLegend": false,
                    "showLines": false,
                    "fillLines": false,
                    "showPoints": false,
                    "showPointShape": "circle",
                    "pointShapeFormatter": "var size = radius * Math.sqrt(Math.PI) / 2;\nctx.moveTo(x - size, y - size);\nctx.lineTo(x + size, y + size);\nctx.moveTo(x - size, y + size);\nctx.lineTo(x + size, y - size);",
                    "showPointsLineWidth": 5,
                    "showPointsRadius": 3,
                    "showSeparateAxis": false,
                    "axisPosition": "left",
                    "thresholds": [
                      {
                        "thresholdValueSource": "predefinedValue"
                      }
                    ],
                    "comparisonSettings": {
                      "showValuesForComparison": true
                    }
                  },
                  "_hash": 0.9330202211414669
                }
              ],
              "entityAliasId": "d5716c46-7e3f-d8a7-163b-c9a265a4ea0f"
            }
          ],
          "timewindow": {
            "realtime": {
              "interval": 86400000,
              "timewindowMs": 2592000000
            },
            "aggregation": {
              "type": "AVG",
              "limit": 200
            },
            "hideInterval": false,
            "hideAggregation": true,
            "hideAggInterval": true
          },
          "showTitle": true,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "8px",
          "settings": {
            "shadowSize": 4,
            "fontColor": "#545454",
            "fontSize": 10,
            "xaxis": {
              "showLabels": true,
              "color": "#545454"
            },
            "yaxis": {
              "showLabels": true,
              "color": "#545454"
            },
            "grid": {
              "color": "#545454",
              "tickColor": "#DDDDDD",
              "verticalLines": true,
              "horizontalLines": true,
              "outlineWidth": 1
            },
            "stack": false,
            "tooltipIndividual": true,
            "defaultBarWidth": 600,
            "barAlignment": "left",
            "timeForComparison": "months",
            "xaxisSecond": {
              "axisPosition": "top",
              "showLabels": true
            },
            "tooltipCumulative": true
          },
          "title": "New Timeseries Bars - Flot",
          "dropShadow": true,
          "enableFullscreen": true,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "mobileHeight": null,
          "widgetStyle": {},
          "useDashboardTimewindow": false,
          "showLegend": true,
          "actions": {},
          "showTitleIcon": false,
          "titleIcon": null,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "displayTimewindow": true
        },
        "id": "48c9f0e5-c2eb-3968-b0ac-d139e2137268"
      }
    },
    "states": {
      "default": {
        "name": "Configuración",
        "root": true,
        "layouts": {
          "main": {
            "widgets": {
              "fba8b82f-4b63-d360-68e1-9481f57706b1": {
                "sizeX": 9,
                "sizeY": 11,
                "row": 0,
                "col": 7
              },
              "f1a629d9-faa9-ae03-8c9e-91e0037b17bc": {
                "sizeX": 7,
                "sizeY": 14,
                "row": 0,
                "col": 0
              },
              "58b27f5a-e29a-7c88-111f-586d8b32a086": {
                "sizeX": 8,
                "sizeY": 6,
                "row": 0,
                "col": 16
              },
              "74f06f8b-d82d-d5c4-b438-da0472ecf7e8": {
                "sizeX": 4,
                "sizeY": 3,
                "row": 6,
                "col": 16
              },
              "97cdc902-7547-2fd8-caab-ecca41cf46a8": {
                "sizeX": 4,
                "sizeY": 3,
                "row": 6,
                "col": 20
              }
            },
            "gridSettings": {
              "backgroundColor": "#eeeeee",
              "color": "rgba(0,0,0,0.870588)",
              "columns": 24,
              "margins": [
                10,
                10
              ],
              "backgroundSizeMode": "100%"
            }
          }
        }
      },
      "contabilidad": {
        "name": "Contabilidad",
        "root": false,
        "layouts": {
          "main": {
            "widgets": {
              "48c9f0e5-c2eb-3968-b0ac-d139e2137268": {
                "sizeX": 24,
                "sizeY": 9,
                "mobileHeight": null,
                "row": 0,
                "col": 0
              }
            },
            "gridSettings": {
              "backgroundColor": "#eeeeee",
              "color": "rgba(0,0,0,0.870588)",
              "columns": 24,
              "margins": [
                10,
                10
              ],
              "backgroundSizeMode": "100%"
            }
          }
        }
      }
    },
    "entityAliases": {
      "bc41b835-4a1d-49fc-de3b-142ec2484fd4": {
        "id": "bc41b835-4a1d-49fc-de3b-142ec2484fd4",
        "alias": "ActivoROOT",
        "filter": {
          "type": "assetType",
          "resolveMultiple": true,
          "assetType": "ROOT",
          "assetNameFilter": ""
        }
      },
      "d5716c46-7e3f-d8a7-163b-c9a265a4ea0f": {
        "id": "d5716c46-7e3f-d8a7-163b-c9a265a4ea0f",
        "alias": "customer",
        "filter": {
          "type": "singleEntity",
          "resolveMultiple": false,
          "singleEntity": {
            "entityType": "CURRENT_CUSTOMER",
            "id": "5334c2d0-88bb-11ea-823d-a96a9e8c2286"
          }
        }
      }
    },
    "timewindow": {
      "displayValue": "",
      "selectedTab": 0,
      "hideInterval": false,
      "hideAggregation": false,
      "hideAggInterval": false,
      "realtime": {
        "interval": 1000,
        "timewindowMs": 60000
      },
      "history": {
        "historyType": 0,
        "interval": 1000,
        "timewindowMs": 60000,
        "fixedTimewindow": {
          "startTimeMs": 1584265253803,
          "endTimeMs": 1584351653803
        }
      },
      "aggregation": {
        "type": "AVG",
        "limit": 25000
      }
    },
    "settings": {
      "stateControllerId": "entity",
      "showTitle": false,
      "showDashboardsSelect": true,
      "showEntitiesSelect": true,
      "showDashboardTimewindow": true,
      "showDashboardExport": true,
      "toolbarAlwaysOpen": true
    }
  },
  "name": "Configuración"
}